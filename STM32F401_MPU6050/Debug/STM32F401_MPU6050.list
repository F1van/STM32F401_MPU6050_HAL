
STM32F401_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800d438  0800d438  0001d438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9a8  0800d9a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9b0  0800d9b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9b0  0800d9b0  0001d9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d9b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001e8  0800db9c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800db9c  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c48  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002953  00000000  00000000  00034e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000377b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003da7  00000000  00000000  00039a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a8f  00000000  00000000  0003d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098497  00000000  00000000  00053286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb71d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  000eb770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d420 	.word	0x0800d420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d420 	.word	0x0800d420

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <i2c_write_bits>:
#include "i2c.h"

void i2c_write_bits(I2C_HandleTypeDef *I2Cx, uint8_t dev_addr, uint8_t reg_addr, uint8_t length, uint8_t start_bit, uint8_t data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	70fb      	strb	r3, [r7, #3]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	70bb      	strb	r3, [r7, #2]
 8000f72:	4613      	mov	r3, r2
 8000f74:	707b      	strb	r3, [r7, #1]
    // Get data byte
    static uint8_t temp = 0;

    HAL_I2C_Mem_Read(I2Cx, dev_addr, reg_addr, 1, &temp, 1, i2c_timeout);
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	b299      	uxth	r1, r3
 8000f7a:	78bb      	ldrb	r3, [r7, #2]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <i2c_write_bits+0xa4>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2301      	movs	r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <i2c_write_bits+0xa8>)
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f003 fb41 	bl	8004618 <HAL_I2C_Mem_Read>

    temp &= ~(((1 << length) - 1) << start_bit);
 8000f96:	787b      	ldrb	r3, [r7, #1]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	7c3b      	ldrb	r3, [r7, #16]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <i2c_write_bits+0xa8>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <i2c_write_bits+0xa8>)
 8000fba:	701a      	strb	r2, [r3, #0]

    temp |= data << start_bit;
 8000fbc:	7d3a      	ldrb	r2, [r7, #20]
 8000fbe:	7c3b      	ldrb	r3, [r7, #16]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	b25a      	sxtb	r2, r3
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <i2c_write_bits+0xa8>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <i2c_write_bits+0xa8>)
 8000fd4:	701a      	strb	r2, [r3, #0]

    HAL_I2C_Mem_Write(I2Cx, dev_addr, reg_addr, 1, &temp, 1, i2c_timeout);
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	78bb      	ldrb	r3, [r7, #2]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <i2c_write_bits+0xa4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <i2c_write_bits+0xa8>)
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 fa17 	bl	8004424 <HAL_I2C_Mem_Write>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000
 8001004:	20000204 	.word	0x20000204

08001008 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM1) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d109      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x26>

        counter_output_debug += 100;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3364      	adds	r3, #100	; 0x64
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001022:	6013      	str	r3, [r2, #0]

        counter_delay_mpu += 100;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3364      	adds	r3, #100	; 0x64
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800102c:	6013      	str	r3, [r2, #0]

    }

}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40010000 	.word	0x40010000
 8001040:	2000020c 	.word	0x2000020c
 8001044:	20000208 	.word	0x20000208

08001048 <_write>:

int _write(int file, char *ptr, int len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*)ptr, len); // Configuring the output of debugging information
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	b29b      	uxth	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <_write+0x24>)
 800105e:	f007 fd98 	bl	8008b92 <HAL_UART_Transmit_IT>

    return len;
 8001062:	687b      	ldr	r3, [r7, #4]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000040c 	.word	0x2000040c

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b087      	sub	sp, #28
 8001074:	af06      	add	r7, sp, #24
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001076:	f002 f9db 	bl	8003430 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800107a:	f000 f951 	bl	8001320 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800107e:	f000 fbdf 	bl	8001840 <MX_GPIO_Init>
    MX_DMA_Init();
 8001082:	f000 fbb5 	bl	80017f0 <MX_DMA_Init>
    MX_RTC_Init();
 8001086:	f000 fa21 	bl	80014cc <MX_RTC_Init>
    MX_TIM1_Init();
 800108a:	f000 fa79 	bl	8001580 <MX_TIM1_Init>
    MX_USART1_UART_Init();
 800108e:	f000 fb85 	bl	800179c <MX_USART1_UART_Init>
    MX_I2C1_Init();
 8001092:	f000 f9ed 	bl	8001470 <MX_I2C1_Init>
    MX_TIM2_Init();
 8001096:	f000 fac3 	bl	8001620 <MX_TIM2_Init>
    MX_TIM3_Init();
 800109a:	f000 fb31 	bl	8001700 <MX_TIM3_Init>

    /* Initialize interrupts */
    MX_NVIC_Init();
 800109e:	f000 f9ab 	bl	80013f8 <MX_NVIC_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	4882      	ldr	r0, [pc, #520]	; (80012b0 <main+0x240>)
 80010a6:	f006 fea3 	bl	8007df0 <HAL_TIM_IC_Start_IT>

    TIM_SET_UG(TIM1);             // Set update generation flag
 80010aa:	4b82      	ldr	r3, [pc, #520]	; (80012b4 <main+0x244>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a81      	ldr	r2, [pc, #516]	; (80012b4 <main+0x244>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6153      	str	r3, [r2, #20]

    TIM_RESET_UIF(TIM1);          // Reset update interrupt flag
 80010b6:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <main+0x244>)
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	4a7e      	ldr	r2, [pc, #504]	; (80012b4 <main+0x244>)
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6113      	str	r3, [r2, #16]

    HAL_TIM_Base_Start_IT(&htim1);
 80010c2:	487d      	ldr	r0, [pc, #500]	; (80012b8 <main+0x248>)
 80010c4:	f006 fdd8 	bl	8007c78 <HAL_TIM_Base_Start_IT>

    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010c8:	2100      	movs	r1, #0
 80010ca:	4879      	ldr	r0, [pc, #484]	; (80012b0 <main+0x240>)
 80010cc:	f006 fe90 	bl	8007df0 <HAL_TIM_IC_Start_IT>

    TIM_SET_UG(TIM3);             // Set update generation flag
 80010d0:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <main+0x24c>)
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	4a79      	ldr	r2, [pc, #484]	; (80012bc <main+0x24c>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6153      	str	r3, [r2, #20]

    TIM_RESET_UIF(TIM3);          // Reset update interrupt flag
 80010dc:	4b77      	ldr	r3, [pc, #476]	; (80012bc <main+0x24c>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	4a76      	ldr	r2, [pc, #472]	; (80012bc <main+0x24c>)
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	6113      	str	r3, [r2, #16]

    HAL_TIM_Base_Start_IT(&htim3);
 80010e8:	4875      	ldr	r0, [pc, #468]	; (80012c0 <main+0x250>)
 80010ea:	f006 fdc5 	bl	8007c78 <HAL_TIM_Base_Start_IT>

    read_MPU_ID(&hi2c1);
 80010ee:	4875      	ldr	r0, [pc, #468]	; (80012c4 <main+0x254>)
 80010f0:	f000 ff88 	bl	8002004 <read_MPU_ID>

    MPU6050_self_test(&hi2c1);
 80010f4:	4873      	ldr	r0, [pc, #460]	; (80012c4 <main+0x254>)
 80010f6:	f001 faaf 	bl	8002658 <MPU6050_self_test>

    MPU_calibrate(&hi2c1);
 80010fa:	4872      	ldr	r0, [pc, #456]	; (80012c4 <main+0x254>)
 80010fc:	f001 fa80 	bl	8002600 <MPU_calibrate>

    MPU6050_init(&hi2c1);
 8001100:	4870      	ldr	r0, [pc, #448]	; (80012c4 <main+0x254>)
 8001102:	f000 fff7 	bl	80020f4 <MPU6050_init>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        if (counter_output_debug == DELAY_OUTPUT_DEBUG) {
 8001106:	4b70      	ldr	r3, [pc, #448]	; (80012c8 <main+0x258>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a70      	ldr	r2, [pc, #448]	; (80012cc <main+0x25c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d144      	bne.n	800119a <main+0x12a>

            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001110:	2200      	movs	r2, #0
 8001112:	496f      	ldr	r1, [pc, #444]	; (80012d0 <main+0x260>)
 8001114:	486f      	ldr	r0, [pc, #444]	; (80012d4 <main+0x264>)
 8001116:	f006 fb71 	bl	80077fc <HAL_RTC_GetTime>

            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800111a:	2200      	movs	r2, #0
 800111c:	496e      	ldr	r1, [pc, #440]	; (80012d8 <main+0x268>)
 800111e:	486d      	ldr	r0, [pc, #436]	; (80012d4 <main+0x264>)
 8001120:	f006 fc4e 	bl	80079c0 <HAL_RTC_GetDate>

            printf("Ax = %2.5lf; Ay = %2.5lf; Az = %2.5lf\r\n", MPU6050.smooth_Ax, MPU6050.smooth_Ay, MPU6050.smooth_Az);
 8001124:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <main+0x26c>)
 8001126:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800112a:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <main+0x26c>)
 800112c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001130:	496a      	ldr	r1, [pc, #424]	; (80012dc <main+0x26c>)
 8001132:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8001136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800113a:	e9cd 2300 	strd	r2, r3, [sp]
 800113e:	4622      	mov	r2, r4
 8001140:	462b      	mov	r3, r5
 8001142:	4867      	ldr	r0, [pc, #412]	; (80012e0 <main+0x270>)
 8001144:	f009 f8cc 	bl	800a2e0 <iprintf>

            HAL_Delay(5);
 8001148:	2005      	movs	r0, #5
 800114a:	f002 f9e3 	bl	8003514 <HAL_Delay>

            printf("Gx = %2.5lf; Gy = %2.5lf; Gz = %2.5lf\r\n", MPU6050.smooth_Gx, MPU6050.smooth_Gy, MPU6050.smooth_Gz);
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <main+0x26c>)
 8001150:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001154:	4b61      	ldr	r3, [pc, #388]	; (80012dc <main+0x26c>)
 8001156:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800115a:	4960      	ldr	r1, [pc, #384]	; (80012dc <main+0x26c>)
 800115c:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8001160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001164:	e9cd 2300 	strd	r2, r3, [sp]
 8001168:	4622      	mov	r2, r4
 800116a:	462b      	mov	r3, r5
 800116c:	485d      	ldr	r0, [pc, #372]	; (80012e4 <main+0x274>)
 800116e:	f009 f8b7 	bl	800a2e0 <iprintf>

            HAL_Delay(5);
 8001172:	2005      	movs	r0, #5
 8001174:	f002 f9ce 	bl	8003514 <HAL_Delay>

            printf("%02d:%02d:%02d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds); // Debugging information output
 8001178:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <main+0x260>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <main+0x260>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	461a      	mov	r2, r3
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <main+0x260>)
 8001186:	789b      	ldrb	r3, [r3, #2]
 8001188:	4857      	ldr	r0, [pc, #348]	; (80012e8 <main+0x278>)
 800118a:	f009 f8a9 	bl	800a2e0 <iprintf>

            HAL_Delay(5);
 800118e:	2005      	movs	r0, #5
 8001190:	f002 f9c0 	bl	8003514 <HAL_Delay>

            counter_output_debug = 0;
 8001194:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <main+0x258>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
        }


        if (check_data == TRUE) {
 800119a:	4b54      	ldr	r3, [pc, #336]	; (80012ec <main+0x27c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0b0      	beq.n	8001106 <main+0x96>
            check_data = FALSE;
 80011a4:	4b51      	ldr	r3, [pc, #324]	; (80012ec <main+0x27c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

            twin_output_ax = MPU6050.smooth_Ax;
 80011aa:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <main+0x26c>)
 80011ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd00 	bl	8000bb8 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a4d      	ldr	r2, [pc, #308]	; (80012f0 <main+0x280>)
 80011bc:	6013      	str	r3, [r2, #0]

            twin_output_ay = a_pitch;
 80011be:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <main+0x284>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fcf6 	bl	8000bb8 <__aeabi_d2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <main+0x288>)
 80011d0:	6013      	str	r3, [r2, #0]

            twin_output_az = a_yaw;
 80011d2:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <main+0x28c>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fcec 	bl	8000bb8 <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a47      	ldr	r2, [pc, #284]	; (8001300 <main+0x290>)
 80011e4:	6013      	str	r3, [r2, #0]

            twin_output_gx = g_roll;
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <main+0x294>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fce2 	bl	8000bb8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a44      	ldr	r2, [pc, #272]	; (8001308 <main+0x298>)
 80011f8:	6013      	str	r3, [r2, #0]

            twin_output_gy = g_pitch;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <main+0x29c>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fcd8 	bl	8000bb8 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <main+0x2a0>)
 800120c:	6013      	str	r3, [r2, #0]

            twin_output_gz = g_yaw;
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <main+0x2a4>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fcce 	bl	8000bb8 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	4a3e      	ldr	r2, [pc, #248]	; (8001318 <main+0x2a8>)
 8001220:	6013      	str	r3, [r2, #0]

            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001222:	2200      	movs	r2, #0
 8001224:	492a      	ldr	r1, [pc, #168]	; (80012d0 <main+0x260>)
 8001226:	482b      	ldr	r0, [pc, #172]	; (80012d4 <main+0x264>)
 8001228:	f006 fae8 	bl	80077fc <HAL_RTC_GetTime>

            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800122c:	2200      	movs	r2, #0
 800122e:	492a      	ldr	r1, [pc, #168]	; (80012d8 <main+0x268>)
 8001230:	4828      	ldr	r0, [pc, #160]	; (80012d4 <main+0x264>)
 8001232:	f006 fbc5 	bl	80079c0 <HAL_RTC_GetDate>

            printf("Ax = %2.5lf; Ay = %2.5lf; Az = %2.5lf; CCR1 = %lu\r\n", MPU6050.smooth_Ax, MPU6050.smooth_Ay, MPU6050.smooth_Az, TIM2->CCR1);
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <main+0x26c>)
 8001238:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <main+0x26c>)
 800123e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001242:	4926      	ldr	r1, [pc, #152]	; (80012dc <main+0x26c>)
 8001244:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8001248:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 800124c:	6b76      	ldr	r6, [r6, #52]	; 0x34
 800124e:	9604      	str	r6, [sp, #16]
 8001250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001254:	e9cd 2300 	strd	r2, r3, [sp]
 8001258:	4622      	mov	r2, r4
 800125a:	462b      	mov	r3, r5
 800125c:	482f      	ldr	r0, [pc, #188]	; (800131c <main+0x2ac>)
 800125e:	f009 f83f 	bl	800a2e0 <iprintf>

            HAL_Delay(5);
 8001262:	2005      	movs	r0, #5
 8001264:	f002 f956 	bl	8003514 <HAL_Delay>

            printf("Gx = %2.5lf; Gy = %2.5lf; Gz = %2.5lf\r\n", MPU6050.smooth_Gx, MPU6050.smooth_Gy, MPU6050.smooth_Gz);
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <main+0x26c>)
 800126a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <main+0x26c>)
 8001270:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001274:	4919      	ldr	r1, [pc, #100]	; (80012dc <main+0x26c>)
 8001276:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800127a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800127e:	e9cd 2300 	strd	r2, r3, [sp]
 8001282:	4622      	mov	r2, r4
 8001284:	462b      	mov	r3, r5
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <main+0x274>)
 8001288:	f009 f82a 	bl	800a2e0 <iprintf>

            HAL_Delay(5);
 800128c:	2005      	movs	r0, #5
 800128e:	f002 f941 	bl	8003514 <HAL_Delay>

            printf("%02d:%02d:%02d\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds); // Debugging information output
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <main+0x260>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <main+0x260>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	461a      	mov	r2, r3
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <main+0x260>)
 80012a0:	789b      	ldrb	r3, [r3, #2]
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <main+0x278>)
 80012a4:	f009 f81c 	bl	800a2e0 <iprintf>

            HAL_Delay(5);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f002 f933 	bl	8003514 <HAL_Delay>
        if (counter_output_debug == DELAY_OUTPUT_DEBUG) {
 80012ae:	e72a      	b.n	8001106 <main+0x96>
 80012b0:	2000031c 	.word	0x2000031c
 80012b4:	40010000 	.word	0x40010000
 80012b8:	200002d4 	.word	0x200002d4
 80012bc:	40000400 	.word	0x40000400
 80012c0:	20000364 	.word	0x20000364
 80012c4:	20000260 	.word	0x20000260
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	000186a0 	.word	0x000186a0
 80012d0:	200004b0 	.word	0x200004b0
 80012d4:	200002b4 	.word	0x200002b4
 80012d8:	200004c4 	.word	0x200004c4
 80012dc:	200004c8 	.word	0x200004c8
 80012e0:	0800d438 	.word	0x0800d438
 80012e4:	0800d460 	.word	0x0800d460
 80012e8:	0800d488 	.word	0x0800d488
 80012ec:	20000205 	.word	0x20000205
 80012f0:	20000248 	.word	0x20000248
 80012f4:	20000218 	.word	0x20000218
 80012f8:	2000024c 	.word	0x2000024c
 80012fc:	20000228 	.word	0x20000228
 8001300:	20000250 	.word	0x20000250
 8001304:	20000238 	.word	0x20000238
 8001308:	20000254 	.word	0x20000254
 800130c:	20000230 	.word	0x20000230
 8001310:	20000258 	.word	0x20000258
 8001314:	20000240 	.word	0x20000240
 8001318:	2000025c 	.word	0x2000025c
 800131c:	0800d49c 	.word	0x0800d49c

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2230      	movs	r2, #48	; 0x30
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f008 fb64 	bl	80099fc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <SystemClock_Config+0xd0>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <SystemClock_Config+0xd0>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <SystemClock_Config+0xd0>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <SystemClock_Config+0xd4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <SystemClock_Config+0xd4>)
 800136e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <SystemClock_Config+0xd4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8001380:	230a      	movs	r3, #10
 8001382:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001388:	2310      	movs	r3, #16
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001390:	2302      	movs	r3, #2
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8001398:	2308      	movs	r3, #8
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 72;
 800139c:	2348      	movs	r3, #72	; 0x48
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013a8:	f107 0320 	add.w	r3, r7, #32
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 fb8f 	bl	8006ad0 <HAL_RCC_OscConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x9c>
        Error_Handler();
 80013b8:	f000 fe1e 	bl	8001ff8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013bc:	230f      	movs	r3, #15
 80013be:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c0:	2302      	movs	r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2102      	movs	r1, #2
 80013d8:	4618      	mov	r0, r3
 80013da:	f005 fdf1 	bl	8006fc0 <HAL_RCC_ClockConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0xc8>
        Error_Handler();
 80013e4:	f000 fe08 	bl	8001ff8 <Error_Handler>
    }
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	; 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000

080013f8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    /* TIM2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	201c      	movs	r0, #28
 8001402:	f002 f986 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001406:	201c      	movs	r0, #28
 8001408:	f002 f99f 	bl	800374a <HAL_NVIC_EnableIRQ>
    /* TIM1_UP_TIM10_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2019      	movs	r0, #25
 8001412:	f002 f97e 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001416:	2019      	movs	r0, #25
 8001418:	f002 f997 	bl	800374a <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2010      	movs	r0, #16
 8001422:	f002 f976 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001426:	2010      	movs	r0, #16
 8001428:	f002 f98f 	bl	800374a <HAL_NVIC_EnableIRQ>
    /* I2C1_EV_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	201f      	movs	r0, #31
 8001432:	f002 f96e 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001436:	201f      	movs	r0, #31
 8001438:	f002 f987 	bl	800374a <HAL_NVIC_EnableIRQ>
    /* I2C1_ER_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2020      	movs	r0, #32
 8001442:	f002 f966 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001446:	2020      	movs	r0, #32
 8001448:	f002 f97f 	bl	800374a <HAL_NVIC_EnableIRQ>
    /* USART1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2025      	movs	r0, #37	; 0x25
 8001452:	f002 f95e 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001456:	2025      	movs	r0, #37	; 0x25
 8001458:	f002 f977 	bl	800374a <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream7_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2046      	movs	r0, #70	; 0x46
 8001462:	f002 f956 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001466:	2046      	movs	r0, #70	; 0x46
 8001468:	f002 f96f 	bl	800374a <HAL_NVIC_EnableIRQ>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <MX_I2C1_Init+0x54>)
 8001478:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_I2C1_Init+0x50>)
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_I2C1_Init+0x58>)
 800147e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_I2C1_Init+0x50>)
 800148e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001492:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014ae:	f002 fe75 	bl	800419c <HAL_I2C_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C1_Init+0x4c>
        Error_Handler();
 80014b8:	f000 fd9e 	bl	8001ff8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000260 	.word	0x20000260
 80014c4:	40005400 	.word	0x40005400
 80014c8:	00061a80 	.word	0x00061a80

080014cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN RTC_Init 0 */

    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]

    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
    */
    hrtc.Instance = RTC;
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <MX_RTC_Init+0xac>)
 80014e6:	4a25      	ldr	r2, [pc, #148]	; (800157c <MX_RTC_Init+0xb0>)
 80014e8:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014ea:	4b23      	ldr	r3, [pc, #140]	; (8001578 <MX_RTC_Init+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_RTC_Init+0xac>)
 80014f2:	227f      	movs	r2, #127	; 0x7f
 80014f4:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <MX_RTC_Init+0xac>)
 80014f8:	22ff      	movs	r2, #255	; 0xff
 80014fa:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_RTC_Init+0xac>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_RTC_Init+0xac>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_RTC_Init+0xac>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800150e:	481a      	ldr	r0, [pc, #104]	; (8001578 <MX_RTC_Init+0xac>)
 8001510:	f006 f864 	bl	80075dc <HAL_RTC_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_RTC_Init+0x52>
        Error_Handler();
 800151a:	f000 fd6d 	bl	8001ff8 <Error_Handler>

    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
    */
    sTime.Hours = 0x0;
 800151e:	2300      	movs	r3, #0
 8001520:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8001522:	2300      	movs	r3, #0
 8001524:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8001526:	2300      	movs	r3, #0
 8001528:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_RTC_Init+0xac>)
 800153a:	f006 f8c5 	bl	80076c8 <HAL_RTC_SetTime>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_RTC_Init+0x7c>
        Error_Handler();
 8001544:	f000 fd58 	bl	8001ff8 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001548:	2301      	movs	r3, #1
 800154a:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 800154c:	2301      	movs	r3, #1
 800154e:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8001550:	2301      	movs	r3, #1
 8001552:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8001554:	2300      	movs	r3, #0
 8001556:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001558:	463b      	mov	r3, r7
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_RTC_Init+0xac>)
 8001560:	f006 f9aa 	bl	80078b8 <HAL_RTC_SetDate>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_RTC_Init+0xa2>
        Error_Handler();
 800156a:	f000 fd45 	bl	8001ff8 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002b4 	.word	0x200002b4
 800157c:	40002800 	.word	0x40002800

08001580 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_TIM1_Init+0x98>)
 800159e:	4a1f      	ldr	r2, [pc, #124]	; (800161c <MX_TIM1_Init+0x9c>)
 80015a0:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 7199;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_TIM1_Init+0x98>)
 80015a4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015a8:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_TIM1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 99;
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_TIM1_Init+0x98>)
 80015b2:	2263      	movs	r2, #99	; 0x63
 80015b4:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_TIM1_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_TIM1_Init+0x98>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_TIM1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015c8:	4813      	ldr	r0, [pc, #76]	; (8001618 <MX_TIM1_Init+0x98>)
 80015ca:	f006 fb05 	bl	8007bd8 <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0x58>
        Error_Handler();
 80015d4:	f000 fd10 	bl	8001ff8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM1_Init+0x98>)
 80015e6:	f006 fec1 	bl	800836c <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x74>
        Error_Handler();
 80015f0:	f000 fd02 	bl	8001ff8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80015fc:	463b      	mov	r3, r7
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_TIM1_Init+0x98>)
 8001602:	f007 f9f7 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x90>
        Error_Handler();
 800160c:	f000 fcf4 	bl	8001ff8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200002d4 	.word	0x200002d4
 800161c:	40010000 	.word	0x40010000

08001620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <MX_TIM2_Init+0xdc>)
 800164c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001650:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 15;
 8001652:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <MX_TIM2_Init+0xdc>)
 8001654:	220f      	movs	r2, #15
 8001656:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_TIM2_Init+0xdc>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 65000;
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <MX_TIM2_Init+0xdc>)
 8001660:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001664:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_TIM2_Init+0xdc>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <MX_TIM2_Init+0xdc>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001672:	4822      	ldr	r0, [pc, #136]	; (80016fc <MX_TIM2_Init+0xdc>)
 8001674:	f006 fab0 	bl	8007bd8 <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0x62>
        Error_Handler();
 800167e:	f000 fcbb 	bl	8001ff8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	61bb      	str	r3, [r7, #24]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	4619      	mov	r1, r3
 800168e:	481b      	ldr	r0, [pc, #108]	; (80016fc <MX_TIM2_Init+0xdc>)
 8001690:	f006 fe6c 	bl	800836c <HAL_TIM_ConfigClockSource>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM2_Init+0x7e>
        Error_Handler();
 800169a:	f000 fcad 	bl	8001ff8 <Error_Handler>
    }
    if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800169e:	4817      	ldr	r0, [pc, #92]	; (80016fc <MX_TIM2_Init+0xdc>)
 80016a0:	f006 fb4c 	bl	8007d3c <HAL_TIM_IC_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x8e>
        Error_Handler();
 80016aa:	f000 fca5 	bl	8001ff8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <MX_TIM2_Init+0xdc>)
 80016be:	f007 f999 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0xac>
        Error_Handler();
 80016c8:	f000 fc96 	bl	8001ff8 <Error_Handler>
    }
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <MX_TIM2_Init+0xdc>)
 80016e4:	f006 fda6 	bl	8008234 <HAL_TIM_IC_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0xd2>
        Error_Handler();
 80016ee:	f000 fc83 	bl	8001ff8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000031c 	.word	0x2000031c

08001700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	463b      	mov	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_TIM3_Init+0x94>)
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <MX_TIM3_Init+0x98>)
 8001720:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 7200 - 1;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <MX_TIM3_Init+0x94>)
 8001724:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001728:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM3_Init+0x94>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_TIM3_Init+0x94>)
 8001732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001736:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_TIM3_Init+0x94>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_TIM3_Init+0x94>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001744:	4813      	ldr	r0, [pc, #76]	; (8001794 <MX_TIM3_Init+0x94>)
 8001746:	f006 fa47 	bl	8007bd8 <HAL_TIM_Base_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM3_Init+0x54>
        Error_Handler();
 8001750:	f000 fc52 	bl	8001ff8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4619      	mov	r1, r3
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <MX_TIM3_Init+0x94>)
 8001762:	f006 fe03 	bl	800836c <HAL_TIM_ConfigClockSource>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x70>
        Error_Handler();
 800176c:	f000 fc44 	bl	8001ff8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001770:	2300      	movs	r3, #0
 8001772:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_TIM3_Init+0x94>)
 800177e:	f007 f939 	bl	80089f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0x8c>
        Error_Handler();
 8001788:	f000 fc36 	bl	8001ff8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000364 	.word	0x20000364
 8001798:	40000400 	.word	0x40000400

0800179c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_USART1_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017d4:	f007 f990 	bl	8008af8 <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 80017de:	f000 fc0b 	bl	8001ff8 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000040c 	.word	0x2000040c
 80017ec:	40011000 	.word	0x40011000

080017f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_DMA_Init+0x4c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a0f      	ldr	r2, [pc, #60]	; (800183c <MX_DMA_Init+0x4c>)
 8001800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <MX_DMA_Init+0x4c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_DMA_Init+0x4c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <MX_DMA_Init+0x4c>)
 800181c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_DMA_Init+0x4c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_GPIO_Init+0x4c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <MX_GPIO_Init+0x4c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <MX_GPIO_Init+0x4c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_GPIO_Init+0x4c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <MX_GPIO_Init+0x4c>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_GPIO_Init+0x4c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	ed2d 8b02 	vpush	{d8}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af04      	add	r7, sp, #16
 800189a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a4:	f040 8380 	bne.w	8001fa8 <HAL_TIM_IC_CaptureCallback+0x718>
        timer = TIM3->CNT;
 80018a8:	4bcb      	ldr	r3, [pc, #812]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x348>)
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	4acb      	ldr	r2, [pc, #812]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x34c>)
 80018ae:	6013      	str	r3, [r2, #0]

        TIM_CLEAR_COUNTER(TIM3);
 80018b0:	4bc9      	ldr	r3, [pc, #804]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x348>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24

        static double Gy[5];

        static double Gz[5];

        MPU6050_Read_All(&hi2c1, &MPU6050);
 80018b6:	49ca      	ldr	r1, [pc, #808]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x350>)
 80018b8:	48ca      	ldr	r0, [pc, #808]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x354>)
 80018ba:	f000 fd19 	bl	80022f0 <MPU6050_Read_All>

        float gx = MPU6050.Gyro_X_RAW * g_norm;				// - gyro_x_bias;
 80018be:	4bc8      	ldr	r3, [pc, #800]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x350>)
 80018c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	4bc6      	ldr	r3, [pc, #792]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x358>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	edc7 7a08 	vstr	s15, [r7, #32]
        float gy = MPU6050.Gyro_Y_RAW * g_norm;				// - gyro_x_bias;
 80018da:	4bc1      	ldr	r3, [pc, #772]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x350>)
 80018dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e8:	4bbf      	ldr	r3, [pc, #764]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x358>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	edc7 7a07 	vstr	s15, [r7, #28]
        float gz = MPU6050.Gyro_Z_RAW * g_norm;				// - gyro_x_bias;
 80018f6:	4bba      	ldr	r3, [pc, #744]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x350>)
 80018f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	4bb8      	ldr	r3, [pc, #736]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x358>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc7 7a06 	vstr	s15, [r7, #24]

        float ax = MPU6050.Accel_X_RAW * a_norm;				// - accel_x_bias;
 8001912:	4bb3      	ldr	r3, [pc, #716]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001920:	4bb2      	ldr	r3, [pc, #712]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192a:	edc7 7a05 	vstr	s15, [r7, #20]
        float ay = MPU6050.Accel_Y_RAW * a_norm;				// - accel_y_bias;
 800192e:	4bac      	ldr	r3, [pc, #688]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001930:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193c:	4bab      	ldr	r3, [pc, #684]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x35c>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001946:	edc7 7a04 	vstr	s15, [r7, #16]
        float az = MPU6050.Accel_Z_RAW * a_norm;				// - accel_z_bias;
 800194a:	4ba5      	ldr	r3, [pc, #660]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x350>)
 800194c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001958:	4ba4      	ldr	r3, [pc, #656]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x35c>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001962:	edc7 7a03 	vstr	s15, [r7, #12]

        a_pitch = 180.f / M_PI * atan2f(ax, az);
 8001966:	edd7 0a03 	vldr	s1, [r7, #12]
 800196a:	ed97 0a05 	vldr	s0, [r7, #20]
 800196e:	f00a fe4b 	bl	800c608 <atan2f>
 8001972:	ee10 3a10 	vmov	r3, s0
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdee 	bl	8000558 <__aeabi_f2d>
 800197c:	a390      	add	r3, pc, #576	; (adr r3, 8001bc0 <HAL_TIM_IC_CaptureCallback+0x330>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fe41 	bl	8000608 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4999      	ldr	r1, [pc, #612]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x360>)
 800198c:	e9c1 2300 	strd	r2, r3, [r1]

        a_roll  = 180.f / M_PI * atan2f(ay, sqrt(ax * ax + az * az));
 8001990:	edd7 7a05 	vldr	s15, [r7, #20]
 8001994:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001998:	edd7 7a03 	vldr	s15, [r7, #12]
 800199c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	ee17 0a90 	vmov	r0, s15
 80019a8:	f7fe fdd6 	bl	8000558 <__aeabi_f2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	ec43 2b10 	vmov	d0, r2, r3
 80019b4:	f00a fdfc 	bl	800c5b0 <sqrt>
 80019b8:	ec53 2b10 	vmov	r2, r3, d0
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f8fa 	bl	8000bb8 <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	ee00 3a90 	vmov	s1, r3
 80019ca:	ed97 0a04 	vldr	s0, [r7, #16]
 80019ce:	f00a fe1b 	bl	800c608 <atan2f>
 80019d2:	ee10 3a10 	vmov	r3, s0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdbe 	bl	8000558 <__aeabi_f2d>
 80019dc:	a378      	add	r3, pc, #480	; (adr r3, 8001bc0 <HAL_TIM_IC_CaptureCallback+0x330>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fe11 	bl	8000608 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4982      	ldr	r1, [pc, #520]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x364>)
 80019ec:	e9c1 2300 	strd	r2, r3, [r1]

        a_yaw = 180.f / M_PI * atan2f((-1.f * ax), sqrt(ay * ay + az * az));
 80019f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f4:	eeb1 8a67 	vneg.f32	s16, s15
 80019f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	ee17 0a90 	vmov	r0, s15
 8001a10:	f7fe fda2 	bl	8000558 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	ec43 2b10 	vmov	d0, r2, r3
 8001a1c:	f00a fdc8 	bl	800c5b0 <sqrt>
 8001a20:	ec53 2b10 	vmov	r2, r3, d0
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f8c6 	bl	8000bb8 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	ee00 3a90 	vmov	s1, r3
 8001a32:	eeb0 0a48 	vmov.f32	s0, s16
 8001a36:	f00a fde7 	bl	800c608 <atan2f>
 8001a3a:	ee10 3a10 	vmov	r3, s0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd8a 	bl	8000558 <__aeabi_f2d>
 8001a44:	a35e      	add	r3, pc, #376	; (adr r3, 8001bc0 <HAL_TIM_IC_CaptureCallback+0x330>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fddd 	bl	8000608 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4969      	ldr	r1, [pc, #420]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x368>)
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]

        timer /= 15625.f;
 8001a58:	4b60      	ldr	r3, [pc, #384]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a64:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001bfc <HAL_TIM_IC_CaptureCallback+0x36c>
 8001a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a70:	ee17 2a90 	vmov	r2, s15
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001a76:	601a      	str	r2, [r3, #0]

        g_pitch -= gy * timer;
 8001a78:	4b58      	ldr	r3, [pc, #352]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a84:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	4b5c      	ldr	r3, [pc, #368]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001a8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd5f 	bl	8000558 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fbf9 	bl	8000298 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4955      	ldr	r1, [pc, #340]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001aac:	e9c1 2300 	strd	r2, r3, [r1]

        g_roll -= gx * timer;
 8001ab0:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001abc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	4b4f      	ldr	r3, [pc, #316]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001ac6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001aca:	ee17 0a90 	vmov	r0, s15
 8001ace:	f7fe fd43 	bl	8000558 <__aeabi_f2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbdd 	bl	8000298 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4948      	ldr	r1, [pc, #288]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001ae4:	e9c1 2300 	strd	r2, r3, [r1]

        g_yaw -= gz * timer;
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001afe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fd27 	bl	8000558 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fbc1 	bl	8000298 <__aeabi_dsub>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	493b      	ldr	r1, [pc, #236]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001b1c:	e9c1 2300 	strd	r2, r3, [r1]

        g_pitch = g_pitch * (1.f - Kf) + a_pitch * Kf;
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b26:	a328      	add	r3, pc, #160	; (adr r3, 8001bc8 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fd6c 	bl	8000608 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4614      	mov	r4, r2
 8001b36:	461d      	mov	r5, r3
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x360>)
 8001b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b3e:	a324      	add	r3, pc, #144	; (adr r3, 8001bd0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fd60 	bl	8000608 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7fe fba4 	bl	800029c <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4929      	ldr	r1, [pc, #164]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001b5a:	e9c1 2300 	strd	r2, r3, [r1]

        g_roll = g_roll * (1.f - Kf) + a_roll * Kf;
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b64:	a318      	add	r3, pc, #96	; (adr r3, 8001bc8 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fd4d 	bl	8000608 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4614      	mov	r4, r2
 8001b74:	461d      	mov	r5, r3
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x364>)
 8001b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b7c:	a314      	add	r3, pc, #80	; (adr r3, 8001bd0 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fd41 	bl	8000608 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe fb85 	bl	800029c <__adddf3>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	491b      	ldr	r1, [pc, #108]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]

        g_yaw = g_yaw * (1.f - Kf) + a_yaw * Kf;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001b9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba2:	a309      	add	r3, pc, #36	; (adr r3, 8001bc8 <HAL_TIM_IC_CaptureCallback+0x338>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fd2e 	bl	8000608 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x368>)
 8001bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bba:	e027      	b.n	8001c0c <HAL_TIM_IC_CaptureCallback+0x37c>
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	1a63c1f8 	.word	0x1a63c1f8
 8001bc4:	404ca5dc 	.word	0x404ca5dc
 8001bc8:	60000000 	.word	0x60000000
 8001bcc:	3fee6666 	.word	0x3fee6666
 8001bd0:	a0000000 	.word	0xa0000000
 8001bd4:	3fa99999 	.word	0x3fa99999
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	20000210 	.word	0x20000210
 8001be0:	200004c8 	.word	0x200004c8
 8001be4:	20000260 	.word	0x20000260
 8001be8:	20000608 	.word	0x20000608
 8001bec:	20000604 	.word	0x20000604
 8001bf0:	20000218 	.word	0x20000218
 8001bf4:	20000220 	.word	0x20000220
 8001bf8:	20000228 	.word	0x20000228
 8001bfc:	46742400 	.word	0x46742400
 8001c00:	20000230 	.word	0x20000230
 8001c04:	20000238 	.word	0x20000238
 8001c08:	20000240 	.word	0x20000240
 8001c0c:	a37e      	add	r3, pc, #504	; (adr r3, 8001e08 <HAL_TIM_IC_CaptureCallback+0x578>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf9 	bl	8000608 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb3d 	bl	800029c <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	496a      	ldr	r1, [pc, #424]	; (8001dd0 <HAL_TIM_IC_CaptureCallback+0x540>)
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]


        Ax[i] = a_roll;
 8001c2c:	4b69      	ldr	r3, [pc, #420]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_TIM_IC_CaptureCallback+0x548>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	4868      	ldr	r0, [pc, #416]	; (8001ddc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8001c3c:	00c9      	lsls	r1, r1, #3
 8001c3e:	4401      	add	r1, r0
 8001c40:	e9c1 2300 	strd	r2, r3, [r1]

        Ay[i] = a_pitch;
 8001c44:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001c46:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <HAL_TIM_IC_CaptureCallback+0x550>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	4864      	ldr	r0, [pc, #400]	; (8001de4 <HAL_TIM_IC_CaptureCallback+0x554>)
 8001c54:	00c9      	lsls	r1, r1, #3
 8001c56:	4401      	add	r1, r0
 8001c58:	e9c1 2300 	strd	r2, r3, [r1]

        Az[i] = a_yaw;
 8001c5c:	4b5d      	ldr	r3, [pc, #372]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4b60      	ldr	r3, [pc, #384]	; (8001de8 <HAL_TIM_IC_CaptureCallback+0x558>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	4860      	ldr	r0, [pc, #384]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x55c>)
 8001c6c:	00c9      	lsls	r1, r1, #3
 8001c6e:	4401      	add	r1, r0
 8001c70:	e9c1 2300 	strd	r2, r3, [r1]

        Gx[i] = g_roll;
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001c76:	f993 3000 	ldrsb.w	r3, [r3]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <HAL_TIM_IC_CaptureCallback+0x560>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	485c      	ldr	r0, [pc, #368]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x564>)
 8001c84:	00c9      	lsls	r1, r1, #3
 8001c86:	4401      	add	r1, r0
 8001c88:	e9c1 2300 	strd	r2, r3, [r1]

        Gy[i] = g_pitch;
 8001c8c:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <HAL_TIM_IC_CaptureCallback+0x568>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	4858      	ldr	r0, [pc, #352]	; (8001dfc <HAL_TIM_IC_CaptureCallback+0x56c>)
 8001c9c:	00c9      	lsls	r1, r1, #3
 8001c9e:	4401      	add	r1, r0
 8001ca0:	e9c1 2300 	strd	r2, r3, [r1]

        Gz[i] = g_yaw;
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <HAL_TIM_IC_CaptureCallback+0x540>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	4853      	ldr	r0, [pc, #332]	; (8001e00 <HAL_TIM_IC_CaptureCallback+0x570>)
 8001cb4:	00c9      	lsls	r1, r1, #3
 8001cb6:	4401      	add	r1, r0
 8001cb8:	e9c1 2300 	strd	r2, r3, [r1]


        if (i == 4) {
 8001cbc:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	f040 8158 	bne.w	8001f78 <HAL_TIM_IC_CaptureCallback+0x6e8>
            i = -1;
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_TIM_IC_CaptureCallback+0x544>)
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	701a      	strb	r2, [r3, #0]

            MPU6050.smooth_Ax = (int)smooth(Ax, 5);
 8001cce:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001dc8 <HAL_TIM_IC_CaptureCallback+0x538>
 8001cd2:	4842      	ldr	r0, [pc, #264]	; (8001ddc <HAL_TIM_IC_CaptureCallback+0x54c>)
 8001cd4:	f000 fb24 	bl	8002320 <smooth>
 8001cd8:	ec53 2b10 	vmov	r2, r3, d0
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe ff42 	bl	8000b68 <__aeabi_d2iz>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc24 	bl	8000534 <__aeabi_i2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4944      	ldr	r1, [pc, #272]	; (8001e04 <HAL_TIM_IC_CaptureCallback+0x574>)
 8001cf2:	e9c1 2304 	strd	r2, r3, [r1, #16]

            MPU6050.smooth_Ay = (int)smooth(Ay, 5);
 8001cf6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8001dc8 <HAL_TIM_IC_CaptureCallback+0x538>
 8001cfa:	483a      	ldr	r0, [pc, #232]	; (8001de4 <HAL_TIM_IC_CaptureCallback+0x554>)
 8001cfc:	f000 fb10 	bl	8002320 <smooth>
 8001d00:	ec53 2b10 	vmov	r2, r3, d0
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff2e 	bl	8000b68 <__aeabi_d2iz>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc10 	bl	8000534 <__aeabi_i2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	493a      	ldr	r1, [pc, #232]	; (8001e04 <HAL_TIM_IC_CaptureCallback+0x574>)
 8001d1a:	e9c1 2306 	strd	r2, r3, [r1, #24]

            MPU6050.smooth_Az = (int)smooth(Az, 5);
 8001d1e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001dc8 <HAL_TIM_IC_CaptureCallback+0x538>
 8001d22:	4832      	ldr	r0, [pc, #200]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x55c>)
 8001d24:	f000 fafc 	bl	8002320 <smooth>
 8001d28:	ec53 2b10 	vmov	r2, r3, d0
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe ff1a 	bl	8000b68 <__aeabi_d2iz>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fbfc 	bl	8000534 <__aeabi_i2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4930      	ldr	r1, [pc, #192]	; (8001e04 <HAL_TIM_IC_CaptureCallback+0x574>)
 8001d42:	e9c1 2308 	strd	r2, r3, [r1, #32]

            MPU6050.smooth_Gx = (int)smooth(Gx, 5);
 8001d46:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001dc8 <HAL_TIM_IC_CaptureCallback+0x538>
 8001d4a:	482a      	ldr	r0, [pc, #168]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x564>)
 8001d4c:	f000 fae8 	bl	8002320 <smooth>
 8001d50:	ec53 2b10 	vmov	r2, r3, d0
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe ff06 	bl	8000b68 <__aeabi_d2iz>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbe8 	bl	8000534 <__aeabi_i2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4926      	ldr	r1, [pc, #152]	; (8001e04 <HAL_TIM_IC_CaptureCallback+0x574>)
 8001d6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

            MPU6050.smooth_Gy = (int)smooth(Gy, 5);
 8001d6e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8001dc8 <HAL_TIM_IC_CaptureCallback+0x538>
 8001d72:	4822      	ldr	r0, [pc, #136]	; (8001dfc <HAL_TIM_IC_CaptureCallback+0x56c>)
 8001d74:	f000 fad4 	bl	8002320 <smooth>
 8001d78:	ec53 2b10 	vmov	r2, r3, d0
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fef2 	bl	8000b68 <__aeabi_d2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbd4 	bl	8000534 <__aeabi_i2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	491c      	ldr	r1, [pc, #112]	; (8001e04 <HAL_TIM_IC_CaptureCallback+0x574>)
 8001d92:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

            MPU6050.smooth_Gz = (int)smooth(Gz, 5);
 8001d96:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001dc8 <HAL_TIM_IC_CaptureCallback+0x538>
 8001d9a:	4819      	ldr	r0, [pc, #100]	; (8001e00 <HAL_TIM_IC_CaptureCallback+0x570>)
 8001d9c:	f000 fac0 	bl	8002320 <smooth>
 8001da0:	ec53 2b10 	vmov	r2, r3, d0
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fede 	bl	8000b68 <__aeabi_d2iz>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fbc0 	bl	8000534 <__aeabi_i2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4912      	ldr	r1, [pc, #72]	; (8001e04 <HAL_TIM_IC_CaptureCallback+0x574>)
 8001dba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

            for (uint8_t i = 0; i < 5; i++) {
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dc4:	e06b      	b.n	8001e9e <HAL_TIM_IC_CaptureCallback+0x60e>
 8001dc6:	bf00      	nop
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40140000 	.word	0x40140000
 8001dd0:	20000240 	.word	0x20000240
 8001dd4:	20000508 	.word	0x20000508
 8001dd8:	20000220 	.word	0x20000220
 8001ddc:	20000510 	.word	0x20000510
 8001de0:	20000218 	.word	0x20000218
 8001de4:	20000538 	.word	0x20000538
 8001de8:	20000228 	.word	0x20000228
 8001dec:	20000560 	.word	0x20000560
 8001df0:	20000238 	.word	0x20000238
 8001df4:	20000588 	.word	0x20000588
 8001df8:	20000230 	.word	0x20000230
 8001dfc:	200005b0 	.word	0x200005b0
 8001e00:	200005d8 	.word	0x200005d8
 8001e04:	200004c8 	.word	0x200004c8
 8001e08:	a0000000 	.word	0xa0000000
 8001e0c:	3fa99999 	.word	0x3fa99999
                Ax[i] = 0;
 8001e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e14:	4a67      	ldr	r2, [pc, #412]	; (8001fb4 <HAL_TIM_IC_CaptureCallback+0x724>)
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	18d1      	adds	r1, r2, r3
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9c1 2300 	strd	r2, r3, [r1]

                Ay[i] = 0;
 8001e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e2a:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_TIM_IC_CaptureCallback+0x728>)
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	18d1      	adds	r1, r2, r3
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	e9c1 2300 	strd	r2, r3, [r1]

                Az[i] = 0;
 8001e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e40:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x72c>)
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	18d1      	adds	r1, r2, r3
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]

                Gx[i] = 0;
 8001e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e56:	4a5a      	ldr	r2, [pc, #360]	; (8001fc0 <HAL_TIM_IC_CaptureCallback+0x730>)
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	18d1      	adds	r1, r2, r3
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9c1 2300 	strd	r2, r3, [r1]

                Gy[i] = 0;
 8001e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6c:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_TIM_IC_CaptureCallback+0x734>)
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	18d1      	adds	r1, r2, r3
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9c1 2300 	strd	r2, r3, [r1]

                Gz[i] = 0;
 8001e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e82:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x738>)
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	18d1      	adds	r1, r2, r3
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9c1 2300 	strd	r2, r3, [r1]
            for (uint8_t i = 0; i < 5; i++) {
 8001e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d9b4      	bls.n	8001e10 <HAL_TIM_IC_CaptureCallback+0x580>
            }

            if (MPU6050.smooth_Ax != twin_output_ax && MPU6050.smooth_Ay != twin_output_ay && MPU6050.smooth_Az != twin_output_az && MPU6050.smooth_Gx != twin_output_gx && MPU6050.smooth_Gy != twin_output_gy && MPU6050.smooth_Gz != twin_output_gz) {
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x73c>)
 8001ea8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x740>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb51 	bl	8000558 <__aeabi_f2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d157      	bne.n	8001f78 <HAL_TIM_IC_CaptureCallback+0x6e8>
 8001ec8:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x73c>)
 8001eca:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_TIM_IC_CaptureCallback+0x744>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb40 	bl	8000558 <__aeabi_f2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4620      	mov	r0, r4
 8001ede:	4629      	mov	r1, r5
 8001ee0:	f7fe fdfa 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d146      	bne.n	8001f78 <HAL_TIM_IC_CaptureCallback+0x6e8>
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x73c>)
 8001eec:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x748>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb2f 	bl	8000558 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d135      	bne.n	8001f78 <HAL_TIM_IC_CaptureCallback+0x6e8>
 8001f0c:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x73c>)
 8001f0e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_TIM_IC_CaptureCallback+0x74c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb1e 	bl	8000558 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d124      	bne.n	8001f78 <HAL_TIM_IC_CaptureCallback+0x6e8>
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x73c>)
 8001f30:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_TIM_IC_CaptureCallback+0x750>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb0d 	bl	8000558 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe fdc7 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d113      	bne.n	8001f78 <HAL_TIM_IC_CaptureCallback+0x6e8>
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_TIM_IC_CaptureCallback+0x73c>)
 8001f52:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_TIM_IC_CaptureCallback+0x754>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fafc 	bl	8000558 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe fdb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_TIM_IC_CaptureCallback+0x6e8>
                check_data = TRUE;
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x758>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	701a      	strb	r2, [r3, #0]
            }
        }

        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, INT_STATUS, 1, &int_status, 1, i2c_timeout);
 8001f78:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_TIM_IC_CaptureCallback+0x75c>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	2301      	movs	r3, #1
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	f107 030b 	add.w	r3, r7, #11
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	223a      	movs	r2, #58	; 0x3a
 8001f8e:	21d0      	movs	r1, #208	; 0xd0
 8001f90:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <HAL_TIM_IC_CaptureCallback+0x760>)
 8001f92:	f002 fb41 	bl	8004618 <HAL_I2C_Mem_Read>

        i++;
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x764>)
 8001f98:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	b25a      	sxtb	r2, r3
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x764>)
 8001fa6:	701a      	strb	r2, [r3, #0]
    }
}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	ecbd 8b02 	vpop	{d8}
 8001fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb4:	20000510 	.word	0x20000510
 8001fb8:	20000538 	.word	0x20000538
 8001fbc:	20000560 	.word	0x20000560
 8001fc0:	20000588 	.word	0x20000588
 8001fc4:	200005b0 	.word	0x200005b0
 8001fc8:	200005d8 	.word	0x200005d8
 8001fcc:	200004c8 	.word	0x200004c8
 8001fd0:	20000248 	.word	0x20000248
 8001fd4:	2000024c 	.word	0x2000024c
 8001fd8:	20000250 	.word	0x20000250
 8001fdc:	20000254 	.word	0x20000254
 8001fe0:	20000258 	.word	0x20000258
 8001fe4:	2000025c 	.word	0x2000025c
 8001fe8:	20000205 	.word	0x20000205
 8001fec:	20000002 	.word	0x20000002
 8001ff0:	20000260 	.word	0x20000260
 8001ff4:	20000508 	.word	0x20000508

08001ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffc:	b672      	cpsid	i
}
 8001ffe:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002000:	e7fe      	b.n	8002000 <Error_Handler+0x8>
	...

08002004 <read_MPU_ID>:
float g_norm;

//=============================================================================
// Read address MPU from WHO_AM_I
uint8_t read_MPU_ID(I2C_HandleTypeDef *I2Cx)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af04      	add	r7, sp, #16
 800200a:	6078      	str	r0, [r7, #4]
    uint8_t status = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
    uint8_t MPU_ID = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I, 1, &MPU_ID, 1, i2c_timeout);
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <read_MPU_ID+0x68>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	2301      	movs	r3, #1
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	f107 030e 	add.w	r3, r7, #14
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2301      	movs	r3, #1
 8002028:	2275      	movs	r2, #117	; 0x75
 800202a:	21d0      	movs	r1, #208	; 0xd0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f002 faf3 	bl	8004618 <HAL_I2C_Mem_Read>

    if (MPU_ID == 0x68) printf("MPU6050.......OK\r\n");
 8002032:	7bbb      	ldrb	r3, [r7, #14]
 8002034:	2b68      	cmp	r3, #104	; 0x68
 8002036:	d103      	bne.n	8002040 <read_MPU_ID+0x3c>
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <read_MPU_ID+0x6c>)
 800203a:	f008 f9d7 	bl	800a3ec <puts>
 800203e:	e00f      	b.n	8002060 <read_MPU_ID+0x5c>
    else if (MPU_ID == 0x71) {
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	2b71      	cmp	r3, #113	; 0x71
 8002044:	d105      	bne.n	8002052 <read_MPU_ID+0x4e>
        printf("MPU9250.......OK\r\n");
 8002046:	480b      	ldr	r0, [pc, #44]	; (8002074 <read_MPU_ID+0x70>)
 8002048:	f008 f9d0 	bl	800a3ec <puts>
        status = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e006      	b.n	8002060 <read_MPU_ID+0x5c>
    } else {
        printf("MPU.........%x\r\n", MPU_ID);
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	4619      	mov	r1, r3
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <read_MPU_ID+0x74>)
 8002058:	f008 f942 	bl	800a2e0 <iprintf>
        status = 1;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000004 	.word	0x20000004
 8002070:	0800d4d0 	.word	0x0800d4d0
 8002074:	0800d4e4 	.word	0x0800d4e4
 8002078:	0800d4f8 	.word	0x0800d4f8

0800207c <MPU6050_reset_wakeup>:

//=============================================================================
// Reset MPU6050, coming out of sleep mode, synchronization source: PLL with X Gyro reference
void MPU6050_reset_wakeup(I2C_HandleTypeDef *I2Cx)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af04      	add	r7, sp, #16
 8002082:	6078      	str	r0, [r7, #4]
    // reset MPU6050
    Data |= 1 << DEVICE_RESET;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <MPU6050_reset_wakeup+0x70>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <MPU6050_reset_wakeup+0x70>)
 8002090:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <MPU6050_reset_wakeup+0x74>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	2301      	movs	r3, #1
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <MPU6050_reset_wakeup+0x70>)
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2301      	movs	r3, #1
 80020a4:	226b      	movs	r2, #107	; 0x6b
 80020a6:	21d0      	movs	r1, #208	; 0xd0
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f002 f9bb 	bl	8004424 <HAL_I2C_Mem_Write>

    // Delay 100 ms for PLL to get established on x-axis gyro;
    HAL_Delay(150);
 80020ae:	2096      	movs	r0, #150	; 0x96
 80020b0:	f001 fa30 	bl	8003514 <HAL_Delay>

    // Set synchronization source: CLKSEL = 3 - PLL with Z Gyro reference
    Data = 0;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <MPU6050_reset_wakeup+0x70>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    Data = 0x28;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MPU6050_reset_wakeup+0x70>)
 80020bc:	2228      	movs	r2, #40	; 0x28
 80020be:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MPU6050_reset_wakeup+0x74>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2301      	movs	r3, #1
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <MPU6050_reset_wakeup+0x70>)
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	226b      	movs	r2, #107	; 0x6b
 80020d4:	21d0      	movs	r1, #208	; 0xd0
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f002 f9a4 	bl	8004424 <HAL_I2C_Mem_Write>

    // Delay 100 ms for PLL to get established on x-axis gyro;
    HAL_Delay(150);
 80020dc:	2096      	movs	r0, #150	; 0x96
 80020de:	f001 fa19 	bl	8003514 <HAL_Delay>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000600 	.word	0x20000600
 80020f0:	20000004 	.word	0x20000004

080020f4 <MPU6050_init>:

//=============================================================================
// Initializing MPU6050
void MPU6050_init(I2C_HandleTypeDef *I2Cx)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af04      	add	r7, sp, #16
 80020fa:	6078      	str	r0, [r7, #4]
    // Set sample rate
    MPU6050_set_sample_rate(I2Cx);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fa4d 	bl	800259c <MPU6050_set_sample_rate>

    // setting the filter bandwidth to 42 Hz
    i2c_write_bits(I2Cx, MPU6050_ADDR, CONFIG, 3, DLPF_CFG, DLPF);
 8002102:	2301      	movs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	2300      	movs	r3, #0
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2303      	movs	r3, #3
 800210c:	221a      	movs	r2, #26
 800210e:	21d0      	movs	r1, #208	; 0xd0
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe ff23 	bl	8000f5c <i2c_write_bits>

    MPU6050_set_accel_scale(I2Cx);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa00 	bl	800251c <MPU6050_set_accel_scale>

    MPU6050_set_gyro_scale(I2Cx);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa1b 	bl	8002558 <MPU6050_set_gyro_scale>

    // scaling factors calculation
    MPU6050_get_norm(&a_norm, &g_norm);
 8002122:	491d      	ldr	r1, [pc, #116]	; (8002198 <MPU6050_init+0xa4>)
 8002124:	481d      	ldr	r0, [pc, #116]	; (800219c <MPU6050_init+0xa8>)
 8002126:	f000 fa55 	bl	80025d4 <MPU6050_get_norm>

    Data = 0;
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <MPU6050_init+0xac>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
    Data = 0x40;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <MPU6050_init+0xac>)
 8002132:	2240      	movs	r2, #64	; 0x40
 8002134:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_2, 1, &Data, 1, i2c_timeout);
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <MPU6050_init+0xb0>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	2301      	movs	r3, #1
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <MPU6050_init+0xac>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2301      	movs	r3, #1
 8002148:	226c      	movs	r2, #108	; 0x6c
 800214a:	21d0      	movs	r1, #208	; 0xd0
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f002 f969 	bl	8004424 <HAL_I2C_Mem_Write>
    // the INT pin is held high until the interrupt is cleared;
    // interrupt status bits are cleared only by reading INT_STATUS
    // interrupt reset only by reading INT_STATUS

    // interrupts on data availability
    Data = 0;
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MPU6050_init+0xac>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
    Data |= 1 << DATA_RDY_EN;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MPU6050_init+0xac>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MPU6050_init+0xac>)
 8002164:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, INT_ENABLE, 1, &Data, 1, i2c_timeout);
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MPU6050_init+0xb0>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	2301      	movs	r3, #1
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MPU6050_init+0xac>)
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	2238      	movs	r2, #56	; 0x38
 800217a:	21d0      	movs	r1, #208	; 0xd0
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f002 f951 	bl	8004424 <HAL_I2C_Mem_Write>

    HAL_Delay(5);
 8002182:	2005      	movs	r0, #5
 8002184:	f001 f9c6 	bl	8003514 <HAL_Delay>

    printf("MPU init......OK\r\n");
 8002188:	4807      	ldr	r0, [pc, #28]	; (80021a8 <MPU6050_init+0xb4>)
 800218a:	f008 f92f 	bl	800a3ec <puts>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000608 	.word	0x20000608
 800219c:	20000604 	.word	0x20000604
 80021a0:	20000600 	.word	0x20000600
 80021a4:	20000004 	.word	0x20000004
 80021a8:	0800d50c 	.word	0x0800d50c

080021ac <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 6, i2c_timeout);
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MPU6050_Read_Accel+0x68>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	2306      	movs	r3, #6
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2301      	movs	r3, #1
 80021ca:	223b      	movs	r2, #59	; 0x3b
 80021cc:	21d0      	movs	r1, #208	; 0xd0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f002 fa22 	bl	8004618 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80021d4:	7a3b      	ldrb	r3, [r7, #8]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	b21a      	sxth	r2, r3
 80021da:	7a7b      	ldrb	r3, [r7, #9]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	801a      	strh	r2, [r3, #0]

    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80021e6:	7abb      	ldrb	r3, [r7, #10]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	805a      	strh	r2, [r3, #2]

    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80021f8:	7b3b      	ldrb	r3, [r7, #12]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	7b7b      	ldrb	r3, [r7, #13]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	809a      	strh	r2, [r3, #4]
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000004 	.word	0x20000004

08002218 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af04      	add	r7, sp, #16
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H, 1, Rec_Data, 6, i2c_timeout);
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MPU6050_Read_Gyro+0x68>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2306      	movs	r3, #6
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	2243      	movs	r2, #67	; 0x43
 8002238:	21d0      	movs	r1, #208	; 0xd0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f002 f9ec 	bl	8004618 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002240:	7a3b      	ldrb	r3, [r7, #8]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21a      	sxth	r2, r3
 8002246:	7a7b      	ldrb	r3, [r7, #9]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b21a      	sxth	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	80da      	strh	r2, [r3, #6]

    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002252:	7abb      	ldrb	r3, [r7, #10]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	7afb      	ldrb	r3, [r7, #11]
 800225a:	b21b      	sxth	r3, r3
 800225c:	4313      	orrs	r3, r2
 800225e:	b21a      	sxth	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	811a      	strh	r2, [r3, #8]

    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002264:	7b3b      	ldrb	r3, [r7, #12]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b21a      	sxth	r2, r3
 800226a:	7b7b      	ldrb	r3, [r7, #13]
 800226c:	b21b      	sxth	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b21a      	sxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	815a      	strh	r2, [r3, #10]
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000004 	.word	0x20000004

08002284 <MPU6050_Read_Temp>:

void MPU6050_Read_Temp(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af04      	add	r7, sp, #16
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]

    int16_t temp;

    // Read 2 BYTES of data starting from TEMP_OUT_H_REG register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, TEMP_OUT_H, 1, Rec_Data, 2, i2c_timeout);
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MPU6050_Read_Temp+0x60>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	2302      	movs	r3, #2
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2301      	movs	r3, #1
 80022a2:	2241      	movs	r2, #65	; 0x41
 80022a4:	21d0      	movs	r1, #208	; 0xd0
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f002 f9b6 	bl	8004618 <HAL_I2C_Mem_Read>

    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80022ac:	7b3b      	ldrb	r3, [r7, #12]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	7b7b      	ldrb	r3, [r7, #13]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	81fb      	strh	r3, [r7, #14]

    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80022ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c6:	eddf 6a08 	vldr	s13, [pc, #32]	; 80022e8 <MPU6050_Read_Temp+0x64>
 80022ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80022ec <MPU6050_Read_Temp+0x68>
 80022d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000004 	.word	0x20000004
 80022e8:	43aa0000 	.word	0x43aa0000
 80022ec:	42121eb8 	.word	0x42121eb8

080022f0 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    MPU6050_Read_Accel(I2Cx, DataStruct);
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff55 	bl	80021ac <MPU6050_Read_Accel>

    MPU6050_Read_Gyro(I2Cx, DataStruct);
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff87 	bl	8002218 <MPU6050_Read_Gyro>

    MPU6050_Read_Temp(I2Cx, DataStruct);
 800230a:	6839      	ldr	r1, [r7, #0]
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ffb9 	bl	8002284 <MPU6050_Read_Temp>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	0000      	movs	r0, r0
 800231c:	0000      	movs	r0, r0
	...

08002320 <smooth>:

double smooth(double *input, double window)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b090      	sub	sp, #64	; 0x40
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	ed87 0b00 	vstr	d0, [r7]
    int i, j, z, k1, k2, hw;
    double tmp;
    double output;
    if(fmod(window, 2) == 0) window++;
 800232c:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8002510 <smooth+0x1f0>
 8002330:	ed97 0b00 	vldr	d0, [r7]
 8002334:	f00a f90e 	bl	800c554 <fmod>
 8002338:	ec51 0b10 	vmov	r0, r1, d0
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	f7fe fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <smooth+0x44>
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b71      	ldr	r3, [pc, #452]	; (8002518 <smooth+0x1f8>)
 8002354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002358:	f7fd ffa0 	bl	800029c <__adddf3>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	e9c7 2300 	strd	r2, r3, [r7]
    hw = (window - 1) / 2;
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b6b      	ldr	r3, [pc, #428]	; (8002518 <smooth+0x1f8>)
 800236a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800236e:	f7fd ff93 	bl	8000298 <__aeabi_dsub>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002382:	f7fe fa6b 	bl	800085c <__aeabi_ddiv>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fbeb 	bl	8000b68 <__aeabi_d2iz>
 8002392:	4603      	mov	r3, r0
 8002394:	61fb      	str	r3, [r7, #28]
    output = input[0];
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (i = 1; i < window; i++) {
 80023a0:	2301      	movs	r3, #1
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a4:	e075      	b.n	8002492 <smooth+0x172>
        tmp = 0;
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
        if(i < hw) {
 80023b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	da08      	bge.n	80023cc <smooth+0xac>
            k1 = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
            k2 = 2 * i;
 80023be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            z = k2 + 1;
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	3301      	adds	r3, #1
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ca:	e05f      	b.n	800248c <smooth+0x16c>
        } else if((i + hw) > (window - 1)) {
 80023cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8ae 	bl	8000534 <__aeabi_i2d>
 80023d8:	4604      	mov	r4, r0
 80023da:	460d      	mov	r5, r1
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <smooth+0x1f8>)
 80023e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023e6:	f7fd ff57 	bl	8000298 <__aeabi_dsub>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4620      	mov	r0, r4
 80023f0:	4629      	mov	r1, r5
 80023f2:	f7fe fb99 	bl	8000b28 <__aeabi_dcmpgt>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d039      	beq.n	8002470 <smooth+0x150>
            k1 = i - window + i + 1;
 80023fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80023fe:	f7fe f899 	bl	8000534 <__aeabi_i2d>
 8002402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002406:	f7fd ff47 	bl	8000298 <__aeabi_dsub>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002414:	f7fe f88e 	bl	8000534 <__aeabi_i2d>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4620      	mov	r0, r4
 800241e:	4629      	mov	r1, r5
 8002420:	f7fd ff3c 	bl	800029c <__adddf3>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <smooth+0x1f8>)
 8002432:	f7fd ff33 	bl	800029c <__adddf3>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fb93 	bl	8000b68 <__aeabi_d2iz>
 8002442:	4603      	mov	r3, r0
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
            k2 = window - 1;
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b33      	ldr	r3, [pc, #204]	; (8002518 <smooth+0x1f8>)
 800244c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002450:	f7fd ff22 	bl	8000298 <__aeabi_dsub>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fb84 	bl	8000b68 <__aeabi_d2iz>
 8002460:	4603      	mov	r3, r0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
            z = k2 - k1 + 1;
 8002464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	3301      	adds	r3, #1
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
 800246e:	e00d      	b.n	800248c <smooth+0x16c>
        } else {
            k1 = i - hw;
 8002470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
            k2 = i + hw;
 8002478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
            z = window;
 8002480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002484:	f7fe fb70 	bl	8000b68 <__aeabi_d2iz>
 8002488:	4603      	mov	r3, r0
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 1; i < window; i++) {
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	3301      	adds	r3, #1
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002492:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002494:	f7fe f84e 	bl	8000534 <__aeabi_i2d>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a0:	f7fe fb42 	bl	8000b28 <__aeabi_dcmpgt>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f47f af7d 	bne.w	80023a6 <smooth+0x86>
        }
    }

    for (j = k1; j <= k2; j++) {
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b0:	e010      	b.n	80024d4 <smooth+0x1b4>
        tmp = tmp + input[j];
 80024b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024c2:	f7fd feeb 	bl	800029c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (j = k1; j <= k2; j++) {
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	3301      	adds	r3, #1
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	ddea      	ble.n	80024b2 <smooth+0x192>
    }
    return output = tmp / z;
 80024dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024de:	f7fe f829 	bl	8000534 <__aeabi_i2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024ea:	f7fe f9b7 	bl	800085c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80024f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	3740      	adds	r7, #64	; 0x40
 8002508:	46bd      	mov	sp, r7
 800250a:	bdb0      	pop	{r4, r5, r7, pc}
 800250c:	f3af 8000 	nop.w
 8002510:	00000000 	.word	0x00000000
 8002514:	40000000 	.word	0x40000000
 8002518:	3ff00000 	.word	0x3ff00000

0800251c <MPU6050_set_accel_scale>:
//=============================================================================
// Adjusting the accelerometer sensitivity
void MPU6050_set_accel_scale(I2C_HandleTypeDef * I2Cx)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af04      	add	r7, sp, #16
 8002522:	6078      	str	r0, [r7, #4]
    switch (ACCEL_FS) {
    case 2:
        Data = 0;
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <MPU6050_set_accel_scale+0x34>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <MPU6050_set_accel_scale+0x38>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2301      	movs	r3, #1
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MPU6050_set_accel_scale+0x34>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2301      	movs	r3, #1
 800253c:	221c      	movs	r2, #28
 800253e:	21d0      	movs	r1, #208	; 0xd0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 ff6f 	bl	8004424 <HAL_I2C_Mem_Write>
        break;
 8002546:	bf00      	nop
    case 16:
        Data |= 3 << AFS_SEL;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
        break;
    }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000600 	.word	0x20000600
 8002554:	20000004 	.word	0x20000004

08002558 <MPU6050_set_gyro_scale>:

//=============================================================================
// Adjusting the gyroscope sensitivity
void MPU6050_set_gyro_scale(I2C_HandleTypeDef * I2Cx)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af04      	add	r7, sp, #16
 800255e:	6078      	str	r0, [r7, #4]
    case 1000:
        Data |= 2 << GFS_SEL;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
        break;
    case 2000:
        Data |= 3 << GFS_SEL;
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MPU6050_set_gyro_scale+0x3c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f043 0318 	orr.w	r3, r3, #24
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <MPU6050_set_gyro_scale+0x3c>)
 800256c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <MPU6050_set_gyro_scale+0x40>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	2301      	movs	r3, #1
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MPU6050_set_gyro_scale+0x3c>)
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	221c      	movs	r2, #28
 8002582:	21d0      	movs	r1, #208	; 0xd0
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 ff4d 	bl	8004424 <HAL_I2C_Mem_Write>
        break;
 800258a:	bf00      	nop
    }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000600 	.word	0x20000600
 8002598:	20000004 	.word	0x20000004

0800259c <MPU6050_set_sample_rate>:

//=============================================================================
// Setting the sampling rate
void MPU6050_set_sample_rate(I2C_HandleTypeDef * I2Cx)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af04      	add	r7, sp, #16
 80025a2:	6078      	str	r0, [r7, #4]
        else sample_div = 8000u / SAMPLE_RATE - 1u;
        break;
    default:
        if(SAMPLE_RATE > 1000) sample_div = 0;
        else if(SAMPLE_RATE < 4) sample_div = 249;
        else sample_div = 1000u / SAMPLE_RATE - 1u;
 80025a4:	2304      	movs	r3, #4
 80025a6:	73fb      	strb	r3, [r7, #15]
    }
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV, 1, &sample_div, 1, i2c_timeout);
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MPU6050_set_sample_rate+0x34>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	2301      	movs	r3, #1
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	f107 030f 	add.w	r3, r7, #15
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2301      	movs	r3, #1
 80025bc:	2219      	movs	r2, #25
 80025be:	21d0      	movs	r1, #208	; 0xd0
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f001 ff2f 	bl	8004424 <HAL_I2C_Mem_Write>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000004 	.word	0x20000004

080025d4 <MPU6050_get_norm>:

void MPU6050_get_norm(float * p_a_norm, float * p_g_norm)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
    switch (ACCEL_FS) {
    // ACCEL_FS: ±2g; ±4g; ±8g; ±16g
    case 2:
        *p_a_norm = 2.f / 32768.f;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80025e4:	601a      	str	r2, [r3, #0]
        break;
 80025e6:	bf00      	nop
        break;
    case 1000:
        *p_g_norm = 1000.f / 32768.f;
        break;
    case 2000:
        *p_g_norm = 2000.f / 32768.f;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4a04      	ldr	r2, [pc, #16]	; (80025fc <MPU6050_get_norm+0x28>)
 80025ec:	601a      	str	r2, [r3, #0]
        break;
 80025ee:	bf00      	nop
    }
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	3d7a0000 	.word	0x3d7a0000

08002600 <MPU_calibrate>:

//=============================================================================
// Calibrate MPU6050
void MPU_calibrate(I2C_HandleTypeDef * I2Cx)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af04      	add	r7, sp, #16
 8002606:	6078      	str	r0, [r7, #4]
    Data = 0;
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <MPU_calibrate+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
    Data |= 1 << DLPF_CFG;
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <MPU_calibrate+0x4c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MPU_calibrate+0x4c>)
 800261a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, CONFIG, 1, &Data, 1, i2c_timeout);
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MPU_calibrate+0x50>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	2301      	movs	r3, #1
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <MPU_calibrate+0x4c>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	221a      	movs	r2, #26
 8002630:	21d0      	movs	r1, #208	; 0xd0
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f001 fef6 	bl	8004424 <HAL_I2C_Mem_Write>

    HAL_Delay(5);
 8002638:	2005      	movs	r0, #5
 800263a:	f000 ff6b 	bl	8003514 <HAL_Delay>
    printf("MPU calibr....OK\r\n");
 800263e:	4805      	ldr	r0, [pc, #20]	; (8002654 <MPU_calibrate+0x54>)
 8002640:	f007 fed4 	bl	800a3ec <puts>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000600 	.word	0x20000600
 8002650:	20000004 	.word	0x20000004
 8002654:	0800d520 	.word	0x0800d520

08002658 <MPU6050_self_test>:

//=============================================================================
// should return percent deviation from factory trim values,
// +/- 14 or less deviation is a pass
void MPU6050_self_test(I2C_HandleTypeDef * I2Cx)
{
 8002658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800265c:	b0a4      	sub	sp, #144	; 0x90
 800265e:	af04      	add	r7, sp, #16
 8002660:	6078      	str	r0, [r7, #4]
    uint8_t data[12];
    int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8002662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	f107 0320 	add.w	r3, r7, #32
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
    uint8_t Xa_test, Ya_test, Za_test, Xg_test, Yg_test, Zg_test;
    float FT_Xa, FT_Ya, FT_Za, FT_Xg, FT_Yg, FT_Zg;
    float percent_Xa, percent_Ya, percent_Za, percent_Xg, percent_Yg, percent_Zg;

    MPU6050_reset_wakeup(I2Cx);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fcf2 	bl	800207c <MPU6050_reset_wakeup>

    Data = 0;
 8002698:	4b9a      	ldr	r3, [pc, #616]	; (8002904 <MPU6050_self_test+0x2ac>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
    Data |= 2 << DLPF_CFG;
 800269e:	4b99      	ldr	r3, [pc, #612]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b96      	ldr	r3, [pc, #600]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026aa:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, CONFIG, 1, &Data, 1, i2c_timeout);
 80026ac:	4b96      	ldr	r3, [pc, #600]	; (8002908 <MPU6050_self_test+0x2b0>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	4b92      	ldr	r3, [pc, #584]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2301      	movs	r3, #1
 80026be:	221a      	movs	r2, #26
 80026c0:	21d0      	movs	r1, #208	; 0xd0
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f001 feae 	bl	8004424 <HAL_I2C_Mem_Write>
    // configure the accelerometer for self-test
    // When performing accelerometer self test, the full-scale range should be set to ±8g
    Data = 0;
 80026c8:	4b8e      	ldr	r3, [pc, #568]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
    Data |= 2 << AFS_SEL;
 80026ce:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f043 0310 	orr.w	r3, r3, #16
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b8a      	ldr	r3, [pc, #552]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026da:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 80026dc:	4b8a      	ldr	r3, [pc, #552]	; (8002908 <MPU6050_self_test+0x2b0>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	9302      	str	r3, [sp, #8]
 80026e4:	2301      	movs	r3, #1
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	4b86      	ldr	r3, [pc, #536]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2301      	movs	r3, #1
 80026ee:	221c      	movs	r2, #28
 80026f0:	21d0      	movs	r1, #208	; 0xd0
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 fe96 	bl	8004424 <HAL_I2C_Mem_Write>
    // configure the gyroscope for self-test
    // When performing self test for the gyroscope, the full-scale range should be set to ±250dps.
    Data = 0;
 80026f8:	4b82      	ldr	r3, [pc, #520]	; (8002904 <MPU6050_self_test+0x2ac>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 80026fe:	4b82      	ldr	r3, [pc, #520]	; (8002908 <MPU6050_self_test+0x2b0>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	9302      	str	r3, [sp, #8]
 8002706:	2301      	movs	r3, #1
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <MPU6050_self_test+0x2ac>)
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2301      	movs	r3, #1
 8002710:	221b      	movs	r2, #27
 8002712:	21d0      	movs	r1, #208	; 0xd0
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f001 fe85 	bl	8004424 <HAL_I2C_Mem_Write>
    // delay a while to let the device stabilyze
    HAL_Delay(25);
 800271a:	2019      	movs	r0, #25
 800271c:	f000 fefa 	bl	8003514 <HAL_Delay>

    // get average values of gyro and accelerometer output without self-test
    // (1kHz rate, 200 readings)
    for(uint8_t i = 0; i < 200; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002726:	e07c      	b.n	8002822 <MPU6050_self_test+0x1ca>
        Data = 0;
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <MPU6050_self_test+0x2ac>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, INT_STATUS, 1, &Data, 1, i2c_timeout);
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <MPU6050_self_test+0x2b0>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	2301      	movs	r3, #1
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <MPU6050_self_test+0x2ac>)
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	223a      	movs	r2, #58	; 0x3a
 8002742:	21d0      	movs	r1, #208	; 0xd0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f001 ff67 	bl	8004618 <HAL_I2C_Mem_Read>
        if((Data & 0x01) == 0);
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H, 1, data, 6, i2c_timeout);
 800274a:	4b6f      	ldr	r3, [pc, #444]	; (8002908 <MPU6050_self_test+0x2b0>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	9302      	str	r3, [sp, #8]
 8002752:	2306      	movs	r3, #6
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2301      	movs	r3, #1
 800275e:	223b      	movs	r2, #59	; 0x3b
 8002760:	21d0      	movs	r1, #208	; 0xd0
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f001 ff58 	bl	8004618 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H, 1, data + 6, 6, i2c_timeout);
 8002768:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800276c:	3306      	adds	r3, #6
 800276e:	4a66      	ldr	r2, [pc, #408]	; (8002908 <MPU6050_self_test+0x2b0>)
 8002770:	8812      	ldrh	r2, [r2, #0]
 8002772:	b292      	uxth	r2, r2
 8002774:	9202      	str	r2, [sp, #8]
 8002776:	2206      	movs	r2, #6
 8002778:	9201      	str	r2, [sp, #4]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2301      	movs	r3, #1
 800277e:	2243      	movs	r2, #67	; 0x43
 8002780:	21d0      	movs	r1, #208	; 0xd0
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f001 ff48 	bl	8004618 <HAL_I2C_Mem_Read>
        aAvg[0] += (int16_t)(data[0] << 8 | data[1]);
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800278e:	0212      	lsls	r2, r2, #8
 8002790:	b211      	sxth	r1, r2
 8002792:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8002796:	b212      	sxth	r2, r2
 8002798:	430a      	orrs	r2, r1
 800279a:	b212      	sxth	r2, r2
 800279c:	4413      	add	r3, r2
 800279e:	623b      	str	r3, [r7, #32]
        aAvg[1] += (int16_t)(data[2] << 8 | data[3]);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80027a6:	0212      	lsls	r2, r2, #8
 80027a8:	b211      	sxth	r1, r2
 80027aa:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80027ae:	b212      	sxth	r2, r2
 80027b0:	430a      	orrs	r2, r1
 80027b2:	b212      	sxth	r2, r2
 80027b4:	4413      	add	r3, r2
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
        aAvg[2] += (int16_t)(data[4] << 8 | data[5]);
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80027be:	0212      	lsls	r2, r2, #8
 80027c0:	b211      	sxth	r1, r2
 80027c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027c6:	b212      	sxth	r2, r2
 80027c8:	430a      	orrs	r2, r1
 80027ca:	b212      	sxth	r2, r2
 80027cc:	4413      	add	r3, r2
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
        gAvg[0] += (int16_t)(data[6] << 8 | data[7]);
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80027d6:	0212      	lsls	r2, r2, #8
 80027d8:	b211      	sxth	r1, r2
 80027da:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80027de:	b212      	sxth	r2, r2
 80027e0:	430a      	orrs	r2, r1
 80027e2:	b212      	sxth	r2, r2
 80027e4:	4413      	add	r3, r2
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        gAvg[1] += (int16_t)(data[8] << 8 | data[9]);
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80027ee:	0212      	lsls	r2, r2, #8
 80027f0:	b211      	sxth	r1, r2
 80027f2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80027f6:	b212      	sxth	r2, r2
 80027f8:	430a      	orrs	r2, r1
 80027fa:	b212      	sxth	r2, r2
 80027fc:	4413      	add	r3, r2
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
        gAvg[2] += (int16_t)(data[10] << 8 | data[11]);
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8002806:	0212      	lsls	r2, r2, #8
 8002808:	b211      	sxth	r1, r2
 800280a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800280e:	b212      	sxth	r2, r2
 8002810:	430a      	orrs	r2, r1
 8002812:	b212      	sxth	r2, r2
 8002814:	4413      	add	r3, r2
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
    for(uint8_t i = 0; i < 200; i++) {
 8002818:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800281c:	3301      	adds	r3, #1
 800281e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002822:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002826:	2bc7      	cmp	r3, #199	; 0xc7
 8002828:	f67f af7e 	bls.w	8002728 <MPU6050_self_test+0xd0>
    }
    for (uint8_t i = 0; i < 2; i++) {
 800282c:	2300      	movs	r3, #0
 800282e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002832:	e02c      	b.n	800288e <MPU6050_self_test+0x236>
        // Get average of 200 values and store as average current readings
        aAvg[i] /= 200;
 8002834:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	3380      	adds	r3, #128	; 0x80
 800283c:	443b      	add	r3, r7
 800283e:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8002842:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 8002846:	4a31      	ldr	r2, [pc, #196]	; (800290c <MPU6050_self_test+0x2b4>)
 8002848:	fb82 0203 	smull	r0, r2, r2, r3
 800284c:	1192      	asrs	r2, r2, #6
 800284e:	17db      	asrs	r3, r3, #31
 8002850:	1ad2      	subs	r2, r2, r3
 8002852:	008b      	lsls	r3, r1, #2
 8002854:	3380      	adds	r3, #128	; 0x80
 8002856:	443b      	add	r3, r7
 8002858:	f843 2c60 	str.w	r2, [r3, #-96]
        gAvg[i] /= 200;
 800285c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	3380      	adds	r3, #128	; 0x80
 8002864:	443b      	add	r3, r7
 8002866:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800286a:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 800286e:	4a27      	ldr	r2, [pc, #156]	; (800290c <MPU6050_self_test+0x2b4>)
 8002870:	fb82 0203 	smull	r0, r2, r2, r3
 8002874:	1192      	asrs	r2, r2, #6
 8002876:	17db      	asrs	r3, r3, #31
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	008b      	lsls	r3, r1, #2
 800287c:	3380      	adds	r3, #128	; 0x80
 800287e:	443b      	add	r3, r7
 8002880:	f843 2c54 	str.w	r2, [r3, #-84]
    for (uint8_t i = 0; i < 2; i++) {
 8002884:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002888:	3301      	adds	r3, #1
 800288a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800288e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002892:	2b01      	cmp	r3, #1
 8002894:	d9ce      	bls.n	8002834 <MPU6050_self_test+0x1dc>
    }

    // configure the accelerometer for self-test
    // When performing accelerometer self test, the full-scale range should be set to ±8g
    Data = 0;
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MPU6050_self_test+0x2ac>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
    Data |= 1 << XA_ST | 1 << YA_ST | 1 << ZA_ST | 2 << AFS_SEL;
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <MPU6050_self_test+0x2ac>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	f063 030f 	orn	r3, r3, #15
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MPU6050_self_test+0x2ac>)
 80028a8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MPU6050_self_test+0x2b0>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <MPU6050_self_test+0x2ac>)
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	221c      	movs	r2, #28
 80028be:	21d0      	movs	r1, #208	; 0xd0
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f001 fdaf 	bl	8004424 <HAL_I2C_Mem_Write>
    // configure the gyroscope for self-test
    // When performing self test for the gyroscope, the full-scale range should be set to ±250dps.
    Data = 0;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MPU6050_self_test+0x2ac>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
    Data |= 1 << XG_ST | 1 << YG_ST | 1 << ZG_ST;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MPU6050_self_test+0x2ac>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f063 031f 	orn	r3, r3, #31
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MPU6050_self_test+0x2ac>)
 80028d8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <MPU6050_self_test+0x2b0>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	9302      	str	r3, [sp, #8]
 80028e2:	2301      	movs	r3, #1
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MPU6050_self_test+0x2ac>)
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	221b      	movs	r2, #27
 80028ee:	21d0      	movs	r1, #208	; 0xd0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f001 fd97 	bl	8004424 <HAL_I2C_Mem_Write>
    // delay a while to let the device stabilyze
    HAL_Delay(25);
 80028f6:	2019      	movs	r0, #25
 80028f8:	f000 fe0c 	bl	8003514 <HAL_Delay>

    // get average values of gyro and accelerometer self-test output
    // (1kHz rate, 200 readings)
    for(uint8_t i = 0; i < 200; i++) {
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002902:	e082      	b.n	8002a0a <MPU6050_self_test+0x3b2>
 8002904:	20000600 	.word	0x20000600
 8002908:	20000004 	.word	0x20000004
 800290c:	51eb851f 	.word	0x51eb851f
        Data = 0;
 8002910:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <MPU6050_self_test+0x3c4>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8002916:	4b42      	ldr	r3, [pc, #264]	; (8002a20 <MPU6050_self_test+0x3c8>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	9302      	str	r3, [sp, #8]
 800291e:	2301      	movs	r3, #1
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <MPU6050_self_test+0x3c4>)
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2301      	movs	r3, #1
 8002928:	223a      	movs	r2, #58	; 0x3a
 800292a:	21d0      	movs	r1, #208	; 0xd0
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f001 fe73 	bl	8004618 <HAL_I2C_Mem_Read>
        if((Data & 0x01) == 0);
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H, 1, data, 6, i2c_timeout);
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <MPU6050_self_test+0x3c8>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	2306      	movs	r3, #6
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2301      	movs	r3, #1
 8002946:	223b      	movs	r2, #59	; 0x3b
 8002948:	21d0      	movs	r1, #208	; 0xd0
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f001 fe64 	bl	8004618 <HAL_I2C_Mem_Read>
        HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H, 1, data + 6, 6, i2c_timeout);
 8002950:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002954:	3306      	adds	r3, #6
 8002956:	4a32      	ldr	r2, [pc, #200]	; (8002a20 <MPU6050_self_test+0x3c8>)
 8002958:	8812      	ldrh	r2, [r2, #0]
 800295a:	b292      	uxth	r2, r2
 800295c:	9202      	str	r2, [sp, #8]
 800295e:	2206      	movs	r2, #6
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2301      	movs	r3, #1
 8002966:	2243      	movs	r2, #67	; 0x43
 8002968:	21d0      	movs	r1, #208	; 0xd0
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f001 fe54 	bl	8004618 <HAL_I2C_Mem_Read>
        aSTAvg[0] += (int16_t)(data[0] << 8 | data[1]);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002976:	0212      	lsls	r2, r2, #8
 8002978:	b211      	sxth	r1, r2
 800297a:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800297e:	b212      	sxth	r2, r2
 8002980:	430a      	orrs	r2, r1
 8002982:	b212      	sxth	r2, r2
 8002984:	4413      	add	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
        aSTAvg[1] += (int16_t)(data[2] << 8 | data[3]);
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800298e:	0212      	lsls	r2, r2, #8
 8002990:	b211      	sxth	r1, r2
 8002992:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002996:	b212      	sxth	r2, r2
 8002998:	430a      	orrs	r2, r1
 800299a:	b212      	sxth	r2, r2
 800299c:	4413      	add	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        aSTAvg[2] += (int16_t)(data[4] << 8 | data[5]);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80029a6:	0212      	lsls	r2, r2, #8
 80029a8:	b211      	sxth	r1, r2
 80029aa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80029ae:	b212      	sxth	r2, r2
 80029b0:	430a      	orrs	r2, r1
 80029b2:	b212      	sxth	r2, r2
 80029b4:	4413      	add	r3, r2
 80029b6:	61fb      	str	r3, [r7, #28]
        gSTAvg[0] += (int16_t)(data[6] << 8 | data[7]);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80029be:	0212      	lsls	r2, r2, #8
 80029c0:	b211      	sxth	r1, r2
 80029c2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80029c6:	b212      	sxth	r2, r2
 80029c8:	430a      	orrs	r2, r1
 80029ca:	b212      	sxth	r2, r2
 80029cc:	4413      	add	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
        gSTAvg[1] += (int16_t)(data[8] << 8 | data[9]);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80029d6:	0212      	lsls	r2, r2, #8
 80029d8:	b211      	sxth	r1, r2
 80029da:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80029de:	b212      	sxth	r2, r2
 80029e0:	430a      	orrs	r2, r1
 80029e2:	b212      	sxth	r2, r2
 80029e4:	4413      	add	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
        gSTAvg[2] += (int16_t)(data[10] << 8 | data[11]);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80029ee:	0212      	lsls	r2, r2, #8
 80029f0:	b211      	sxth	r1, r2
 80029f2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80029f6:	b212      	sxth	r2, r2
 80029f8:	430a      	orrs	r2, r1
 80029fa:	b212      	sxth	r2, r2
 80029fc:	4413      	add	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
    for(uint8_t i = 0; i < 200; i++) {
 8002a00:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a04:	3301      	adds	r3, #1
 8002a06:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002a0a:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a0e:	2bc7      	cmp	r3, #199	; 0xc7
 8002a10:	f67f af7e 	bls.w	8002910 <MPU6050_self_test+0x2b8>
    }
    for (uint8_t i = 0; i < 2; i++) {
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8002a1a:	e030      	b.n	8002a7e <MPU6050_self_test+0x426>
 8002a1c:	20000600 	.word	0x20000600
 8002a20:	20000004 	.word	0x20000004
        // Get average of 200 values and store as average current readings
        aSTAvg[i] /= 200L;
 8002a24:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3380      	adds	r3, #128	; 0x80
 8002a2c:	443b      	add	r3, r7
 8002a2e:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8002a32:	f897 107c 	ldrb.w	r1, [r7, #124]	; 0x7c
 8002a36:	4ae4      	ldr	r2, [pc, #912]	; (8002dc8 <MPU6050_self_test+0x770>)
 8002a38:	fb82 0203 	smull	r0, r2, r2, r3
 8002a3c:	1192      	asrs	r2, r2, #6
 8002a3e:	17db      	asrs	r3, r3, #31
 8002a40:	1ad2      	subs	r2, r2, r3
 8002a42:	008b      	lsls	r3, r1, #2
 8002a44:	3380      	adds	r3, #128	; 0x80
 8002a46:	443b      	add	r3, r7
 8002a48:	f843 2c6c 	str.w	r2, [r3, #-108]
        gSTAvg[i] /= 200L;
 8002a4c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	3380      	adds	r3, #128	; 0x80
 8002a54:	443b      	add	r3, r7
 8002a56:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002a5a:	f897 107c 	ldrb.w	r1, [r7, #124]	; 0x7c
 8002a5e:	4ada      	ldr	r2, [pc, #872]	; (8002dc8 <MPU6050_self_test+0x770>)
 8002a60:	fb82 0203 	smull	r0, r2, r2, r3
 8002a64:	1192      	asrs	r2, r2, #6
 8002a66:	17db      	asrs	r3, r3, #31
 8002a68:	1ad2      	subs	r2, r2, r3
 8002a6a:	008b      	lsls	r3, r1, #2
 8002a6c:	3380      	adds	r3, #128	; 0x80
 8002a6e:	443b      	add	r3, r7
 8002a70:	f843 2c78 	str.w	r2, [r3, #-120]
    for (uint8_t i = 0; i < 2; i++) {
 8002a74:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8002a7e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d9ce      	bls.n	8002a24 <MPU6050_self_test+0x3cc>

    // data[0] - X-axis self-test results
    // data[1] - Y-axis self-test results
    // data[2] - Z-axis self-test results
    // data[3] - mixed-axis self-test results
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, SELF_TEST_X, 1, data, 4, i2c_timeout);
 8002a86:	4bd1      	ldr	r3, [pc, #836]	; (8002dcc <MPU6050_self_test+0x774>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	2304      	movs	r3, #4
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	220d      	movs	r2, #13
 8002a9c:	21d0      	movs	r1, #208	; 0xd0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f001 fdba 	bl	8004618 <HAL_I2C_Mem_Read>

    // extract the acceleration test results first
    Xa_test = (data[0] & 0xE0) >> 3 | (data[3] & 0x30) >> 4;				// XA_TEST result is a five-bit unsigned integer
 8002aa4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002aa8:	10db      	asrs	r3, r3, #3
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	f003 031c 	and.w	r3, r3, #28
 8002ab0:	b25a      	sxtb	r2, r3
 8002ab2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ab6:	111b      	asrs	r3, r3, #4
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    Ya_test = (data[1] & 0xE0) >> 3 | (data[3] & 0x0C) >> 2;				// YA_TEST result is a five-bit unsigned integer
 8002ac8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002acc:	10db      	asrs	r3, r3, #3
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	f003 031c 	and.w	r3, r3, #28
 8002ad4:	b25a      	sxtb	r2, r3
 8002ad6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ada:	109b      	asrs	r3, r3, #2
 8002adc:	b25b      	sxtb	r3, r3
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    Za_test = (data[2] & 0xE0) >> 3 | (data[3] & 0x03) >> 0;				// ZA_TEST result is a five-bit unsigned integer
 8002aec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002af0:	10db      	asrs	r3, r3, #3
 8002af2:	b25b      	sxtb	r3, r3
 8002af4:	f003 031c 	and.w	r3, r3, #28
 8002af8:	b25a      	sxtb	r2, r3
 8002afa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

    // extract the gyration test results first
    Xg_test = data[0] & 0x1F;										// XG_TEST result is a five-bit unsigned integer
 8002b0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
    Yg_test = data[1] & 0x1F;										// YG_TEST result is a five-bit unsigned integer
 8002b1a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    Zg_test = data[2] & 0x1F;										// ZG_TEST result is a five-bit unsigned integer
 8002b26:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    // obtaining the accelerometer and gyroscope Factory Trim (FT) value
    FT_Xa = 4096.f * 0.34f * powf((0.92f / 0.34f), ((Xa_test - 1.f) / 30.f));	// FT[Xa] factory trim calculation
 8002b32:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b46:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002b4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b4e:	eef0 0a47 	vmov.f32	s1, s14
 8002b52:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8002dd0 <MPU6050_self_test+0x778>
 8002b56:	f009 fd59 	bl	800c60c <powf>
 8002b5a:	eef0 7a40 	vmov.f32	s15, s0
 8002b5e:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002dd4 <MPU6050_self_test+0x77c>
 8002b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b66:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    FT_Ya = 4096.f * 0.34f * powf((0.92f / 0.34f), ((Ya_test - 1.f) / 30.f));	// FT[Ya] factory trim calculation
 8002b6a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b7e:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002b82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b86:	eef0 0a47 	vmov.f32	s1, s14
 8002b8a:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8002dd0 <MPU6050_self_test+0x778>
 8002b8e:	f009 fd3d 	bl	800c60c <powf>
 8002b92:	eef0 7a40 	vmov.f32	s15, s0
 8002b96:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002dd4 <MPU6050_self_test+0x77c>
 8002b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    FT_Za = 4096.f * 0.34f * powf((0.92f / 0.34f), ((Za_test - 1.f) / 30.f));	// FT[Za] factory trim calculation
 8002ba2:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bb6:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002bba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bbe:	eef0 0a47 	vmov.f32	s1, s14
 8002bc2:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8002dd0 <MPU6050_self_test+0x778>
 8002bc6:	f009 fd21 	bl	800c60c <powf>
 8002bca:	eef0 7a40 	vmov.f32	s15, s0
 8002bce:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002dd4 <MPU6050_self_test+0x77c>
 8002bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    FT_Xg =  25.0f * 131.f * powf(1.046f, (Xg_test - 1.f));						// FT[Xg] factory trim calculation
 8002bda:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bee:	eef0 0a67 	vmov.f32	s1, s15
 8002bf2:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8002dd8 <MPU6050_self_test+0x780>
 8002bf6:	f009 fd09 	bl	800c60c <powf>
 8002bfa:	eef0 7a40 	vmov.f32	s15, s0
 8002bfe:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002ddc <MPU6050_self_test+0x784>
 8002c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c06:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    FT_Yg = -25.0f * 131.f * powf(1.046f, (Yg_test - 1.f));						// FT[Yg] factory trim calculation
 8002c0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c1e:	eef0 0a67 	vmov.f32	s1, s15
 8002c22:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8002dd8 <MPU6050_self_test+0x780>
 8002c26:	f009 fcf1 	bl	800c60c <powf>
 8002c2a:	eef0 7a40 	vmov.f32	s15, s0
 8002c2e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002de0 <MPU6050_self_test+0x788>
 8002c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c36:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    FT_Zg =  25.0f * 131.f * powf(1.046f, (Zg_test - 1.f));						// FT[Zg] factory trim calculation
 8002c3a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c4e:	eef0 0a67 	vmov.f32	s1, s15
 8002c52:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002dd8 <MPU6050_self_test+0x780>
 8002c56:	f009 fcd9 	bl	800c60c <powf>
 8002c5a:	eef0 7a40 	vmov.f32	s15, s0
 8002c5e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002ddc <MPU6050_self_test+0x784>
 8002c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c66:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    // report results as a ratio of (STR-FT)/FT;
    // the change from Factory Trim of the Self-Test Response
    // to get to percent, must multiply by 100 and subtract result from 100
    percent_Xa = 100.f * (aSTAvg[0] - aAvg[0] - FT_Xa) / FT_Xa;
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c78:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c80:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002de4 <MPU6050_self_test+0x78c>
 8002c84:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c88:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c90:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    percent_Ya = 100.f * (aSTAvg[1] - aAvg[1] - FT_Ya) / FT_Ya;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002caa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002de4 <MPU6050_self_test+0x78c>
 8002cae:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cb2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cba:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    percent_Za = 100.f * (aSTAvg[2] - aAvg[2] - FT_Za) / FT_Za;
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ccc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002de4 <MPU6050_self_test+0x78c>
 8002cd8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002cdc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    percent_Xg = 100.f * (gSTAvg[0] - gAvg[0] - FT_Xg) / FT_Xg;
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002de4 <MPU6050_self_test+0x78c>
 8002d02:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d06:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    percent_Yg = 100.f * (gSTAvg[1] - gAvg[1] - FT_Yg) / FT_Yg;
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d28:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002de4 <MPU6050_self_test+0x78c>
 8002d2c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d30:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d38:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    percent_Zg = 100.f * (gSTAvg[2] - gAvg[2] - FT_Zg) / FT_Zg;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d52:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002de4 <MPU6050_self_test+0x78c>
 8002d56:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002d5a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d62:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    HAL_Delay(5);
 8002d66:	2005      	movs	r0, #5
 8002d68:	f000 fbd4 	bl	8003514 <HAL_Delay>

    printf("%4.2f %4.2f %4.2f\r\n", percent_Xa, percent_Ya, percent_Za);
 8002d6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002d6e:	f7fd fbf3 	bl	8000558 <__aeabi_f2d>
 8002d72:	4680      	mov	r8, r0
 8002d74:	4689      	mov	r9, r1
 8002d76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002d78:	f7fd fbee 	bl	8000558 <__aeabi_f2d>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	460d      	mov	r5, r1
 8002d80:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002d82:	f7fd fbe9 	bl	8000558 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d8e:	e9cd 4500 	strd	r4, r5, [sp]
 8002d92:	4642      	mov	r2, r8
 8002d94:	464b      	mov	r3, r9
 8002d96:	4814      	ldr	r0, [pc, #80]	; (8002de8 <MPU6050_self_test+0x790>)
 8002d98:	f007 faa2 	bl	800a2e0 <iprintf>

    HAL_Delay(5);
 8002d9c:	2005      	movs	r0, #5
 8002d9e:	f000 fbb9 	bl	8003514 <HAL_Delay>

    printf("%4.2f %4.2f %4.2f\r\n", percent_Xg, percent_Yg, percent_Zg);
 8002da2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002da4:	f7fd fbd8 	bl	8000558 <__aeabi_f2d>
 8002da8:	4680      	mov	r8, r0
 8002daa:	4689      	mov	r9, r1
 8002dac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002dae:	f7fd fbd3 	bl	8000558 <__aeabi_f2d>
 8002db2:	4604      	mov	r4, r0
 8002db4:	460d      	mov	r5, r1
 8002db6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002db8:	f7fd fbce 	bl	8000558 <__aeabi_f2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dc4:	e012      	b.n	8002dec <MPU6050_self_test+0x794>
 8002dc6:	bf00      	nop
 8002dc8:	51eb851f 	.word	0x51eb851f
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	402d2d2d 	.word	0x402d2d2d
 8002dd4:	44ae147b 	.word	0x44ae147b
 8002dd8:	3f85e354 	.word	0x3f85e354
 8002ddc:	454cb000 	.word	0x454cb000
 8002de0:	c54cb000 	.word	0xc54cb000
 8002de4:	42c80000 	.word	0x42c80000
 8002de8:	0800d534 	.word	0x0800d534
 8002dec:	e9cd 4500 	strd	r4, r5, [sp]
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	4803      	ldr	r0, [pc, #12]	; (8002e04 <MPU6050_self_test+0x7ac>)
 8002df6:	f007 fa73 	bl	800a2e0 <iprintf>
}
 8002dfa:	bf00      	nop
 8002dfc:	3780      	adds	r7, #128	; 0x80
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e04:	0800d534 	.word	0x0800d534

08002e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_MspInit+0x4c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <HAL_MspInit+0x4c>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_MspInit+0x4c>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_MspInit+0x4c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <HAL_MspInit+0x4c>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_MspInit+0x4c>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800

08002e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_I2C_MspInit+0x84>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d12c      	bne.n	8002ed4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_I2C_MspInit+0x88>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_I2C_MspInit+0x88>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_I2C_MspInit+0x88>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9c:	2312      	movs	r3, #18
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <HAL_I2C_MspInit+0x8c>)
 8002eb4:	f000 ffee 	bl	8003e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_I2C_MspInit+0x88>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <HAL_I2C_MspInit+0x88>)
 8002ec2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_I2C_MspInit+0x88>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ed4:	bf00      	nop
 8002ed6:	3728      	adds	r7, #40	; 0x28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40005400 	.word	0x40005400
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40020400 	.word	0x40020400

08002ee8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_RTC_MspInit+0x50>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d111      	bne.n	8002f2e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f12:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f14:	f107 030c 	add.w	r3, r7, #12
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 fa71 	bl	8007400 <HAL_RCCEx_PeriphCLKConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002f24:	f7ff f868 	bl	8001ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <HAL_RTC_MspInit+0x54>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f2e:	bf00      	nop
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40002800 	.word	0x40002800
 8002f3c:	42470e3c 	.word	0x42470e3c

08002f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a45      	ldr	r2, [pc, #276]	; (8003074 <HAL_TIM_Base_MspInit+0x134>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	4b44      	ldr	r3, [pc, #272]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	4a43      	ldr	r2, [pc, #268]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6453      	str	r3, [r2, #68]	; 0x44
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f7e:	e075      	b.n	800306c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d15d      	bne.n	8003046 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a39      	ldr	r2, [pc, #228]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b33      	ldr	r3, [pc, #204]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a32      	ldr	r2, [pc, #200]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4827      	ldr	r0, [pc, #156]	; (800307c <HAL_TIM_Base_MspInit+0x13c>)
 8002fde:	f000 ff59 	bl	8003e94 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_TIM_Base_MspInit+0x144>)
 8002fe6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8002fea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002fee:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff6:	4b22      	ldr	r3, [pc, #136]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8002ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003002:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8003006:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800300a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 800300e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003012:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8003016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 800301e:	2200      	movs	r2, #0
 8003020:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8003024:	2200      	movs	r2, #0
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003028:	4815      	ldr	r0, [pc, #84]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 800302a:	f000 fba9 	bl	8003780 <HAL_DMA_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 8003034:	f7fe ffe0 	bl	8001ff8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a11      	ldr	r2, [pc, #68]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
 800303e:	4a10      	ldr	r2, [pc, #64]	; (8003080 <HAL_TIM_Base_MspInit+0x140>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003044:	e012      	b.n	800306c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM3)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_TIM_Base_MspInit+0x148>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d10d      	bne.n	800306c <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_TIM_Base_MspInit+0x138>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	bf00      	nop
 800306e:	3730      	adds	r7, #48	; 0x30
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40010000 	.word	0x40010000
 8003078:	40023800 	.word	0x40023800
 800307c:	40020000 	.word	0x40020000
 8003080:	200003ac 	.word	0x200003ac
 8003084:	40026088 	.word	0x40026088
 8003088:	40000400 	.word	0x40000400

0800308c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a31      	ldr	r2, [pc, #196]	; (8003170 <HAL_UART_MspInit+0xe4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d15b      	bne.n	8003166 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_UART_MspInit+0xe8>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <HAL_UART_MspInit+0xe8>)
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	6453      	str	r3, [r2, #68]	; 0x44
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_UART_MspInit+0xe8>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_UART_MspInit+0xe8>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_UART_MspInit+0xe8>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_UART_MspInit+0xe8>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	2303      	movs	r3, #3
 80030f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030f8:	2307      	movs	r3, #7
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4619      	mov	r1, r3
 8003102:	481d      	ldr	r0, [pc, #116]	; (8003178 <HAL_UART_MspInit+0xec>)
 8003104:	f000 fec6 	bl	8003e94 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_UART_MspInit+0xf0>)
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_UART_MspInit+0xf4>)
 800310c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003114:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_UART_MspInit+0xf0>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003128:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_UART_MspInit+0xf0>)
 800312c:	2200      	movs	r2, #0
 800312e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800314a:	480c      	ldr	r0, [pc, #48]	; (800317c <HAL_UART_MspInit+0xf0>)
 800314c:	f000 fb18 	bl	8003780 <HAL_DMA_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003156:	f7fe ff4f 	bl	8001ff8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a07      	ldr	r2, [pc, #28]	; (800317c <HAL_UART_MspInit+0xf0>)
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
 8003160:	4a06      	ldr	r2, [pc, #24]	; (800317c <HAL_UART_MspInit+0xf0>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40011000 	.word	0x40011000
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000
 800317c:	20000450 	.word	0x20000450
 8003180:	400264b8 	.word	0x400264b8

08003184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003188:	e7fe      	b.n	8003188 <NMI_Handler+0x4>

0800318a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800318e:	e7fe      	b.n	800318e <HardFault_Handler+0x4>

08003190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003194:	e7fe      	b.n	8003194 <MemManage_Handler+0x4>

08003196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800319a:	e7fe      	b.n	800319a <BusFault_Handler+0x4>

0800319c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031a0:	e7fe      	b.n	80031a0 <UsageFault_Handler+0x4>

080031a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d0:	f000 f980 	bl	80034d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <DMA1_Stream5_IRQHandler+0x10>)
 80031de:	f000 fc0f 	bl	8003a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200003ac 	.word	0x200003ac

080031ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031f2:	f004 ff17 	bl	8008024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200002d4 	.word	0x200002d4

08003200 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <TIM2_IRQHandler+0x10>)
 8003206:	f004 ff0d 	bl	8008024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000031c 	.word	0x2000031c

08003214 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <I2C1_EV_IRQHandler+0x10>)
 800321a:	f001 fc23 	bl	8004a64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000260 	.word	0x20000260

08003228 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <I2C1_ER_IRQHandler+0x10>)
 800322e:	f001 fd8a 	bl	8004d46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000260 	.word	0x20000260

0800323c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <USART1_IRQHandler+0x10>)
 8003242:	f005 fceb 	bl	8008c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000040c 	.word	0x2000040c

08003250 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA2_Stream7_IRQHandler+0x10>)
 8003256:	f000 fbd3 	bl	8003a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000450 	.word	0x20000450

08003264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
	return 1;
 8003268:	2301      	movs	r3, #1
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <_kill>:

int _kill(int pid, int sig)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800327e:	f006 fb93 	bl	80099a8 <__errno>
 8003282:	4603      	mov	r3, r0
 8003284:	2216      	movs	r2, #22
 8003286:	601a      	str	r2, [r3, #0]
	return -1;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_exit>:

void _exit (int status)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800329c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ffe7 	bl	8003274 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032a6:	e7fe      	b.n	80032a6 <_exit+0x12>

080032a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e00a      	b.n	80032d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032ba:	f3af 8000 	nop.w
 80032be:	4601      	mov	r1, r0
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	60ba      	str	r2, [r7, #8]
 80032c6:	b2ca      	uxtb	r2, r1
 80032c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbf0      	blt.n	80032ba <_read+0x12>
	}

return len;
 80032d8:	687b      	ldr	r3, [r7, #4]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
	return -1;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330a:	605a      	str	r2, [r3, #4]
	return 0;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_isatty>:

int _isatty(int file)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
	return 1;
 8003322:	2301      	movs	r3, #1
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	return 0;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <_sbrk+0x5c>)
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <_sbrk+0x60>)
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <_sbrk+0x64>)
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <_sbrk+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d207      	bcs.n	800338c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800337c:	f006 fb14 	bl	80099a8 <__errno>
 8003380:	4603      	mov	r3, r0
 8003382:	220c      	movs	r2, #12
 8003384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800338a:	e009      	b.n	80033a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <_sbrk+0x64>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <_sbrk+0x64>)
 800339c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20018000 	.word	0x20018000
 80033ac:	00000400 	.word	0x00000400
 80033b0:	2000060c 	.word	0x2000060c
 80033b4:	20000628 	.word	0x20000628

080033b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <SystemInit+0x20>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <SystemInit+0x20>)
 80033c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003414 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033e2:	490e      	ldr	r1, [pc, #56]	; (800341c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033e4:	4a0e      	ldr	r2, [pc, #56]	; (8003420 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e8:	e002      	b.n	80033f0 <LoopCopyDataInit>

080033ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ee:	3304      	adds	r3, #4

080033f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f4:	d3f9      	bcc.n	80033ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f6:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033f8:	4c0b      	ldr	r4, [pc, #44]	; (8003428 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033fc:	e001      	b.n	8003402 <LoopFillZerobss>

080033fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003400:	3204      	adds	r2, #4

08003402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003404:	d3fb      	bcc.n	80033fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003406:	f7ff ffd7 	bl	80033b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800340a:	f006 fad3 	bl	80099b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800340e:	f7fd fe2f 	bl	8001070 <main>
  bx  lr    
 8003412:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003414:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800341c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003420:	0800d9b8 	.word	0x0800d9b8
  ldr r2, =_sbss
 8003424:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003428:	20000624 	.word	0x20000624

0800342c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800342c:	e7fe      	b.n	800342c <ADC_IRQHandler>
	...

08003430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_Init+0x40>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <HAL_Init+0x40>)
 800343a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800343e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_Init+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <HAL_Init+0x40>)
 8003446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800344a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_Init+0x40>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a07      	ldr	r2, [pc, #28]	; (8003470 <HAL_Init+0x40>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003456:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003458:	2003      	movs	r0, #3
 800345a:	f000 f94f 	bl	80036fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345e:	200f      	movs	r0, #15
 8003460:	f000 f808 	bl	8003474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003464:	f7ff fcd0 	bl	8002e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_InitTick+0x54>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_InitTick+0x58>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4619      	mov	r1, r3
 8003486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800348a:	fbb3 f3f1 	udiv	r3, r3, r1
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f967 	bl	8003766 <HAL_SYSTICK_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e00e      	b.n	80034c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	d80a      	bhi.n	80034be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a8:	2200      	movs	r2, #0
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b0:	f000 f92f 	bl	8003712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b4:	4a06      	ldr	r2, [pc, #24]	; (80034d0 <HAL_InitTick+0x5c>)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20000008 	.word	0x20000008
 80034cc:	20000010 	.word	0x20000010
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_IncTick+0x20>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_IncTick+0x24>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4413      	add	r3, r2
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_IncTick+0x24>)
 80034e6:	6013      	str	r3, [r2, #0]
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000010 	.word	0x20000010
 80034f8:	20000610 	.word	0x20000610

080034fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_GetTick+0x14>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000610 	.word	0x20000610

08003514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800351c:	f7ff ffee 	bl	80034fc <HAL_GetTick>
 8003520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352c:	d005      	beq.n	800353a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_Delay+0x44>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800353a:	bf00      	nop
 800353c:	f7ff ffde 	bl	80034fc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d8f7      	bhi.n	800353c <HAL_Delay+0x28>
  {
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000010 	.word	0x20000010

0800355c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003578:	4013      	ands	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358e:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	60d3      	str	r3, [r2, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <__NVIC_GetPriorityGrouping+0x18>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 0307 	and.w	r3, r3, #7
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	db0b      	blt.n	80035ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	f003 021f 	and.w	r2, r3, #31
 80035d8:	4907      	ldr	r1, [pc, #28]	; (80035f8 <__NVIC_EnableIRQ+0x38>)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	2001      	movs	r0, #1
 80035e2:	fa00 f202 	lsl.w	r2, r0, r2
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f1c3 0307 	rsb	r3, r3, #7
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf28      	it	cs
 800366e:	2304      	movcs	r3, #4
 8003670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3304      	adds	r3, #4
 8003676:	2b06      	cmp	r3, #6
 8003678:	d902      	bls.n	8003680 <NVIC_EncodePriority+0x30>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3b03      	subs	r3, #3
 800367e:	e000      	b.n	8003682 <NVIC_EncodePriority+0x32>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43d9      	mvns	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	4313      	orrs	r3, r2
         );
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d301      	bcc.n	80036ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00f      	b.n	80036ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <SysTick_Config+0x40>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d6:	210f      	movs	r1, #15
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036dc:	f7ff ff8e 	bl	80035fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SysTick_Config+0x40>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x40>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff29 	bl	800355c <__NVIC_SetPriorityGrouping>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003724:	f7ff ff3e 	bl	80035a4 <__NVIC_GetPriorityGrouping>
 8003728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7ff ff8e 	bl	8003650 <NVIC_EncodePriority>
 8003734:	4602      	mov	r2, r0
 8003736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff5d 	bl	80035fc <__NVIC_SetPriority>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff31 	bl	80035c0 <__NVIC_EnableIRQ>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffa2 	bl	80036b8 <SysTick_Config>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7ff feb6 	bl	80034fc <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e099      	b.n	80038d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037bc:	e00f      	b.n	80037de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037be:	f7ff fe9d 	bl	80034fc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d908      	bls.n	80037de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e078      	b.n	80038d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e8      	bne.n	80037be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_DMA_Init+0x158>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2b04      	cmp	r3, #4
 8003836:	d107      	bne.n	8003848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4313      	orrs	r3, r2
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0307 	bic.w	r3, r3, #7
 800385e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2b04      	cmp	r3, #4
 8003870:	d117      	bne.n	80038a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fa89 	bl	8003d9c <DMA_CheckFifoParam>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2240      	movs	r2, #64	; 0x40
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800389e:	2301      	movs	r3, #1
 80038a0:	e016      	b.n	80038d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa40 	bl	8003d30 <DMA_CalcBaseAndBitshift>
 80038b0:	4603      	mov	r3, r0
 80038b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	223f      	movs	r2, #63	; 0x3f
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	f010803f 	.word	0xf010803f

080038dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038ea:	f7ff fe07 	bl	80034fc <HAL_GetTick>
 80038ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d008      	beq.n	800390e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e052      	b.n	80039b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0216 	bic.w	r2, r2, #22
 800391c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800392c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_DMA_Abort+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0208 	bic.w	r2, r2, #8
 800394c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395e:	e013      	b.n	8003988 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003960:	f7ff fdcc 	bl	80034fc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b05      	cmp	r3, #5
 800396c:	d90c      	bls.n	8003988 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2203      	movs	r2, #3
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e015      	b.n	80039b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e4      	bne.n	8003960 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	223f      	movs	r2, #63	; 0x3f
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d004      	beq.n	80039da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00c      	b.n	80039f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2205      	movs	r2, #5
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a0c:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <HAL_DMA_IRQHandler+0x248>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a8e      	ldr	r2, [pc, #568]	; (8003c4c <HAL_DMA_IRQHandler+0x24c>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0a9b      	lsrs	r3, r3, #10
 8003a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01a      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2208      	movs	r2, #8
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2201      	movs	r2, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d012      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2201      	movs	r2, #1
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	2210      	movs	r2, #16
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d043      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03c      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	2210      	movs	r2, #16
 8003afc:	409a      	lsls	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d108      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d024      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
 8003b2e:	e01f      	b.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
 8003b40:	e016      	b.n	8003b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0208 	bic.w	r2, r2, #8
 8003b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	2220      	movs	r2, #32
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 808f 	beq.w	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8087 	beq.w	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2220      	movs	r2, #32
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d136      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0216 	bic.w	r2, r2, #22
 8003bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <HAL_DMA_IRQHandler+0x1da>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0208 	bic.w	r2, r2, #8
 8003be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	223f      	movs	r2, #63	; 0x3f
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d07e      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
        }
        return;
 8003c16:	e079      	b.n	8003d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10d      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d031      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
 8003c44:	e02c      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
 8003c46:	bf00      	nop
 8003c48:	20000008 	.word	0x20000008
 8003c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d023      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e01e      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10f      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0210 	bic.w	r2, r2, #16
 8003c7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d032      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d307      	bcc.n	8003ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f2      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x2cc>
 8003ce6:	e000      	b.n	8003cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ce8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
 8003d0a:	e000      	b.n	8003d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d0c:	bf00      	nop
    }
  }
}
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d22:	b2db      	uxtb	r3, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	3b10      	subs	r3, #16
 8003d40:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <DMA_CalcBaseAndBitshift+0x64>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <DMA_CalcBaseAndBitshift+0x68>)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d909      	bls.n	8003d72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d70:	e007      	b.n	8003d82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	aaaaaaab 	.word	0xaaaaaaab
 8003d98:	0800d560 	.word	0x0800d560

08003d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11f      	bne.n	8003df6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d856      	bhi.n	8003e6a <DMA_CheckFifoParam+0xce>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <DMA_CheckFifoParam+0x28>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003de7 	.word	0x08003de7
 8003dcc:	08003dd5 	.word	0x08003dd5
 8003dd0:	08003e6b 	.word	0x08003e6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d046      	beq.n	8003e6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de4:	e043      	b.n	8003e6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dee:	d140      	bne.n	8003e72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df4:	e03d      	b.n	8003e72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	d121      	bne.n	8003e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d837      	bhi.n	8003e76 <DMA_CheckFifoParam+0xda>
 8003e06:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <DMA_CheckFifoParam+0x70>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e23 	.word	0x08003e23
 8003e14:	08003e1d 	.word	0x08003e1d
 8003e18:	08003e35 	.word	0x08003e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e20:	e030      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d025      	beq.n	8003e7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e32:	e022      	b.n	8003e7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e3c:	d11f      	bne.n	8003e7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e42:	e01c      	b.n	8003e7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d903      	bls.n	8003e52 <DMA_CheckFifoParam+0xb6>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d003      	beq.n	8003e58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e50:	e018      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
      break;
 8003e56:	e015      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      break;
 8003e68:	e00b      	b.n	8003e82 <DMA_CheckFifoParam+0xe6>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e00a      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e008      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e006      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e004      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e002      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <DMA_CheckFifoParam+0xe8>
      break;
 8003e82:	bf00      	nop
    }
  } 
  
  return status; 
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e159      	b.n	8004164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f040 8148 	bne.w	800415e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d005      	beq.n	8003ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d130      	bne.n	8003f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0201 	and.w	r2, r3, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d017      	beq.n	8003f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d123      	bne.n	8003fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	08da      	lsrs	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a2 	beq.w	800415e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b57      	ldr	r3, [pc, #348]	; (800417c <HAL_GPIO_Init+0x2e8>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	4a56      	ldr	r2, [pc, #344]	; (800417c <HAL_GPIO_Init+0x2e8>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004028:	6453      	str	r3, [r2, #68]	; 0x44
 800402a:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_GPIO_Init+0x2e8>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a52      	ldr	r2, [pc, #328]	; (8004180 <HAL_GPIO_Init+0x2ec>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a49      	ldr	r2, [pc, #292]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x202>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a48      	ldr	r2, [pc, #288]	; (8004188 <HAL_GPIO_Init+0x2f4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x1fe>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a47      	ldr	r2, [pc, #284]	; (800418c <HAL_GPIO_Init+0x2f8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x1fa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a46      	ldr	r2, [pc, #280]	; (8004190 <HAL_GPIO_Init+0x2fc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x1f6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a45      	ldr	r2, [pc, #276]	; (8004194 <HAL_GPIO_Init+0x300>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x1f2>
 8004082:	2304      	movs	r3, #4
 8004084:	e008      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004086:	2307      	movs	r3, #7
 8004088:	e006      	b.n	8004098 <HAL_GPIO_Init+0x204>
 800408a:	2303      	movs	r3, #3
 800408c:	e004      	b.n	8004098 <HAL_GPIO_Init+0x204>
 800408e:	2302      	movs	r3, #2
 8004090:	e002      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004096:	2300      	movs	r3, #0
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f002 0203 	and.w	r2, r2, #3
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	4093      	lsls	r3, r2
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a8:	4935      	ldr	r1, [pc, #212]	; (8004180 <HAL_GPIO_Init+0x2ec>)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	3302      	adds	r3, #2
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <HAL_GPIO_Init+0x304>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040da:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <HAL_GPIO_Init+0x304>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_GPIO_Init+0x304>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004104:	4a24      	ldr	r2, [pc, #144]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800410a:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_GPIO_Init+0x304>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800412e:	4a1a      	ldr	r2, [pc, #104]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004134:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004158:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <HAL_GPIO_Init+0x304>)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3301      	adds	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b0f      	cmp	r3, #15
 8004168:	f67f aea2 	bls.w	8003eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3724      	adds	r7, #36	; 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	40013800 	.word	0x40013800
 8004184:	40020000 	.word	0x40020000
 8004188:	40020400 	.word	0x40020400
 800418c:	40020800 	.word	0x40020800
 8004190:	40020c00 	.word	0x40020c00
 8004194:	40021000 	.word	0x40021000
 8004198:	40013c00 	.word	0x40013c00

0800419c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e12b      	b.n	8004406 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe fe48 	bl	8002e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004200:	f003 f8d6 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 8004204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a81      	ldr	r2, [pc, #516]	; (8004410 <HAL_I2C_Init+0x274>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d807      	bhi.n	8004220 <HAL_I2C_Init+0x84>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a80      	ldr	r2, [pc, #512]	; (8004414 <HAL_I2C_Init+0x278>)
 8004214:	4293      	cmp	r3, r2
 8004216:	bf94      	ite	ls
 8004218:	2301      	movls	r3, #1
 800421a:	2300      	movhi	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e006      	b.n	800422e <HAL_I2C_Init+0x92>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a7d      	ldr	r2, [pc, #500]	; (8004418 <HAL_I2C_Init+0x27c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	bf94      	ite	ls
 8004228:	2301      	movls	r3, #1
 800422a:	2300      	movhi	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0e7      	b.n	8004406 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a78      	ldr	r2, [pc, #480]	; (800441c <HAL_I2C_Init+0x280>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	0c9b      	lsrs	r3, r3, #18
 8004240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a6a      	ldr	r2, [pc, #424]	; (8004410 <HAL_I2C_Init+0x274>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d802      	bhi.n	8004270 <HAL_I2C_Init+0xd4>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3301      	adds	r3, #1
 800426e:	e009      	b.n	8004284 <HAL_I2C_Init+0xe8>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	4a69      	ldr	r2, [pc, #420]	; (8004420 <HAL_I2C_Init+0x284>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	3301      	adds	r3, #1
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	430b      	orrs	r3, r1
 800428a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	495c      	ldr	r1, [pc, #368]	; (8004410 <HAL_I2C_Init+0x274>)
 80042a0:	428b      	cmp	r3, r1
 80042a2:	d819      	bhi.n	80042d8 <HAL_I2C_Init+0x13c>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e59      	subs	r1, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042b8:	400b      	ands	r3, r1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_I2C_Init+0x138>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1e59      	subs	r1, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d2:	e051      	b.n	8004378 <HAL_I2C_Init+0x1dc>
 80042d4:	2304      	movs	r3, #4
 80042d6:	e04f      	b.n	8004378 <HAL_I2C_Init+0x1dc>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d111      	bne.n	8004304 <HAL_I2C_Init+0x168>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1e58      	subs	r0, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	440b      	add	r3, r1
 80042ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f2:	3301      	adds	r3, #1
 80042f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e012      	b.n	800432a <HAL_I2C_Init+0x18e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1e58      	subs	r0, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	0099      	lsls	r1, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	fbb0 f3f3 	udiv	r3, r0, r3
 800431a:	3301      	adds	r3, #1
 800431c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Init+0x196>
 800432e:	2301      	movs	r3, #1
 8004330:	e022      	b.n	8004378 <HAL_I2C_Init+0x1dc>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10e      	bne.n	8004358 <HAL_I2C_Init+0x1bc>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1e58      	subs	r0, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6859      	ldr	r1, [r3, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	440b      	add	r3, r1
 8004348:	fbb0 f3f3 	udiv	r3, r0, r3
 800434c:	3301      	adds	r3, #1
 800434e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004356:	e00f      	b.n	8004378 <HAL_I2C_Init+0x1dc>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e58      	subs	r0, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	0099      	lsls	r1, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	fbb0 f3f3 	udiv	r3, r0, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	6809      	ldr	r1, [r1, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6911      	ldr	r1, [r2, #16]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68d2      	ldr	r2, [r2, #12]
 80043b2:	4311      	orrs	r1, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	000186a0 	.word	0x000186a0
 8004414:	001e847f 	.word	0x001e847f
 8004418:	003d08ff 	.word	0x003d08ff
 800441c:	431bde83 	.word	0x431bde83
 8004420:	10624dd3 	.word	0x10624dd3

08004424 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	461a      	mov	r2, r3
 8004432:	4603      	mov	r3, r0
 8004434:	817b      	strh	r3, [r7, #10]
 8004436:	460b      	mov	r3, r1
 8004438:	813b      	strh	r3, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800443e:	f7ff f85d 	bl	80034fc <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b20      	cmp	r3, #32
 800444e:	f040 80d9 	bne.w	8004604 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2319      	movs	r3, #25
 8004458:	2201      	movs	r2, #1
 800445a:	496d      	ldr	r1, [pc, #436]	; (8004610 <HAL_I2C_Mem_Write+0x1ec>)
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f002 f90d 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004468:	2302      	movs	r3, #2
 800446a:	e0cc      	b.n	8004606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_I2C_Mem_Write+0x56>
 8004476:	2302      	movs	r3, #2
 8004478:	e0c5      	b.n	8004606 <HAL_I2C_Mem_Write+0x1e2>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d007      	beq.n	80044a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2221      	movs	r2, #33	; 0x21
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2240      	movs	r2, #64	; 0x40
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a3a      	ldr	r2, [r7, #32]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a4d      	ldr	r2, [pc, #308]	; (8004614 <HAL_I2C_Mem_Write+0x1f0>)
 80044e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044e2:	88f8      	ldrh	r0, [r7, #6]
 80044e4:	893a      	ldrh	r2, [r7, #8]
 80044e6:	8979      	ldrh	r1, [r7, #10]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	4603      	mov	r3, r0
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f001 fe9c 	bl	8006230 <I2C_RequestMemoryWrite>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d052      	beq.n	80045a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e081      	b.n	8004606 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f002 f98e 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b04      	cmp	r3, #4
 8004518:	d107      	bne.n	800452a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06b      	b.n	8004606 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d11b      	bne.n	80045a4 <HAL_I2C_Mem_Write+0x180>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d017      	beq.n	80045a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1aa      	bne.n	8004502 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f002 f97a 	bl	80068aa <I2C_WaitOnBTFFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00d      	beq.n	80045d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d107      	bne.n	80045d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e016      	b.n	8004606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	00100002 	.word	0x00100002
 8004614:	ffff0000 	.word	0xffff0000

08004618 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08c      	sub	sp, #48	; 0x30
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	461a      	mov	r2, r3
 8004626:	4603      	mov	r3, r0
 8004628:	817b      	strh	r3, [r7, #10]
 800462a:	460b      	mov	r3, r1
 800462c:	813b      	strh	r3, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004632:	f7fe ff63 	bl	80034fc <HAL_GetTick>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b20      	cmp	r3, #32
 8004642:	f040 8208 	bne.w	8004a56 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2319      	movs	r3, #25
 800464c:	2201      	movs	r2, #1
 800464e:	497b      	ldr	r1, [pc, #492]	; (800483c <HAL_I2C_Mem_Read+0x224>)
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f002 f813 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
 800465e:	e1fb      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_I2C_Mem_Read+0x56>
 800466a:	2302      	movs	r3, #2
 800466c:	e1f4      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d007      	beq.n	8004694 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2222      	movs	r2, #34	; 0x22
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a5b      	ldr	r2, [pc, #364]	; (8004840 <HAL_I2C_Mem_Read+0x228>)
 80046d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046d6:	88f8      	ldrh	r0, [r7, #6]
 80046d8:	893a      	ldrh	r2, [r7, #8]
 80046da:	8979      	ldrh	r1, [r7, #10]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	9301      	str	r3, [sp, #4]
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	4603      	mov	r3, r0
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f001 fe38 	bl	800635c <I2C_RequestMemoryRead>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e1b0      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d113      	bne.n	8004726 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fe:	2300      	movs	r3, #0
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	e184      	b.n	8004a30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	2b01      	cmp	r3, #1
 800472c:	d11b      	bne.n	8004766 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e164      	b.n	8004a30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476a:	2b02      	cmp	r3, #2
 800476c:	d11b      	bne.n	80047a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	e144      	b.n	8004a30 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047bc:	e138      	b.n	8004a30 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	f200 80f1 	bhi.w	80049aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d123      	bne.n	8004818 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f002 f8db 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e139      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004816:	e10b      	b.n	8004a30 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	2b02      	cmp	r3, #2
 800481e:	d14e      	bne.n	80048be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	2200      	movs	r2, #0
 8004828:	4906      	ldr	r1, [pc, #24]	; (8004844 <HAL_I2C_Mem_Read+0x22c>)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f001 ff26 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e10e      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
 800483a:	bf00      	nop
 800483c:	00100002 	.word	0x00100002
 8004840:	ffff0000 	.word	0xffff0000
 8004844:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048bc:	e0b8      	b.n	8004a30 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	2200      	movs	r2, #0
 80048c6:	4966      	ldr	r1, [pc, #408]	; (8004a60 <HAL_I2C_Mem_Read+0x448>)
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f001 fed7 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0bf      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	2200      	movs	r2, #0
 8004922:	494f      	ldr	r1, [pc, #316]	; (8004a60 <HAL_I2C_Mem_Read+0x448>)
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f001 fea9 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e091      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049a8:	e042      	b.n	8004a30 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f001 ffee 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e04c      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d118      	bne.n	8004a30 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f47f aec2 	bne.w	80047be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3728      	adds	r7, #40	; 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	00010004 	.word	0x00010004

08004a64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d003      	beq.n	8004a9c <HAL_I2C_EV_IRQHandler+0x38>
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	f040 80c1 	bne.w	8004c1e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004abc:	d003      	beq.n	8004ac6 <HAL_I2C_EV_IRQHandler+0x62>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ac4:	d101      	bne.n	8004aca <HAL_I2C_EV_IRQHandler+0x66>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_I2C_EV_IRQHandler+0x68>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f000 8132 	beq.w	8004d36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x92>
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	0a5b      	lsrs	r3, r3, #9
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 ffd6 	bl	8006a9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fd83 	bl	80055fa <I2C_Master_SB>
 8004af4:	e092      	b.n	8004c1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0xb2>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	0a5b      	lsrs	r3, r3, #9
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fdf9 	bl	8005706 <I2C_Master_ADD10>
 8004b14:	e082      	b.n	8004c1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_I2C_EV_IRQHandler+0xd2>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fe13 	bl	800575a <I2C_Master_ADDR>
 8004b34:	e072      	b.n	8004c1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	089b      	lsrs	r3, r3, #2
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03b      	beq.n	8004bba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b50:	f000 80f3 	beq.w	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00f      	beq.n	8004b80 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	0a9b      	lsrs	r3, r3, #10
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	089b      	lsrs	r3, r3, #2
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f9f3 	bl	8004f64 <I2C_MasterTransmit_TXE>
 8004b7e:	e04d      	b.n	8004c1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80d6 	beq.w	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	0a5b      	lsrs	r3, r3, #9
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80cf 	beq.w	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b9c:	7bbb      	ldrb	r3, [r7, #14]
 8004b9e:	2b21      	cmp	r3, #33	; 0x21
 8004ba0:	d103      	bne.n	8004baa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa7a 	bl	800509c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ba8:	e0c7      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	f040 80c4 	bne.w	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fae8 	bl	8005188 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb8:	e0bf      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc8:	f000 80b7 	beq.w	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00f      	beq.n	8004bf8 <HAL_I2C_EV_IRQHandler+0x194>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	0a9b      	lsrs	r3, r3, #10
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <HAL_I2C_EV_IRQHandler+0x194>
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fb5d 	bl	80052b0 <I2C_MasterReceive_RXNE>
 8004bf6:	e011      	b.n	8004c1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 809a 	beq.w	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	0a5b      	lsrs	r3, r3, #9
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8093 	beq.w	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fc06 	bl	8005426 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c1a:	e08e      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c1c:	e08d      	b.n	8004d3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	e007      	b.n	8004c40 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d012      	beq.n	8004c72 <HAL_I2C_EV_IRQHandler+0x20e>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	0a5b      	lsrs	r3, r3, #9
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00c      	beq.n	8004c72 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 ffc4 	bl	8005bf8 <I2C_Slave_ADDR>
 8004c70:	e066      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_I2C_EV_IRQHandler+0x22e>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	0a5b      	lsrs	r3, r3, #9
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fffe 	bl	8005c8c <I2C_Slave_STOPF>
 8004c90:	e056      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c92:	7bbb      	ldrb	r3, [r7, #14]
 8004c94:	2b21      	cmp	r3, #33	; 0x21
 8004c96:	d002      	beq.n	8004c9e <HAL_I2C_EV_IRQHandler+0x23a>
 8004c98:	7bbb      	ldrb	r3, [r7, #14]
 8004c9a:	2b29      	cmp	r3, #41	; 0x29
 8004c9c:	d125      	bne.n	8004cea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	09db      	lsrs	r3, r3, #7
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00f      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x266>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0a9b      	lsrs	r3, r3, #10
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x266>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 feda 	bl	8005a7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cc8:	e039      	b.n	8004d3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d033      	beq.n	8004d3e <HAL_I2C_EV_IRQHandler+0x2da>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	0a5b      	lsrs	r3, r3, #9
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d02d      	beq.n	8004d3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 ff07 	bl	8005af6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce8:	e029      	b.n	8004d3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	099b      	lsrs	r3, r3, #6
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	0a9b      	lsrs	r3, r3, #10
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 ff12 	bl	8005b38 <I2C_SlaveReceive_RXNE>
 8004d14:	e014      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	0a5b      	lsrs	r3, r3, #9
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 ff40 	bl	8005bb4 <I2C_SlaveReceive_BTF>
 8004d34:	e004      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d36:	bf00      	nop
 8004d38:	e002      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d3a:	bf00      	nop
 8004d3c:	e000      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b08a      	sub	sp, #40	; 0x28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d92:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	0a5b      	lsrs	r3, r3, #9
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <HAL_I2C_ER_IRQHandler+0x78>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f043 0302 	orr.w	r3, r3, #2
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004dbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	0a9b      	lsrs	r3, r3, #10
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d03f      	beq.n	8004e4a <HAL_I2C_ER_IRQHandler+0x104>
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d039      	beq.n	8004e4a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004dd6:	7efb      	ldrb	r3, [r7, #27]
 8004dd8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004df0:	7ebb      	ldrb	r3, [r7, #26]
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d112      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xd6>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10f      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xd6>
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b21      	cmp	r3, #33	; 0x21
 8004e00:	d008      	beq.n	8004e14 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b29      	cmp	r3, #41	; 0x29
 8004e06:	d005      	beq.n	8004e14 <HAL_I2C_ER_IRQHandler+0xce>
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	2b28      	cmp	r3, #40	; 0x28
 8004e0c:	d106      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b21      	cmp	r3, #33	; 0x21
 8004e12:	d103      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 f869 	bl	8005eec <I2C_Slave_AF>
 8004e1a:	e016      	b.n	8004e4a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e2e:	7efb      	ldrb	r3, [r7, #27]
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d002      	beq.n	8004e3a <HAL_I2C_ER_IRQHandler+0xf4>
 8004e34:	7efb      	ldrb	r3, [r7, #27]
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d107      	bne.n	8004e4a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	0adb      	lsrs	r3, r3, #11
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <HAL_I2C_ER_IRQHandler+0x12e>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	f043 0308 	orr.w	r3, r3, #8
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f001 f8a0 	bl	8005fcc <I2C_ITError>
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3728      	adds	r7, #40	; 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d150      	bne.n	800502c <I2C_MasterTransmit_TXE+0xc8>
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b21      	cmp	r3, #33	; 0x21
 8004f8e:	d14d      	bne.n	800502c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d01d      	beq.n	8004fd2 <I2C_MasterTransmit_TXE+0x6e>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d01a      	beq.n	8004fd2 <I2C_MasterTransmit_TXE+0x6e>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fa2:	d016      	beq.n	8004fd2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fb2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2211      	movs	r2, #17
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff62 	bl	8004e94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fd0:	e060      	b.n	8005094 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fe0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d107      	bne.n	800501c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff7d 	bl	8004f14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800501a:	e03b      	b.n	8005094 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff35 	bl	8004e94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800502a:	e033      	b.n	8005094 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b21      	cmp	r3, #33	; 0x21
 8005030:	d005      	beq.n	800503e <I2C_MasterTransmit_TXE+0xda>
 8005032:	7bbb      	ldrb	r3, [r7, #14]
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d12d      	bne.n	8005094 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b22      	cmp	r3, #34	; 0x22
 800503c:	d12a      	bne.n	8005094 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d108      	bne.n	800505a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005056:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005058:	e01c      	b.n	8005094 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d103      	bne.n	800506e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f88e 	bl	8005188 <I2C_MemoryTransmit_TXE_BTF>
}
 800506c:	e012      	b.n	8005094 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	781a      	ldrb	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005092:	e7ff      	b.n	8005094 <I2C_MasterTransmit_TXE+0x130>
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b21      	cmp	r3, #33	; 0x21
 80050b4:	d164      	bne.n	8005180 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050e4:	e04c      	b.n	8005180 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d01d      	beq.n	8005128 <I2C_MasterTransmit_BTF+0x8c>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d01a      	beq.n	8005128 <I2C_MasterTransmit_BTF+0x8c>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f8:	d016      	beq.n	8005128 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005108:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2211      	movs	r2, #17
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff feb7 	bl	8004e94 <HAL_I2C_MasterTxCpltCallback>
}
 8005126:	e02b      	b.n	8005180 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005136:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005146:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d107      	bne.n	8005172 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fed2 	bl	8004f14 <HAL_I2C_MemTxCpltCallback>
}
 8005170:	e006      	b.n	8005180 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fe8a 	bl	8004e94 <HAL_I2C_MasterTxCpltCallback>
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519c:	2b00      	cmp	r3, #0
 800519e:	d11d      	bne.n	80051dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10b      	bne.n	80051c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	1c9a      	adds	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051be:	e073      	b.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	121b      	asrs	r3, r3, #8
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051da:	e065      	b.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10b      	bne.n	80051fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051fa:	e055      	b.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	2b02      	cmp	r3, #2
 8005202:	d151      	bne.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b22      	cmp	r3, #34	; 0x22
 8005208:	d10d      	bne.n	8005226 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005218:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005224:	e040      	b.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d015      	beq.n	800525c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	2b21      	cmp	r3, #33	; 0x21
 8005234:	d112      	bne.n	800525c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800525a:	e025      	b.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d120      	bne.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b21      	cmp	r3, #33	; 0x21
 800526a:	d11d      	bne.n	80052a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800527a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fe36 	bl	8004f14 <HAL_I2C_MemTxCpltCallback>
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b22      	cmp	r3, #34	; 0x22
 80052c2:	f040 80ac 	bne.w	800541e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d921      	bls.n	8005318 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b03      	cmp	r3, #3
 8005302:	f040 808c 	bne.w	800541e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005314:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005316:	e082      	b.n	800541e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	2b02      	cmp	r3, #2
 800531e:	d075      	beq.n	800540c <I2C_MasterReceive_RXNE+0x15c>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d002      	beq.n	800532c <I2C_MasterReceive_RXNE+0x7c>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d16f      	bne.n	800540c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f001 fafd 	bl	800692c <I2C_WaitOnSTOPRequestThroughIT>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d142      	bne.n	80053be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005346:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005356:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d10a      	bne.n	80053a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff fdc1 	bl	8004f28 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053a6:	e03a      	b.n	800541e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2212      	movs	r2, #18
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fd76 	bl	8004ea8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053bc:	e02f      	b.n	800541e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fd99 	bl	8004f3c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800540a:	e008      	b.n	800541e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	605a      	str	r2, [r3, #4]
}
 800541c:	e7ff      	b.n	800541e <I2C_MasterReceive_RXNE+0x16e>
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b04      	cmp	r3, #4
 800543c:	d11b      	bne.n	8005476 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005474:	e0bd      	b.n	80055f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b03      	cmp	r3, #3
 800547e:	d129      	bne.n	80054d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d00a      	beq.n	80054ac <I2C_MasterReceive_BTF+0x86>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d007      	beq.n	80054ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054d2:	e08e      	b.n	80055f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d176      	bne.n	80055cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d002      	beq.n	80054ea <I2C_MasterReceive_BTF+0xc4>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d108      	bne.n	80054fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e019      	b.n	8005530 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d002      	beq.n	8005508 <I2C_MasterReceive_BTF+0xe2>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d108      	bne.n	800551a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e00a      	b.n	8005530 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b10      	cmp	r3, #16
 800551e:	d007      	beq.n	8005530 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800558a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d10a      	bne.n	80055b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff fcba 	bl	8004f28 <HAL_I2C_MemRxCpltCallback>
}
 80055b4:	e01d      	b.n	80055f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2212      	movs	r2, #18
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fc6f 	bl	8004ea8 <HAL_I2C_MasterRxCpltCallback>
}
 80055ca:	e012      	b.n	80055f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	d117      	bne.n	800563e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	b2db      	uxtb	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005626:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005628:	e067      	b.n	80056fa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	b2db      	uxtb	r3, r3
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	b2da      	uxtb	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	611a      	str	r2, [r3, #16]
}
 800563c:	e05d      	b.n	80056fa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005646:	d133      	bne.n	80056b0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b21      	cmp	r3, #33	; 0x21
 8005652:	d109      	bne.n	8005668 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005664:	611a      	str	r2, [r3, #16]
 8005666:	e008      	b.n	800567a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	b2da      	uxtb	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <I2C_Master_SB+0x92>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d108      	bne.n	800569e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	2b00      	cmp	r3, #0
 8005692:	d032      	beq.n	80056fa <I2C_Master_SB+0x100>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d02d      	beq.n	80056fa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ac:	605a      	str	r2, [r3, #4]
}
 80056ae:	e024      	b.n	80056fa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10e      	bne.n	80056d6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	b29b      	uxth	r3, r3
 80056be:	11db      	asrs	r3, r3, #7
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 0306 	and.w	r3, r3, #6
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f063 030f 	orn	r3, r3, #15
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	611a      	str	r2, [r3, #16]
}
 80056d4:	e011      	b.n	80056fa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10d      	bne.n	80056fa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	11db      	asrs	r3, r3, #7
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 0306 	and.w	r3, r3, #6
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f063 030e 	orn	r3, r3, #14
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	611a      	str	r2, [r3, #16]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	b2da      	uxtb	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <I2C_Master_ADD10+0x26>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d108      	bne.n	800573e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00c      	beq.n	800574e <I2C_Master_ADD10+0x48>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574c:	605a      	str	r2, [r3, #4]
  }
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800575a:	b480      	push	{r7}
 800575c:	b091      	sub	sp, #68	; 0x44
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b22      	cmp	r3, #34	; 0x22
 8005782:	f040 8169 	bne.w	8005a58 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <I2C_Master_ADDR+0x54>
 800578e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d10b      	bne.n	80057ae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005796:	2300      	movs	r3, #0
 8005798:	633b      	str	r3, [r7, #48]	; 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	e160      	b.n	8005a70 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11d      	bne.n	80057f2 <I2C_Master_ADDR+0x98>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057be:	d118      	bne.n	80057f2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c0:	2300      	movs	r3, #0
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	651a      	str	r2, [r3, #80]	; 0x50
 80057f0:	e13e      	b.n	8005a70 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d113      	bne.n	8005824 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fc:	2300      	movs	r3, #0
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e115      	b.n	8005a50 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b01      	cmp	r3, #1
 800582c:	f040 808a 	bne.w	8005944 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005836:	d137      	bne.n	80058a8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005846:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005856:	d113      	bne.n	8005880 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005866:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005868:	2300      	movs	r3, #0
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	e0e7      	b.n	8005a50 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	623b      	str	r3, [r7, #32]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e0d3      	b.n	8005a50 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d02e      	beq.n	800590c <I2C_Master_ADDR+0x1b2>
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d02b      	beq.n	800590c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	2b12      	cmp	r3, #18
 80058b8:	d102      	bne.n	80058c0 <I2C_Master_ADDR+0x166>
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d125      	bne.n	800590c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d00e      	beq.n	80058e4 <I2C_Master_ADDR+0x18a>
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d00b      	beq.n	80058e4 <I2C_Master_ADDR+0x18a>
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d008      	beq.n	80058e4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e007      	b.n	80058f4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058f2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f4:	2300      	movs	r3, #0
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	e0a1      	b.n	8005a50 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591c:	2300      	movs	r3, #0
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e085      	b.n	8005a50 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d14d      	bne.n	80059ea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2b04      	cmp	r3, #4
 8005952:	d016      	beq.n	8005982 <I2C_Master_ADDR+0x228>
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	2b02      	cmp	r3, #2
 8005958:	d013      	beq.n	8005982 <I2C_Master_ADDR+0x228>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	2b10      	cmp	r3, #16
 800595e:	d010      	beq.n	8005982 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e007      	b.n	8005992 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005990:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a0:	d117      	bne.n	80059d2 <I2C_Master_ADDR+0x278>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059a8:	d00b      	beq.n	80059c2 <I2C_Master_ADDR+0x268>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d008      	beq.n	80059c2 <I2C_Master_ADDR+0x268>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d005      	beq.n	80059c2 <I2C_Master_ADDR+0x268>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d002      	beq.n	80059c2 <I2C_Master_ADDR+0x268>
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d107      	bne.n	80059d2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	e032      	b.n	8005a50 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059f8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a08:	d117      	bne.n	8005a3a <I2C_Master_ADDR+0x2e0>
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a10:	d00b      	beq.n	8005a2a <I2C_Master_ADDR+0x2d0>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d008      	beq.n	8005a2a <I2C_Master_ADDR+0x2d0>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d005      	beq.n	8005a2a <I2C_Master_ADDR+0x2d0>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d002      	beq.n	8005a2a <I2C_Master_ADDR+0x2d0>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d107      	bne.n	8005a3a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a56:	e00b      	b.n	8005a70 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
}
 8005a6e:	e7ff      	b.n	8005a70 <I2C_Master_ADDR+0x316>
 8005a70:	bf00      	nop
 8005a72:	3744      	adds	r7, #68	; 0x44
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02b      	beq.n	8005aee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d114      	bne.n	8005aee <I2C_SlaveTransmit_TXE+0x72>
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b29      	cmp	r3, #41	; 0x29
 8005ac8:	d111      	bne.n	8005aee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2221      	movs	r2, #33	; 0x21
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2228      	movs	r2, #40	; 0x28
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff f9e7 	bl	8004ebc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d011      	beq.n	8005b2c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02c      	beq.n	8005bac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d114      	bne.n	8005bac <I2C_SlaveReceive_RXNE+0x74>
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b2a      	cmp	r3, #42	; 0x2a
 8005b86:	d111      	bne.n	8005bac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2222      	movs	r2, #34	; 0x22
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2228      	movs	r2, #40	; 0x28
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff f992 	bl	8004ed0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d012      	beq.n	8005bec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c12:	2b28      	cmp	r3, #40	; 0x28
 8005c14:	d127      	bne.n	8005c66 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c24:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	089b      	lsrs	r3, r3, #2
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c32:	2301      	movs	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	09db      	lsrs	r3, r3, #7
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	81bb      	strh	r3, [r7, #12]
 8005c48:	e002      	b.n	8005c50 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c58:	89ba      	ldrh	r2, [r7, #12]
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff f940 	bl	8004ee4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c64:	e00e      	b.n	8005c84 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c66:	2300      	movs	r3, #0
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005caa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce8:	d172      	bne.n	8005dd0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	2b22      	cmp	r3, #34	; 0x22
 8005cee:	d002      	beq.n	8005cf6 <I2C_Slave_STOPF+0x6a>
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf4:	d135      	bne.n	8005d62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f043 0204 	orr.w	r2, r3, #4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fd fff0 	bl	8003d14 <HAL_DMA_GetState>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d049      	beq.n	8005dce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	4a69      	ldr	r2, [pc, #420]	; (8005ee4 <I2C_Slave_STOPF+0x258>)
 8005d40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fd fe38 	bl	80039bc <HAL_DMA_Abort_IT>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03d      	beq.n	8005dce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d60:	e035      	b.n	8005dce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f043 0204 	orr.w	r2, r3, #4
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fd ffba 	bl	8003d14 <HAL_DMA_GetState>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d014      	beq.n	8005dd0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	4a4e      	ldr	r2, [pc, #312]	; (8005ee4 <I2C_Slave_STOPF+0x258>)
 8005dac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fd fe02 	bl	80039bc <HAL_DMA_Abort_IT>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	e000      	b.n	8005dd0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d03e      	beq.n	8005e58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d112      	bne.n	8005e0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d112      	bne.n	8005e42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	f043 0204 	orr.w	r2, r3, #4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8b3 	bl	8005fcc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e66:	e039      	b.n	8005edc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6c:	d109      	bne.n	8005e82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2228      	movs	r2, #40	; 0x28
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff f827 	bl	8004ed0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b28      	cmp	r3, #40	; 0x28
 8005e8c:	d111      	bne.n	8005eb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <I2C_Slave_STOPF+0x25c>)
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff f828 	bl	8004f00 <HAL_I2C_ListenCpltCallback>
}
 8005eb0:	e014      	b.n	8005edc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	2b22      	cmp	r3, #34	; 0x22
 8005eb8:	d002      	beq.n	8005ec0 <I2C_Slave_STOPF+0x234>
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b22      	cmp	r3, #34	; 0x22
 8005ebe:	d10d      	bne.n	8005edc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fe fffa 	bl	8004ed0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	0800652d 	.word	0x0800652d
 8005ee8:	ffff0000 	.word	0xffff0000

08005eec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d002      	beq.n	8005f0e <I2C_Slave_AF+0x22>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d129      	bne.n	8005f62 <I2C_Slave_AF+0x76>
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b28      	cmp	r3, #40	; 0x28
 8005f12:	d126      	bne.n	8005f62 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a2c      	ldr	r2, [pc, #176]	; (8005fc8 <I2C_Slave_AF+0xdc>)
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f28:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f32:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f42:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fe ffd0 	bl	8004f00 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f60:	e02e      	b.n	8005fc0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b21      	cmp	r3, #33	; 0x21
 8005f66:	d126      	bne.n	8005fb6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <I2C_Slave_AF+0xdc>)
 8005f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2221      	movs	r2, #33	; 0x21
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f92:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f9c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fe ff84 	bl	8004ebc <HAL_I2C_SlaveTxCpltCallback>
}
 8005fb4:	e004      	b.n	8005fc0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fbe:	615a      	str	r2, [r3, #20]
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	ffff0000 	.word	0xffff0000

08005fcc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fe4:	7bbb      	ldrb	r3, [r7, #14]
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d002      	beq.n	8005ff0 <I2C_ITError+0x24>
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d10a      	bne.n	8006006 <I2C_ITError+0x3a>
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	2b22      	cmp	r3, #34	; 0x22
 8005ff4:	d107      	bne.n	8006006 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006004:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006006:	7bfb      	ldrb	r3, [r7, #15]
 8006008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800600c:	2b28      	cmp	r3, #40	; 0x28
 800600e:	d107      	bne.n	8006020 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2228      	movs	r2, #40	; 0x28
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800601e:	e015      	b.n	800604c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	d00a      	beq.n	8006046 <I2C_ITError+0x7a>
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b60      	cmp	r3, #96	; 0x60
 8006034:	d007      	beq.n	8006046 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605a:	d162      	bne.n	8006122 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800606a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d020      	beq.n	80060bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	4a6a      	ldr	r2, [pc, #424]	; (8006228 <I2C_ITError+0x25c>)
 8006080:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	4618      	mov	r0, r3
 8006088:	f7fd fc98 	bl	80039bc <HAL_DMA_Abort_IT>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8089 	beq.w	80061a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060b6:	4610      	mov	r0, r2
 80060b8:	4798      	blx	r3
 80060ba:	e074      	b.n	80061a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	4a59      	ldr	r2, [pc, #356]	; (8006228 <I2C_ITError+0x25c>)
 80060c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd fc77 	bl	80039bc <HAL_DMA_Abort_IT>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d068      	beq.n	80061a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d10b      	bne.n	80060fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
 8006120:	e041      	b.n	80061a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b60      	cmp	r3, #96	; 0x60
 800612c:	d125      	bne.n	800617a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d10b      	bne.n	8006162 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fe feec 	bl	8004f50 <HAL_I2C_AbortCpltCallback>
 8006178:	e015      	b.n	80061a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d10b      	bne.n	80061a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fe fecb 	bl	8004f3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10e      	bne.n	80061d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d113      	bne.n	8006220 <I2C_ITError+0x254>
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b28      	cmp	r3, #40	; 0x28
 80061fc:	d110      	bne.n	8006220 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <I2C_ITError+0x260>)
 8006202:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fe fe70 	bl	8004f00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	0800652d 	.word	0x0800652d
 800622c:	ffff0000 	.word	0xffff0000

08006230 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	461a      	mov	r2, r3
 800623e:	4603      	mov	r3, r0
 8006240:	817b      	strh	r3, [r7, #10]
 8006242:	460b      	mov	r3, r1
 8006244:	813b      	strh	r3, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2200      	movs	r2, #0
 8006262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fa08 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006280:	d103      	bne.n	800628a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e05f      	b.n	800634e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800628e:	897b      	ldrh	r3, [r7, #10]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800629c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	6a3a      	ldr	r2, [r7, #32]
 80062a2:	492d      	ldr	r1, [pc, #180]	; (8006358 <I2C_RequestMemoryWrite+0x128>)
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fa40 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e04c      	b.n	800634e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062cc:	6a39      	ldr	r1, [r7, #32]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 faaa 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d107      	bne.n	80062f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e02b      	b.n	800634e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d105      	bne.n	8006308 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	611a      	str	r2, [r3, #16]
 8006306:	e021      	b.n	800634c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006308:	893b      	ldrh	r3, [r7, #8]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b29b      	uxth	r3, r3
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006318:	6a39      	ldr	r1, [r7, #32]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fa84 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	2b04      	cmp	r3, #4
 800632c:	d107      	bne.n	800633e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e005      	b.n	800634e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006342:	893b      	ldrh	r3, [r7, #8]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	00010002 	.word	0x00010002

0800635c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	461a      	mov	r2, r3
 800636a:	4603      	mov	r3, r0
 800636c:	817b      	strh	r3, [r7, #10]
 800636e:	460b      	mov	r3, r1
 8006370:	813b      	strh	r3, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006384:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	2200      	movs	r2, #0
 800639e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f96a 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063bc:	d103      	bne.n	80063c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e0aa      	b.n	8006520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063ca:	897b      	ldrh	r3, [r7, #10]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	6a3a      	ldr	r2, [r7, #32]
 80063de:	4952      	ldr	r1, [pc, #328]	; (8006528 <I2C_RequestMemoryRead+0x1cc>)
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f9a2 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e097      	b.n	8006520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006408:	6a39      	ldr	r1, [r7, #32]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fa0c 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00d      	beq.n	8006432 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	2b04      	cmp	r3, #4
 800641c:	d107      	bne.n	800642e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800642c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e076      	b.n	8006520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d105      	bne.n	8006444 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006438:	893b      	ldrh	r3, [r7, #8]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	611a      	str	r2, [r3, #16]
 8006442:	e021      	b.n	8006488 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006444:	893b      	ldrh	r3, [r7, #8]
 8006446:	0a1b      	lsrs	r3, r3, #8
 8006448:	b29b      	uxth	r3, r3
 800644a:	b2da      	uxtb	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006454:	6a39      	ldr	r1, [r7, #32]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f9e6 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00d      	beq.n	800647e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	2b04      	cmp	r3, #4
 8006468:	d107      	bne.n	800647a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e050      	b.n	8006520 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800647e:	893b      	ldrh	r3, [r7, #8]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	6a39      	ldr	r1, [r7, #32]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f9cb 	bl	8006828 <I2C_WaitOnTXEFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	2b04      	cmp	r3, #4
 800649e:	d107      	bne.n	80064b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e035      	b.n	8006520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f8d3 	bl	800667c <I2C_WaitOnFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00d      	beq.n	80064f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ea:	d103      	bne.n	80064f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e013      	b.n	8006520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064f8:	897b      	ldrh	r3, [r7, #10]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	b2da      	uxtb	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	6a3a      	ldr	r2, [r7, #32]
 800650c:	4906      	ldr	r1, [pc, #24]	; (8006528 <I2C_RequestMemoryRead+0x1cc>)
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f90b 	bl	800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	00010002 	.word	0x00010002

0800652c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006544:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006546:	4b4b      	ldr	r3, [pc, #300]	; (8006674 <I2C_DMAAbort+0x148>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	4a4a      	ldr	r2, [pc, #296]	; (8006678 <I2C_DMAAbort+0x14c>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	0a1a      	lsrs	r2, r3, #8
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	00da      	lsls	r2, r3, #3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006572:	e00a      	b.n	800658a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3b01      	subs	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006588:	d0ea      	beq.n	8006560 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	2200      	movs	r2, #0
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	2200      	movs	r2, #0
 80065a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065cc:	2200      	movs	r2, #0
 80065ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	2200      	movs	r2, #0
 80065de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b60      	cmp	r3, #96	; 0x60
 80065fa:	d10e      	bne.n	800661a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	f7fe fc9c 	bl	8004f50 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006618:	e027      	b.n	800666a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800661a:	7cfb      	ldrb	r3, [r7, #19]
 800661c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006620:	2b28      	cmp	r3, #40	; 0x28
 8006622:	d117      	bne.n	8006654 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006642:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2228      	movs	r2, #40	; 0x28
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006652:	e007      	b.n	8006664 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006664:	6978      	ldr	r0, [r7, #20]
 8006666:	f7fe fc69 	bl	8004f3c <HAL_I2C_ErrorCallback>
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000008 	.word	0x20000008
 8006678:	14f8b589 	.word	0x14f8b589

0800667c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800668c:	e025      	b.n	80066da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006694:	d021      	beq.n	80066da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006696:	f7fc ff31 	bl	80034fc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d302      	bcc.n	80066ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d116      	bne.n	80066da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e023      	b.n	8006722 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d10d      	bne.n	8006700 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	43da      	mvns	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	e00c      	b.n	800671a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	43da      	mvns	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	429a      	cmp	r2, r3
 800671e:	d0b6      	beq.n	800668e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006738:	e051      	b.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006748:	d123      	bne.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006758:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006762:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f043 0204 	orr.w	r2, r3, #4
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e046      	b.n	8006820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006798:	d021      	beq.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679a:	f7fc feaf 	bl	80034fc <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d302      	bcc.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d116      	bne.n	80067de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f043 0220 	orr.w	r2, r3, #32
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e020      	b.n	8006820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	0c1b      	lsrs	r3, r3, #16
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d10c      	bne.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	43da      	mvns	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bf14      	ite	ne
 80067fa:	2301      	movne	r3, #1
 80067fc:	2300      	moveq	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e00b      	b.n	800681a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	43da      	mvns	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4013      	ands	r3, r2
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d18d      	bne.n	800673a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006834:	e02d      	b.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f900 	bl	8006a3c <I2C_IsAcknowledgeFailed>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e02d      	b.n	80068a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684c:	d021      	beq.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684e:	f7fc fe55 	bl	80034fc <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	429a      	cmp	r2, r3
 800685c:	d302      	bcc.n	8006864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d116      	bne.n	8006892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e007      	b.n	80068a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689c:	2b80      	cmp	r3, #128	; 0x80
 800689e:	d1ca      	bne.n	8006836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068b6:	e02d      	b.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f8bf 	bl	8006a3c <I2C_IsAcknowledgeFailed>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e02d      	b.n	8006924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ce:	d021      	beq.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d0:	f7fc fe14 	bl	80034fc <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d302      	bcc.n	80068e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d116      	bne.n	8006914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	f043 0220 	orr.w	r2, r3, #32
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e007      	b.n	8006924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b04      	cmp	r3, #4
 8006920:	d1ca      	bne.n	80068b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	08db      	lsrs	r3, r3, #3
 800693e:	4a13      	ldr	r2, [pc, #76]	; (800698c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	0a1a      	lsrs	r2, r3, #8
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b01      	subs	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e008      	b.n	800697c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006978:	d0e9      	beq.n	800694e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	20000008 	.word	0x20000008
 800698c:	14f8b589 	.word	0x14f8b589

08006990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800699c:	e042      	b.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d119      	bne.n	80069e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0210 	mvn.w	r2, #16
 80069b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e029      	b.n	8006a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e0:	f7fc fd8c 	bl	80034fc <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d302      	bcc.n	80069f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d116      	bne.n	8006a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f043 0220 	orr.w	r2, r3, #32
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e007      	b.n	8006a34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d1b5      	bne.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a52:	d11b      	bne.n	8006a8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f043 0204 	orr.w	r2, r3, #4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006aaa:	d103      	bne.n	8006ab4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ab2:	e007      	b.n	8006ac4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006abc:	d102      	bne.n	8006ac4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e267      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d075      	beq.n	8006bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aee:	4b88      	ldr	r3, [pc, #544]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d00c      	beq.n	8006b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006afa:	4b85      	ldr	r3, [pc, #532]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d112      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b06:	4b82      	ldr	r3, [pc, #520]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b12:	d10b      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b14:	4b7e      	ldr	r3, [pc, #504]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d05b      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x108>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d157      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e242      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d106      	bne.n	8006b44 <HAL_RCC_OscConfig+0x74>
 8006b36:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a75      	ldr	r2, [pc, #468]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e01d      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b4c:	d10c      	bne.n	8006b68 <HAL_RCC_OscConfig+0x98>
 8006b4e:	4b70      	ldr	r3, [pc, #448]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a6f      	ldr	r2, [pc, #444]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4b6d      	ldr	r3, [pc, #436]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6c      	ldr	r2, [pc, #432]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e00b      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b68:	4b69      	ldr	r3, [pc, #420]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a68      	ldr	r2, [pc, #416]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	4b66      	ldr	r3, [pc, #408]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a65      	ldr	r2, [pc, #404]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fc fcb8 	bl	80034fc <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b90:	f7fc fcb4 	bl	80034fc <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	; 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e207      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0xc0>
 8006bae:	e014      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fc fca4 	bl	80034fc <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fc fca0 	bl	80034fc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	; 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1f3      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	4b51      	ldr	r3, [pc, #324]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0xe8>
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d063      	beq.n	8006cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006be6:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf2:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d11c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bfe:	4b44      	ldr	r3, [pc, #272]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0a:	4b41      	ldr	r3, [pc, #260]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d001      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e1c7      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c22:	4b3b      	ldr	r3, [pc, #236]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4937      	ldr	r1, [pc, #220]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	e03a      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c40:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <HAL_RCC_OscConfig+0x244>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fc fc59 	bl	80034fc <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c4e:	f7fc fc55 	bl	80034fc <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e1a8      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c60:	4b2b      	ldr	r3, [pc, #172]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6c:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4925      	ldr	r1, [pc, #148]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]
 8006c80:	e015      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c82:	4b24      	ldr	r3, [pc, #144]	; (8006d14 <HAL_RCC_OscConfig+0x244>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fc fc38 	bl	80034fc <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c90:	f7fc fc34 	bl	80034fc <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e187      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d036      	beq.n	8006d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d016      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <HAL_RCC_OscConfig+0x248>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fc fc18 	bl	80034fc <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd0:	f7fc fc14 	bl	80034fc <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e167      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x200>
 8006cee:	e01b      	b.n	8006d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf0:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <HAL_RCC_OscConfig+0x248>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf6:	f7fc fc01 	bl	80034fc <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfc:	e00e      	b.n	8006d1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cfe:	f7fc fbfd 	bl	80034fc <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d907      	bls.n	8006d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e150      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
 8006d10:	40023800 	.word	0x40023800
 8006d14:	42470000 	.word	0x42470000
 8006d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d1c:	4b88      	ldr	r3, [pc, #544]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1ea      	bne.n	8006cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8097 	beq.w	8006e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3a:	4b81      	ldr	r3, [pc, #516]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10f      	bne.n	8006d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	4a7c      	ldr	r2, [pc, #496]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d54:	6413      	str	r3, [r2, #64]	; 0x40
 8006d56:	4b7a      	ldr	r3, [pc, #488]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	60bb      	str	r3, [r7, #8]
 8006d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d66:	4b77      	ldr	r3, [pc, #476]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d118      	bne.n	8006da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d72:	4b74      	ldr	r3, [pc, #464]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a73      	ldr	r2, [pc, #460]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d7e:	f7fc fbbd 	bl	80034fc <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d86:	f7fc fbb9 	bl	80034fc <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e10c      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d98:	4b6a      	ldr	r3, [pc, #424]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d106      	bne.n	8006dba <HAL_RCC_OscConfig+0x2ea>
 8006dac:	4b64      	ldr	r3, [pc, #400]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	4a63      	ldr	r2, [pc, #396]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	6713      	str	r3, [r2, #112]	; 0x70
 8006db8:	e01c      	b.n	8006df4 <HAL_RCC_OscConfig+0x324>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0x30c>
 8006dc2:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	4a5e      	ldr	r2, [pc, #376]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	f043 0304 	orr.w	r3, r3, #4
 8006dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dce:	4b5c      	ldr	r3, [pc, #368]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4a5b      	ldr	r2, [pc, #364]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dda:	e00b      	b.n	8006df4 <HAL_RCC_OscConfig+0x324>
 8006ddc:	4b58      	ldr	r3, [pc, #352]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	4a57      	ldr	r2, [pc, #348]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	6713      	str	r3, [r2, #112]	; 0x70
 8006de8:	4b55      	ldr	r3, [pc, #340]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	4a54      	ldr	r2, [pc, #336]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dee:	f023 0304 	bic.w	r3, r3, #4
 8006df2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d015      	beq.n	8006e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfc:	f7fc fb7e 	bl	80034fc <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e02:	e00a      	b.n	8006e1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e04:	f7fc fb7a 	bl	80034fc <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e0cb      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1a:	4b49      	ldr	r3, [pc, #292]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0ee      	beq.n	8006e04 <HAL_RCC_OscConfig+0x334>
 8006e26:	e014      	b.n	8006e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e28:	f7fc fb68 	bl	80034fc <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e2e:	e00a      	b.n	8006e46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e30:	f7fc fb64 	bl	80034fc <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e0b5      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e46:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1ee      	bne.n	8006e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d105      	bne.n	8006e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e58:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	4a38      	ldr	r2, [pc, #224]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80a1 	beq.w	8006fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e6e:	4b34      	ldr	r3, [pc, #208]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 030c 	and.w	r3, r3, #12
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d05c      	beq.n	8006f34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d141      	bne.n	8006f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e82:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <HAL_RCC_OscConfig+0x478>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e88:	f7fc fb38 	bl	80034fc <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e90:	f7fc fb34 	bl	80034fc <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e087      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea2:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f0      	bne.n	8006e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69da      	ldr	r2, [r3, #28]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	019b      	lsls	r3, r3, #6
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	041b      	lsls	r3, r3, #16
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	061b      	lsls	r3, r3, #24
 8006ed2:	491b      	ldr	r1, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <HAL_RCC_OscConfig+0x478>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ede:	f7fc fb0d 	bl	80034fc <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee6:	f7fc fb09 	bl	80034fc <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e05c      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef8:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x416>
 8006f04:	e054      	b.n	8006fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f06:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <HAL_RCC_OscConfig+0x478>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fc faf6 	bl	80034fc <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f14:	f7fc faf2 	bl	80034fc <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e045      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f26:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0x444>
 8006f32:	e03d      	b.n	8006fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d107      	bne.n	8006f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e038      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
 8006f40:	40023800 	.word	0x40023800
 8006f44:	40007000 	.word	0x40007000
 8006f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f4c:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <HAL_RCC_OscConfig+0x4ec>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d028      	beq.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d121      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d11a      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d111      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	3b01      	subs	r3, #1
 8006f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d107      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800

08006fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0cc      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd4:	4b68      	ldr	r3, [pc, #416]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d90c      	bls.n	8006ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe2:	4b65      	ldr	r3, [pc, #404]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fea:	4b63      	ldr	r3, [pc, #396]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0b8      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d020      	beq.n	800704a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007014:	4b59      	ldr	r3, [pc, #356]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	4a58      	ldr	r2, [pc, #352]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800701e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800702c:	4b53      	ldr	r3, [pc, #332]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4a52      	ldr	r2, [pc, #328]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007038:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	494d      	ldr	r1, [pc, #308]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	4313      	orrs	r3, r2
 8007048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d044      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d107      	bne.n	800706e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d119      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e07f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d003      	beq.n	800707e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800707a:	2b03      	cmp	r3, #3
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800707e:	4b3f      	ldr	r3, [pc, #252]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e06f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708e:	4b3b      	ldr	r3, [pc, #236]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e067      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f023 0203 	bic.w	r2, r3, #3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4934      	ldr	r1, [pc, #208]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070b0:	f7fc fa24 	bl	80034fc <HAL_GetTick>
 80070b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b6:	e00a      	b.n	80070ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b8:	f7fc fa20 	bl	80034fc <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e04f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	4b2b      	ldr	r3, [pc, #172]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 020c 	and.w	r2, r3, #12
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	429a      	cmp	r2, r3
 80070de:	d1eb      	bne.n	80070b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d20c      	bcs.n	8007108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ee:	4b22      	ldr	r3, [pc, #136]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f6:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d001      	beq.n	8007108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e032      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007114:	4b19      	ldr	r3, [pc, #100]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4916      	ldr	r1, [pc, #88]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007122:	4313      	orrs	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	490e      	ldr	r1, [pc, #56]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007146:	f000 f821 	bl	800718c <HAL_RCC_GetSysClockFreq>
 800714a:	4602      	mov	r2, r0
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	091b      	lsrs	r3, r3, #4
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	490a      	ldr	r1, [pc, #40]	; (8007180 <HAL_RCC_ClockConfig+0x1c0>)
 8007158:	5ccb      	ldrb	r3, [r1, r3]
 800715a:	fa22 f303 	lsr.w	r3, r2, r3
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <HAL_RCC_ClockConfig+0x1c4>)
 8007160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <HAL_RCC_ClockConfig+0x1c8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fc f984 	bl	8003474 <HAL_InitTick>

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40023c00 	.word	0x40023c00
 800717c:	40023800 	.word	0x40023800
 8007180:	0800d548 	.word	0x0800d548
 8007184:	20000008 	.word	0x20000008
 8007188:	2000000c 	.word	0x2000000c

0800718c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800718c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007190:	b094      	sub	sp, #80	; 0x50
 8007192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	647b      	str	r3, [r7, #68]	; 0x44
 8007198:	2300      	movs	r3, #0
 800719a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719c:	2300      	movs	r3, #0
 800719e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a4:	4b79      	ldr	r3, [pc, #484]	; (800738c <HAL_RCC_GetSysClockFreq+0x200>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 030c 	and.w	r3, r3, #12
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d00d      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x40>
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	f200 80e1 	bhi.w	8007378 <HAL_RCC_GetSysClockFreq+0x1ec>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_RCC_GetSysClockFreq+0x34>
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d003      	beq.n	80071c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071be:	e0db      	b.n	8007378 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c0:	4b73      	ldr	r3, [pc, #460]	; (8007390 <HAL_RCC_GetSysClockFreq+0x204>)
 80071c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80071c4:	e0db      	b.n	800737e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071c6:	4b73      	ldr	r3, [pc, #460]	; (8007394 <HAL_RCC_GetSysClockFreq+0x208>)
 80071c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071ca:	e0d8      	b.n	800737e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071cc:	4b6f      	ldr	r3, [pc, #444]	; (800738c <HAL_RCC_GetSysClockFreq+0x200>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071d6:	4b6d      	ldr	r3, [pc, #436]	; (800738c <HAL_RCC_GetSysClockFreq+0x200>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d063      	beq.n	80072aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071e2:	4b6a      	ldr	r3, [pc, #424]	; (800738c <HAL_RCC_GetSysClockFreq+0x200>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	099b      	lsrs	r3, r3, #6
 80071e8:	2200      	movs	r2, #0
 80071ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f4:	633b      	str	r3, [r7, #48]	; 0x30
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
 80071fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071fe:	4622      	mov	r2, r4
 8007200:	462b      	mov	r3, r5
 8007202:	f04f 0000 	mov.w	r0, #0
 8007206:	f04f 0100 	mov.w	r1, #0
 800720a:	0159      	lsls	r1, r3, #5
 800720c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007210:	0150      	lsls	r0, r2, #5
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4621      	mov	r1, r4
 8007218:	1a51      	subs	r1, r2, r1
 800721a:	6139      	str	r1, [r7, #16]
 800721c:	4629      	mov	r1, r5
 800721e:	eb63 0301 	sbc.w	r3, r3, r1
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007230:	4659      	mov	r1, fp
 8007232:	018b      	lsls	r3, r1, #6
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800723a:	4651      	mov	r1, sl
 800723c:	018a      	lsls	r2, r1, #6
 800723e:	4651      	mov	r1, sl
 8007240:	ebb2 0801 	subs.w	r8, r2, r1
 8007244:	4659      	mov	r1, fp
 8007246:	eb63 0901 	sbc.w	r9, r3, r1
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800725a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800725e:	4690      	mov	r8, r2
 8007260:	4699      	mov	r9, r3
 8007262:	4623      	mov	r3, r4
 8007264:	eb18 0303 	adds.w	r3, r8, r3
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	462b      	mov	r3, r5
 800726c:	eb49 0303 	adc.w	r3, r9, r3
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800727e:	4629      	mov	r1, r5
 8007280:	024b      	lsls	r3, r1, #9
 8007282:	4621      	mov	r1, r4
 8007284:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007288:	4621      	mov	r1, r4
 800728a:	024a      	lsls	r2, r1, #9
 800728c:	4610      	mov	r0, r2
 800728e:	4619      	mov	r1, r3
 8007290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007292:	2200      	movs	r2, #0
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28
 8007296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800729c:	f7f9 fcdc 	bl	8000c58 <__aeabi_uldivmod>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4613      	mov	r3, r2
 80072a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a8:	e058      	b.n	800735c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072aa:	4b38      	ldr	r3, [pc, #224]	; (800738c <HAL_RCC_GetSysClockFreq+0x200>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	099b      	lsrs	r3, r3, #6
 80072b0:	2200      	movs	r2, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	4611      	mov	r1, r2
 80072b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	2300      	movs	r3, #0
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
 80072c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072c4:	4642      	mov	r2, r8
 80072c6:	464b      	mov	r3, r9
 80072c8:	f04f 0000 	mov.w	r0, #0
 80072cc:	f04f 0100 	mov.w	r1, #0
 80072d0:	0159      	lsls	r1, r3, #5
 80072d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072d6:	0150      	lsls	r0, r2, #5
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4641      	mov	r1, r8
 80072de:	ebb2 0a01 	subs.w	sl, r2, r1
 80072e2:	4649      	mov	r1, r9
 80072e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072fc:	ebb2 040a 	subs.w	r4, r2, sl
 8007300:	eb63 050b 	sbc.w	r5, r3, fp
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	00eb      	lsls	r3, r5, #3
 800730e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007312:	00e2      	lsls	r2, r4, #3
 8007314:	4614      	mov	r4, r2
 8007316:	461d      	mov	r5, r3
 8007318:	4643      	mov	r3, r8
 800731a:	18e3      	adds	r3, r4, r3
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	464b      	mov	r3, r9
 8007320:	eb45 0303 	adc.w	r3, r5, r3
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007332:	4629      	mov	r1, r5
 8007334:	028b      	lsls	r3, r1, #10
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800733c:	4621      	mov	r1, r4
 800733e:	028a      	lsls	r2, r1, #10
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007346:	2200      	movs	r2, #0
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	61fa      	str	r2, [r7, #28]
 800734c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007350:	f7f9 fc82 	bl	8000c58 <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4613      	mov	r3, r2
 800735a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_RCC_GetSysClockFreq+0x200>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	0c1b      	lsrs	r3, r3, #16
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	3301      	adds	r3, #1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800736c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800736e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007376:	e002      	b.n	800737e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <HAL_RCC_GetSysClockFreq+0x204>)
 800737a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800737c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800737e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007380:	4618      	mov	r0, r3
 8007382:	3750      	adds	r7, #80	; 0x50
 8007384:	46bd      	mov	sp, r7
 8007386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800738a:	bf00      	nop
 800738c:	40023800 	.word	0x40023800
 8007390:	00f42400 	.word	0x00f42400
 8007394:	007a1200 	.word	0x007a1200

08007398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800739c:	4b03      	ldr	r3, [pc, #12]	; (80073ac <HAL_RCC_GetHCLKFreq+0x14>)
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000008 	.word	0x20000008

080073b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073b4:	f7ff fff0 	bl	8007398 <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	0a9b      	lsrs	r3, r3, #10
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4903      	ldr	r1, [pc, #12]	; (80073d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40023800 	.word	0x40023800
 80073d4:	0800d558 	.word	0x0800d558

080073d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073dc:	f7ff ffdc 	bl	8007398 <HAL_RCC_GetHCLKFreq>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	0b5b      	lsrs	r3, r3, #13
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	4903      	ldr	r1, [pc, #12]	; (80073fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ee:	5ccb      	ldrb	r3, [r1, r3]
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40023800 	.word	0x40023800
 80073fc:	0800d558 	.word	0x0800d558

08007400 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007424:	2b00      	cmp	r3, #0
 8007426:	d035      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007428:	4b67      	ldr	r3, [pc, #412]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800742e:	f7fc f865 	bl	80034fc <HAL_GetTick>
 8007432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007434:	e008      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007436:	f7fc f861 	bl	80034fc <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e0ba      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007448:	4b60      	ldr	r3, [pc, #384]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1f0      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	019a      	lsls	r2, r3, #6
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	071b      	lsls	r3, r3, #28
 8007460:	495a      	ldr	r1, [pc, #360]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007468:	4b57      	ldr	r3, [pc, #348]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800746e:	f7fc f845 	bl	80034fc <HAL_GetTick>
 8007472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007474:	e008      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007476:	f7fc f841 	bl	80034fc <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e09a      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007488:	4b50      	ldr	r3, [pc, #320]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8083 	beq.w	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	4b49      	ldr	r3, [pc, #292]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	4a48      	ldr	r2, [pc, #288]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b0:	6413      	str	r3, [r2, #64]	; 0x40
 80074b2:	4b46      	ldr	r3, [pc, #280]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80074be:	4b44      	ldr	r3, [pc, #272]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a43      	ldr	r2, [pc, #268]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074ca:	f7fc f817 	bl	80034fc <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074d0:	e008      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074d2:	f7fc f813 	bl	80034fc <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e06c      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074e4:	4b3a      	ldr	r3, [pc, #232]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0f0      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074f0:	4b36      	ldr	r3, [pc, #216]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d02f      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	d028      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800750e:	4b2f      	ldr	r3, [pc, #188]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007516:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007518:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800751a:	2201      	movs	r2, #1
 800751c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800751e:	4b2d      	ldr	r3, [pc, #180]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007524:	4a29      	ldr	r2, [pc, #164]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800752a:	4b28      	ldr	r3, [pc, #160]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b01      	cmp	r3, #1
 8007534:	d114      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007536:	f7fb ffe1 	bl	80034fc <HAL_GetTick>
 800753a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800753c:	e00a      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800753e:	f7fb ffdd 	bl	80034fc <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	f241 3288 	movw	r2, #5000	; 0x1388
 800754c:	4293      	cmp	r3, r2
 800754e:	d901      	bls.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e034      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007554:	4b1d      	ldr	r3, [pc, #116]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ee      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800756c:	d10d      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800756e:	4b17      	ldr	r3, [pc, #92]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800757e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007582:	4912      	ldr	r1, [pc, #72]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007584:	4313      	orrs	r3, r2
 8007586:	608b      	str	r3, [r1, #8]
 8007588:	e005      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	4a0f      	ldr	r2, [pc, #60]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007590:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007594:	6093      	str	r3, [r2, #8]
 8007596:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075a2:	490a      	ldr	r1, [pc, #40]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0308 	and.w	r3, r3, #8
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	7c1a      	ldrb	r2, [r3, #16]
 80075b8:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075ba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	42470068 	.word	0x42470068
 80075cc:	40023800 	.word	0x40023800
 80075d0:	40007000 	.word	0x40007000
 80075d4:	42470e40 	.word	0x42470e40
 80075d8:	424711e0 	.word	0x424711e0

080075dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e066      	b.n	80076c0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7f5b      	ldrb	r3, [r3, #29]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d105      	bne.n	8007608 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fb fc70 	bl	8002ee8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	22ca      	movs	r2, #202	; 0xca
 8007614:	625a      	str	r2, [r3, #36]	; 0x24
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2253      	movs	r2, #83	; 0x53
 800761c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa45 	bl	8007aae <RTC_EnterInitMode>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d12c      	bne.n	8007688 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800763c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007640:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6899      	ldr	r1, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	68d2      	ldr	r2, [r2, #12]
 8007668:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6919      	ldr	r1, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	041a      	lsls	r2, r3, #16
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa4c 	bl	8007b1c <RTC_ExitInitMode>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d113      	bne.n	80076b6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	7f1b      	ldrb	r3, [r3, #28]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_RTC_SetTime+0x1c>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e087      	b.n	80077f4 <HAL_RTC_SetTime+0x12c>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2202      	movs	r2, #2
 80076ee:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d126      	bne.n	8007744 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2200      	movs	r2, #0
 8007708:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fa29 	bl	8007b66 <RTC_ByteToBcd2>
 8007714:	4603      	mov	r3, r0
 8007716:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fa22 	bl	8007b66 <RTC_ByteToBcd2>
 8007722:	4603      	mov	r3, r0
 8007724:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007726:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	789b      	ldrb	r3, [r3, #2]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fa1a 	bl	8007b66 <RTC_ByteToBcd2>
 8007732:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007734:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	78db      	ldrb	r3, [r3, #3]
 800773c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e018      	b.n	8007776 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007764:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800776a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	78db      	ldrb	r3, [r3, #3]
 8007770:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	22ca      	movs	r2, #202	; 0xca
 800777c:	625a      	str	r2, [r3, #36]	; 0x24
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2253      	movs	r2, #83	; 0x53
 8007784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f991 	bl	8007aae <RTC_EnterInitMode>
 800778c:	4603      	mov	r3, r0
 800778e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007790:	7cfb      	ldrb	r3, [r7, #19]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d120      	bne.n	80077d8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077a4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6899      	ldr	r1, [r3, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	431a      	orrs	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f9a4 	bl	8007b1c <RTC_ExitInitMode>
 80077d4:	4603      	mov	r3, r0
 80077d6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80077d8:	7cfb      	ldrb	r3, [r7, #19]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	22ff      	movs	r2, #255	; 0xff
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	771a      	strb	r2, [r3, #28]

  return status;
 80077f2:	7cfb      	ldrb	r3, [r7, #19]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd90      	pop	{r4, r7, pc}

080077fc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800782e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007832:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800783e:	b2da      	uxtb	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784e:	b2da      	uxtb	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785c:	b2da      	uxtb	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	0d9b      	lsrs	r3, r3, #22
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d11a      	bne.n	80078ae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 f98f 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 f986 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	789b      	ldrb	r3, [r3, #2]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 f97d 	bl	8007ba0 <RTC_Bcd2ToByte>
 80078a6:	4603      	mov	r3, r0
 80078a8:	461a      	mov	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078b8:	b590      	push	{r4, r7, lr}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	7f1b      	ldrb	r3, [r3, #28]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_RTC_SetDate+0x1c>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e071      	b.n	80079b8 <HAL_RTC_SetDate+0x100>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2202      	movs	r2, #2
 80078de:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10e      	bne.n	8007904 <HAL_RTC_SetDate+0x4c>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	f023 0310 	bic.w	r3, r3, #16
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	330a      	adds	r3, #10
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11c      	bne.n	8007944 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	78db      	ldrb	r3, [r3, #3]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f929 	bl	8007b66 <RTC_ByteToBcd2>
 8007914:	4603      	mov	r3, r0
 8007916:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	785b      	ldrb	r3, [r3, #1]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 f922 	bl	8007b66 <RTC_ByteToBcd2>
 8007922:	4603      	mov	r3, r0
 8007924:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007926:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	789b      	ldrb	r3, [r3, #2]
 800792c:	4618      	mov	r0, r3
 800792e:	f000 f91a 	bl	8007b66 <RTC_ByteToBcd2>
 8007932:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007934:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800793e:	4313      	orrs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	e00e      	b.n	8007962 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007950:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007956:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	22ca      	movs	r2, #202	; 0xca
 8007968:	625a      	str	r2, [r3, #36]	; 0x24
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2253      	movs	r2, #83	; 0x53
 8007970:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 f89b 	bl	8007aae <RTC_EnterInitMode>
 8007978:	4603      	mov	r3, r0
 800797a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800797c:	7cfb      	ldrb	r3, [r7, #19]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10c      	bne.n	800799c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800798c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007990:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f8c2 	bl	8007b1c <RTC_ExitInitMode>
 8007998:	4603      	mov	r3, r0
 800799a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800799c:	7cfb      	ldrb	r3, [r7, #19]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	22ff      	movs	r2, #255	; 0xff
 80079ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	771a      	strb	r2, [r3, #28]

  return status;
 80079b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd90      	pop	{r4, r7, pc}

080079c0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	0a1b      	lsrs	r3, r3, #8
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	0b5b      	lsrs	r3, r3, #13
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d11a      	bne.n	8007a54 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	78db      	ldrb	r3, [r3, #3]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f8bc 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 f8b3 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	789b      	ldrb	r3, [r3, #2]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f8aa 	bl	8007ba0 <RTC_Bcd2ToByte>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a78:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a7a:	f7fb fd3f 	bl	80034fc <HAL_GetTick>
 8007a7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a80:	e009      	b.n	8007a96 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a82:	f7fb fd3b 	bl	80034fc <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a90:	d901      	bls.n	8007a96 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e007      	b.n	8007aa6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0ee      	beq.n	8007a82 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d122      	bne.n	8007b12 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ada:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007adc:	f7fb fd0e 	bl	80034fc <HAL_GetTick>
 8007ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ae2:	e00c      	b.n	8007afe <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ae4:	f7fb fd0a 	bl	80034fc <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007af2:	d904      	bls.n	8007afe <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2204      	movs	r2, #4
 8007af8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <RTC_EnterInitMode+0x64>
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d1e8      	bne.n	8007ae4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b36:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff ff89 	bl	8007a5e <HAL_RTC_WaitForSynchro>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2204      	movs	r2, #4
 8007b56:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007b74:	e005      	b.n	8007b82 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	3b0a      	subs	r3, #10
 8007b80:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d8f6      	bhi.n	8007b76 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	b2db      	uxtb	r3, r3
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	091b      	lsrs	r3, r3, #4
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	0092      	lsls	r2, r2, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	4413      	add	r3, r2
 8007bca:	b2db      	uxtb	r3, r3
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e041      	b.n	8007c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fb f99e 	bl	8002f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f000 fc8e 	bl	8008538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d001      	beq.n	8007c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e044      	b.n	8007d1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a1e      	ldr	r2, [pc, #120]	; (8007d28 <HAL_TIM_Base_Start_IT+0xb0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d018      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cba:	d013      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1a      	ldr	r2, [pc, #104]	; (8007d2c <HAL_TIM_Base_Start_IT+0xb4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <HAL_TIM_Base_Start_IT+0xb8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a17      	ldr	r2, [pc, #92]	; (8007d34 <HAL_TIM_Base_Start_IT+0xbc>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x6c>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a16      	ldr	r2, [pc, #88]	; (8007d38 <HAL_TIM_Base_Start_IT+0xc0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d111      	bne.n	8007d08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b06      	cmp	r3, #6
 8007cf4:	d010      	beq.n	8007d18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0201 	orr.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d06:	e007      	b.n	8007d18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40014000 	.word	0x40014000

08007d3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e041      	b.n	8007dd2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f839 	bl	8007dda <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	f000 fbdc 	bl	8008538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_IC_Start_IT+0x1e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e013      	b.n	8007e36 <HAL_TIM_IC_Start_IT+0x46>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_IC_Start_IT+0x2e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	e00b      	b.n	8007e36 <HAL_TIM_IC_Start_IT+0x46>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_IC_Start_IT+0x3e>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	e003      	b.n	8007e36 <HAL_TIM_IC_Start_IT+0x46>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <HAL_TIM_IC_Start_IT+0x58>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	e013      	b.n	8007e70 <HAL_TIM_IC_Start_IT+0x80>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d104      	bne.n	8007e58 <HAL_TIM_IC_Start_IT+0x68>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e00b      	b.n	8007e70 <HAL_TIM_IC_Start_IT+0x80>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	d104      	bne.n	8007e68 <HAL_TIM_IC_Start_IT+0x78>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	e003      	b.n	8007e70 <HAL_TIM_IC_Start_IT+0x80>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d102      	bne.n	8007e7e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e78:	7b7b      	ldrb	r3, [r7, #13]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d001      	beq.n	8007e82 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e0c2      	b.n	8008008 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <HAL_TIM_IC_Start_IT+0xa2>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e90:	e013      	b.n	8007eba <HAL_TIM_IC_Start_IT+0xca>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_IC_Start_IT+0xb2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ea0:	e00b      	b.n	8007eba <HAL_TIM_IC_Start_IT+0xca>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d104      	bne.n	8007eb2 <HAL_TIM_IC_Start_IT+0xc2>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eb0:	e003      	b.n	8007eba <HAL_TIM_IC_Start_IT+0xca>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d104      	bne.n	8007eca <HAL_TIM_IC_Start_IT+0xda>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ec8:	e013      	b.n	8007ef2 <HAL_TIM_IC_Start_IT+0x102>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d104      	bne.n	8007eda <HAL_TIM_IC_Start_IT+0xea>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ed8:	e00b      	b.n	8007ef2 <HAL_TIM_IC_Start_IT+0x102>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d104      	bne.n	8007eea <HAL_TIM_IC_Start_IT+0xfa>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee8:	e003      	b.n	8007ef2 <HAL_TIM_IC_Start_IT+0x102>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b0c      	cmp	r3, #12
 8007ef6:	d841      	bhi.n	8007f7c <HAL_TIM_IC_Start_IT+0x18c>
 8007ef8:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <HAL_TIM_IC_Start_IT+0x110>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007f35 	.word	0x08007f35
 8007f04:	08007f7d 	.word	0x08007f7d
 8007f08:	08007f7d 	.word	0x08007f7d
 8007f0c:	08007f7d 	.word	0x08007f7d
 8007f10:	08007f47 	.word	0x08007f47
 8007f14:	08007f7d 	.word	0x08007f7d
 8007f18:	08007f7d 	.word	0x08007f7d
 8007f1c:	08007f7d 	.word	0x08007f7d
 8007f20:	08007f59 	.word	0x08007f59
 8007f24:	08007f7d 	.word	0x08007f7d
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f6b 	.word	0x08007f6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0202 	orr.w	r2, r2, #2
 8007f42:	60da      	str	r2, [r3, #12]
      break;
 8007f44:	e01d      	b.n	8007f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f042 0204 	orr.w	r2, r2, #4
 8007f54:	60da      	str	r2, [r3, #12]
      break;
 8007f56:	e014      	b.n	8007f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f042 0208 	orr.w	r2, r2, #8
 8007f66:	60da      	str	r2, [r3, #12]
      break;
 8007f68:	e00b      	b.n	8007f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0210 	orr.w	r2, r2, #16
 8007f78:	60da      	str	r2, [r3, #12]
      break;
 8007f7a:	e002      	b.n	8007f82 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f80:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d13e      	bne.n	8008006 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fd09 	bl	80089a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1d      	ldr	r2, [pc, #116]	; (8008010 <HAL_TIM_IC_Start_IT+0x220>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d018      	beq.n	8007fd2 <HAL_TIM_IC_Start_IT+0x1e2>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa8:	d013      	beq.n	8007fd2 <HAL_TIM_IC_Start_IT+0x1e2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a19      	ldr	r2, [pc, #100]	; (8008014 <HAL_TIM_IC_Start_IT+0x224>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_TIM_IC_Start_IT+0x1e2>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a17      	ldr	r2, [pc, #92]	; (8008018 <HAL_TIM_IC_Start_IT+0x228>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <HAL_TIM_IC_Start_IT+0x1e2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_TIM_IC_Start_IT+0x22c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIM_IC_Start_IT+0x1e2>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a14      	ldr	r2, [pc, #80]	; (8008020 <HAL_TIM_IC_Start_IT+0x230>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d111      	bne.n	8007ff6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b06      	cmp	r3, #6
 8007fe2:	d010      	beq.n	8008006 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0201 	orr.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff4:	e007      	b.n	8008006 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0201 	orr.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	40010000 	.word	0x40010000
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40014000 	.word	0x40014000

08008024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b02      	cmp	r3, #2
 8008038:	d122      	bne.n	8008080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	2b02      	cmp	r3, #2
 8008046:	d11b      	bne.n	8008080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0202 	mvn.w	r2, #2
 8008050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7f9 fc12 	bl	8001890 <HAL_TIM_IC_CaptureCallback>
 800806c:	e005      	b.n	800807a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa43 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fa4a 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b04      	cmp	r3, #4
 800808c:	d122      	bne.n	80080d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b04      	cmp	r3, #4
 800809a:	d11b      	bne.n	80080d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0204 	mvn.w	r2, #4
 80080a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7f9 fbe8 	bl	8001890 <HAL_TIM_IC_CaptureCallback>
 80080c0:	e005      	b.n	80080ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa19 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fa20 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b08      	cmp	r3, #8
 80080e0:	d122      	bne.n	8008128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f003 0308 	and.w	r3, r3, #8
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	d11b      	bne.n	8008128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0208 	mvn.w	r2, #8
 80080f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2204      	movs	r2, #4
 80080fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7f9 fbbe 	bl	8001890 <HAL_TIM_IC_CaptureCallback>
 8008114:	e005      	b.n	8008122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f9ef 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f9f6 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0310 	and.w	r3, r3, #16
 8008132:	2b10      	cmp	r3, #16
 8008134:	d122      	bne.n	800817c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	2b10      	cmp	r3, #16
 8008142:	d11b      	bne.n	800817c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0210 	mvn.w	r2, #16
 800814c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2208      	movs	r2, #8
 8008152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7f9 fb94 	bl	8001890 <HAL_TIM_IC_CaptureCallback>
 8008168:	e005      	b.n	8008176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f9c5 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f9cc 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b01      	cmp	r3, #1
 8008188:	d10e      	bne.n	80081a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b01      	cmp	r3, #1
 8008196:	d107      	bne.n	80081a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0201 	mvn.w	r2, #1
 80081a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7f8 ff30 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	2b80      	cmp	r3, #128	; 0x80
 80081b4:	d10e      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c0:	2b80      	cmp	r3, #128	; 0x80
 80081c2:	d107      	bne.n	80081d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fc88 	bl	8008ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d10e      	bne.n	8008200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ec:	2b40      	cmp	r3, #64	; 0x40
 80081ee:	d107      	bne.n	8008200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f991 	bl	8008522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b20      	cmp	r3, #32
 800820c:	d10e      	bne.n	800822c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b20      	cmp	r3, #32
 800821a:	d107      	bne.n	800822c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0220 	mvn.w	r2, #32
 8008224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fc52 	bl	8008ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_TIM_IC_ConfigChannel+0x1e>
 800824e:	2302      	movs	r3, #2
 8008250:	e088      	b.n	8008364 <HAL_TIM_IC_ConfigChannel+0x130>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11b      	bne.n	8008298 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6819      	ldr	r1, [r3, #0]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f000 f9e2 	bl	8008638 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699a      	ldr	r2, [r3, #24]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 020c 	bic.w	r2, r2, #12
 8008282:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6999      	ldr	r1, [r3, #24]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	619a      	str	r2, [r3, #24]
 8008296:	e060      	b.n	800835a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b04      	cmp	r3, #4
 800829c:	d11c      	bne.n	80082d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f000 fa5a 	bl	8008766 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6999      	ldr	r1, [r3, #24]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	021a      	lsls	r2, r3, #8
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	619a      	str	r2, [r3, #24]
 80082d6:	e040      	b.n	800835a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b08      	cmp	r3, #8
 80082dc:	d11b      	bne.n	8008316 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6819      	ldr	r1, [r3, #0]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f000 faa7 	bl	8008840 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69da      	ldr	r2, [r3, #28]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 020c 	bic.w	r2, r2, #12
 8008300:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69d9      	ldr	r1, [r3, #28]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	61da      	str	r2, [r3, #28]
 8008314:	e021      	b.n	800835a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b0c      	cmp	r3, #12
 800831a:	d11c      	bne.n	8008356 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f000 fac4 	bl	80088b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800833e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	69d9      	ldr	r1, [r3, #28]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	021a      	lsls	r2, r3, #8
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	61da      	str	r2, [r3, #28]
 8008354:	e001      	b.n	800835a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_TIM_ConfigClockSource+0x1c>
 8008384:	2302      	movs	r3, #2
 8008386:	e0b4      	b.n	80084f2 <HAL_TIM_ConfigClockSource+0x186>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c0:	d03e      	beq.n	8008440 <HAL_TIM_ConfigClockSource+0xd4>
 80083c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c6:	f200 8087 	bhi.w	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 80083ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ce:	f000 8086 	beq.w	80084de <HAL_TIM_ConfigClockSource+0x172>
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	d87f      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 80083d8:	2b70      	cmp	r3, #112	; 0x70
 80083da:	d01a      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0xa6>
 80083dc:	2b70      	cmp	r3, #112	; 0x70
 80083de:	d87b      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 80083e0:	2b60      	cmp	r3, #96	; 0x60
 80083e2:	d050      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x11a>
 80083e4:	2b60      	cmp	r3, #96	; 0x60
 80083e6:	d877      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 80083e8:	2b50      	cmp	r3, #80	; 0x50
 80083ea:	d03c      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0xfa>
 80083ec:	2b50      	cmp	r3, #80	; 0x50
 80083ee:	d873      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 80083f0:	2b40      	cmp	r3, #64	; 0x40
 80083f2:	d058      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0x13a>
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d86f      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 80083f8:	2b30      	cmp	r3, #48	; 0x30
 80083fa:	d064      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15a>
 80083fc:	2b30      	cmp	r3, #48	; 0x30
 80083fe:	d86b      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008400:	2b20      	cmp	r3, #32
 8008402:	d060      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008404:	2b20      	cmp	r3, #32
 8008406:	d867      	bhi.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
 8008408:	2b00      	cmp	r3, #0
 800840a:	d05c      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15a>
 800840c:	2b10      	cmp	r3, #16
 800840e:	d05a      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x15a>
 8008410:	e062      	b.n	80084d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6818      	ldr	r0, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6899      	ldr	r1, [r3, #8]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f000 faa1 	bl	8008968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	609a      	str	r2, [r3, #8]
      break;
 800843e:	e04f      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6818      	ldr	r0, [r3, #0]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6899      	ldr	r1, [r3, #8]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f000 fa8a 	bl	8008968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008462:	609a      	str	r2, [r3, #8]
      break;
 8008464:	e03c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	6859      	ldr	r1, [r3, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	461a      	mov	r2, r3
 8008474:	f000 f948 	bl	8008708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2150      	movs	r1, #80	; 0x50
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fa57 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 8008484:	e02c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6859      	ldr	r1, [r3, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	461a      	mov	r2, r3
 8008494:	f000 f9a4 	bl	80087e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2160      	movs	r1, #96	; 0x60
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fa47 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 80084a4:	e01c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6859      	ldr	r1, [r3, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f000 f928 	bl	8008708 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2140      	movs	r1, #64	; 0x40
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa37 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 80084c4:	e00c      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f000 fa2e 	bl	8008932 <TIM_ITRx_SetConfig>
      break;
 80084d6:	e003      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e000      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a34      	ldr	r2, [pc, #208]	; (800861c <TIM_Base_SetConfig+0xe4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00f      	beq.n	8008570 <TIM_Base_SetConfig+0x38>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008556:	d00b      	beq.n	8008570 <TIM_Base_SetConfig+0x38>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a31      	ldr	r2, [pc, #196]	; (8008620 <TIM_Base_SetConfig+0xe8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d007      	beq.n	8008570 <TIM_Base_SetConfig+0x38>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a30      	ldr	r2, [pc, #192]	; (8008624 <TIM_Base_SetConfig+0xec>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_Base_SetConfig+0x38>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a2f      	ldr	r2, [pc, #188]	; (8008628 <TIM_Base_SetConfig+0xf0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d108      	bne.n	8008582 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a25      	ldr	r2, [pc, #148]	; (800861c <TIM_Base_SetConfig+0xe4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d01b      	beq.n	80085c2 <TIM_Base_SetConfig+0x8a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008590:	d017      	beq.n	80085c2 <TIM_Base_SetConfig+0x8a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a22      	ldr	r2, [pc, #136]	; (8008620 <TIM_Base_SetConfig+0xe8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <TIM_Base_SetConfig+0x8a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a21      	ldr	r2, [pc, #132]	; (8008624 <TIM_Base_SetConfig+0xec>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00f      	beq.n	80085c2 <TIM_Base_SetConfig+0x8a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a20      	ldr	r2, [pc, #128]	; (8008628 <TIM_Base_SetConfig+0xf0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00b      	beq.n	80085c2 <TIM_Base_SetConfig+0x8a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a1f      	ldr	r2, [pc, #124]	; (800862c <TIM_Base_SetConfig+0xf4>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d007      	beq.n	80085c2 <TIM_Base_SetConfig+0x8a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <TIM_Base_SetConfig+0xf8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d003      	beq.n	80085c2 <TIM_Base_SetConfig+0x8a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a1d      	ldr	r2, [pc, #116]	; (8008634 <TIM_Base_SetConfig+0xfc>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d108      	bne.n	80085d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a08      	ldr	r2, [pc, #32]	; (800861c <TIM_Base_SetConfig+0xe4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d103      	bne.n	8008608 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	691a      	ldr	r2, [r3, #16]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	615a      	str	r2, [r3, #20]
}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40010000 	.word	0x40010000
 8008620:	40000400 	.word	0x40000400
 8008624:	40000800 	.word	0x40000800
 8008628:	40000c00 	.word	0x40000c00
 800862c:	40014000 	.word	0x40014000
 8008630:	40014400 	.word	0x40014400
 8008634:	40014800 	.word	0x40014800

08008638 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	f023 0201 	bic.w	r2, r3, #1
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4a24      	ldr	r2, [pc, #144]	; (80086f4 <TIM_TI1_SetConfig+0xbc>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <TIM_TI1_SetConfig+0x56>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866c:	d00f      	beq.n	800868e <TIM_TI1_SetConfig+0x56>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a21      	ldr	r2, [pc, #132]	; (80086f8 <TIM_TI1_SetConfig+0xc0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00b      	beq.n	800868e <TIM_TI1_SetConfig+0x56>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <TIM_TI1_SetConfig+0xc4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d007      	beq.n	800868e <TIM_TI1_SetConfig+0x56>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	4a1f      	ldr	r2, [pc, #124]	; (8008700 <TIM_TI1_SetConfig+0xc8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d003      	beq.n	800868e <TIM_TI1_SetConfig+0x56>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4a1e      	ldr	r2, [pc, #120]	; (8008704 <TIM_TI1_SetConfig+0xcc>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d101      	bne.n	8008692 <TIM_TI1_SetConfig+0x5a>
 800868e:	2301      	movs	r3, #1
 8008690:	e000      	b.n	8008694 <TIM_TI1_SetConfig+0x5c>
 8008692:	2300      	movs	r3, #0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d008      	beq.n	80086aa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f023 0303 	bic.w	r3, r3, #3
 800869e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	e003      	b.n	80086b2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f023 030a 	bic.w	r3, r3, #10
 80086cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f003 030a 	and.w	r3, r3, #10
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	621a      	str	r2, [r3, #32]
}
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40010000 	.word	0x40010000
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40014000 	.word	0x40014000

08008708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	f023 0201 	bic.w	r2, r3, #1
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f023 030a 	bic.w	r3, r3, #10
 8008744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008766:	b480      	push	{r7}
 8008768:	b087      	sub	sp, #28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	f023 0210 	bic.w	r2, r3, #16
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	021b      	lsls	r3, r3, #8
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	031b      	lsls	r3, r3, #12
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	621a      	str	r2, [r3, #32]
}
 80087d4:	bf00      	nop
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f023 0210 	bic.w	r2, r3, #16
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800880a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	031b      	lsls	r3, r3, #12
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800881c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	4313      	orrs	r3, r2
 8008826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	621a      	str	r2, [r3, #32]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f023 0303 	bic.w	r3, r3, #3
 800886c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800887c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	b2db      	uxtb	r3, r3
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008890:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	4313      	orrs	r3, r2
 800889e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	621a      	str	r2, [r3, #32]
}
 80088ac:	bf00      	nop
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	031b      	lsls	r3, r3, #12
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	4313      	orrs	r3, r2
 8008902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800890a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	031b      	lsls	r3, r3, #12
 8008910:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	f043 0307 	orr.w	r3, r3, #7
 8008954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	609a      	str	r2, [r3, #8]
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	021a      	lsls	r2, r3, #8
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	431a      	orrs	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4313      	orrs	r3, r2
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	609a      	str	r2, [r3, #8]
}
 800899c:	bf00      	nop
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2201      	movs	r2, #1
 80089bc:	fa02 f303 	lsl.w	r3, r2, r3
 80089c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a1a      	ldr	r2, [r3, #32]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	43db      	mvns	r3, r3
 80089ca:	401a      	ands	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f003 031f 	and.w	r3, r3, #31
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	fa01 f303 	lsl.w	r3, r1, r3
 80089e0:	431a      	orrs	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
	...

080089f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d101      	bne.n	8008a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e050      	b.n	8008aae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a1c      	ldr	r2, [pc, #112]	; (8008abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d018      	beq.n	8008a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a58:	d013      	beq.n	8008a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a18      	ldr	r2, [pc, #96]	; (8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d00e      	beq.n	8008a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a16      	ldr	r2, [pc, #88]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d009      	beq.n	8008a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d004      	beq.n	8008a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a13      	ldr	r2, [pc, #76]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d10c      	bne.n	8008a9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40010000 	.word	0x40010000
 8008ac0:	40000400 	.word	0x40000400
 8008ac4:	40000800 	.word	0x40000800
 8008ac8:	40000c00 	.word	0x40000c00
 8008acc:	40014000 	.word	0x40014000

08008ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e03f      	b.n	8008b8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7fa fab4 	bl	800308c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2224      	movs	r2, #36	; 0x24
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fcbf 	bl	80094c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	691a      	ldr	r2, [r3, #16]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d130      	bne.n	8008c0e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <HAL_UART_Transmit_IT+0x26>
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e029      	b.n	8008c10 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_UART_Transmit_IT+0x38>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e022      	b.n	8008c10 <HAL_UART_Transmit_IT+0x7e>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	88fa      	ldrh	r2, [r7, #6]
 8008bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	88fa      	ldrh	r2, [r7, #6]
 8008be2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2221      	movs	r2, #33	; 0x21
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e000      	b.n	8008c10 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008c0e:	2302      	movs	r3, #2
  }
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b0ba      	sub	sp, #232	; 0xe8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10f      	bne.n	8008c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d009      	beq.n	8008c82 <HAL_UART_IRQHandler+0x66>
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fb65 	bl	800934a <UART_Receive_IT>
      return;
 8008c80:	e256      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80de 	beq.w	8008e48 <HAL_UART_IRQHandler+0x22c>
 8008c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d106      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 80d1 	beq.w	8008e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <HAL_UART_IRQHandler+0xae>
 8008cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f043 0201 	orr.w	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00b      	beq.n	8008cee <HAL_UART_IRQHandler+0xd2>
 8008cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f043 0202 	orr.w	r2, r3, #2
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <HAL_UART_IRQHandler+0xf6>
 8008cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	f043 0204 	orr.w	r2, r3, #4
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d011      	beq.n	8008d42 <HAL_UART_IRQHandler+0x126>
 8008d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	f043 0208 	orr.w	r2, r3, #8
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 81ed 	beq.w	8009126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <HAL_UART_IRQHandler+0x14e>
 8008d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d5c:	f003 0320 	and.w	r3, r3, #32
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 faf0 	bl	800934a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d74:	2b40      	cmp	r3, #64	; 0x40
 8008d76:	bf0c      	ite	eq
 8008d78:	2301      	moveq	r3, #1
 8008d7a:	2300      	movne	r3, #0
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	f003 0308 	and.w	r3, r3, #8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <HAL_UART_IRQHandler+0x17a>
 8008d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d04f      	beq.n	8008e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f9f8 	bl	800918c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d141      	bne.n	8008e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3314      	adds	r3, #20
 8008db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1d9      	bne.n	8008daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d013      	beq.n	8008e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	4a7d      	ldr	r2, [pc, #500]	; (8008ff8 <HAL_UART_IRQHandler+0x3dc>)
 8008e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fa fdd6 	bl	80039bc <HAL_DMA_Abort_IT>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e24:	e00e      	b.n	8008e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f99a 	bl	8009160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2c:	e00a      	b.n	8008e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f996 	bl	8009160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e34:	e006      	b.n	8008e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f992 	bl	8009160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e42:	e170      	b.n	8009126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e44:	bf00      	nop
    return;
 8008e46:	e16e      	b.n	8009126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	f040 814a 	bne.w	80090e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8143 	beq.w	80090e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e64:	f003 0310 	and.w	r3, r3, #16
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 813c 	beq.w	80090e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60bb      	str	r3, [r7, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	60bb      	str	r3, [r7, #8]
 8008e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8e:	2b40      	cmp	r3, #64	; 0x40
 8008e90:	f040 80b4 	bne.w	8008ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8140 	beq.w	800912a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	f080 8139 	bcs.w	800912a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eca:	f000 8088 	beq.w	8008fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1d9      	bne.n	8008ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3314      	adds	r3, #20
 8008f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3314      	adds	r3, #20
 8008f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e1      	bne.n	8008f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3314      	adds	r3, #20
 8008f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e3      	bne.n	8008f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fae:	f023 0310 	bic.w	r3, r3, #16
 8008fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	330c      	adds	r3, #12
 8008fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e3      	bne.n	8008f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fa fc7f 	bl	80038dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8c0 	bl	8009174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ff4:	e099      	b.n	800912a <HAL_UART_IRQHandler+0x50e>
 8008ff6:	bf00      	nop
 8008ff8:	08009253 	.word	0x08009253
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009004:	b29b      	uxth	r3, r3
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 808b 	beq.w	800912e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 8086 	beq.w	800912e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	330c      	adds	r3, #12
 8009028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	330c      	adds	r3, #12
 8009042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009046:	647a      	str	r2, [r7, #68]	; 0x44
 8009048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800904c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e3      	bne.n	8009022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3314      	adds	r3, #20
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	623b      	str	r3, [r7, #32]
   return(result);
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3314      	adds	r3, #20
 800907a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800907e:	633a      	str	r2, [r7, #48]	; 0x30
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e3      	bne.n	800905a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	330c      	adds	r3, #12
 80090a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f023 0310 	bic.w	r3, r3, #16
 80090b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	330c      	adds	r3, #12
 80090c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80090c4:	61fa      	str	r2, [r7, #28]
 80090c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	69b9      	ldr	r1, [r7, #24]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	617b      	str	r3, [r7, #20]
   return(result);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e3      	bne.n	80090a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f848 	bl	8009174 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090e4:	e023      	b.n	800912e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d009      	beq.n	8009106 <HAL_UART_IRQHandler+0x4ea>
 80090f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f8bb 	bl	800927a <UART_Transmit_IT>
    return;
 8009104:	e014      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00e      	beq.n	8009130 <HAL_UART_IRQHandler+0x514>
 8009112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d008      	beq.n	8009130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f8fb 	bl	800931a <UART_EndTransmit_IT>
    return;
 8009124:	e004      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
    return;
 8009126:	bf00      	nop
 8009128:	e002      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
      return;
 800912a:	bf00      	nop
 800912c:	e000      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
      return;
 800912e:	bf00      	nop
  }
}
 8009130:	37e8      	adds	r7, #232	; 0xe8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop

08009138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b095      	sub	sp, #84	; 0x54
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	330c      	adds	r3, #12
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	330c      	adds	r3, #12
 80091b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091b4:	643a      	str	r2, [r7, #64]	; 0x40
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e5      	bne.n	8009194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3314      	adds	r3, #20
 80091ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	f023 0301 	bic.w	r3, r3, #1
 80091de:	64bb      	str	r3, [r7, #72]	; 0x48
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3314      	adds	r3, #20
 80091e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e5      	bne.n	80091c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009200:	2b01      	cmp	r3, #1
 8009202:	d119      	bne.n	8009238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	60bb      	str	r3, [r7, #8]
   return(result);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f023 0310 	bic.w	r3, r3, #16
 800921a:	647b      	str	r3, [r7, #68]	; 0x44
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	330c      	adds	r3, #12
 8009222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009224:	61ba      	str	r2, [r7, #24]
 8009226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6979      	ldr	r1, [r7, #20]
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	613b      	str	r3, [r7, #16]
   return(result);
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e5      	bne.n	8009204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009246:	bf00      	nop
 8009248:	3754      	adds	r7, #84	; 0x54
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7ff ff77 	bl	8009160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b21      	cmp	r3, #33	; 0x21
 800928c:	d13e      	bne.n	800930c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009296:	d114      	bne.n	80092c2 <UART_Transmit_IT+0x48>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d110      	bne.n	80092c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	1c9a      	adds	r2, r3, #2
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	621a      	str	r2, [r3, #32]
 80092c0:	e008      	b.n	80092d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	1c59      	adds	r1, r3, #1
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	6211      	str	r1, [r2, #32]
 80092cc:	781a      	ldrb	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092d8:	b29b      	uxth	r3, r3
 80092da:	3b01      	subs	r3, #1
 80092dc:	b29b      	uxth	r3, r3
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	4619      	mov	r1, r3
 80092e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10f      	bne.n	8009308 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68da      	ldr	r2, [r3, #12]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009306:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	e000      	b.n	800930e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800930c:	2302      	movs	r3, #2
  }
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2220      	movs	r2, #32
 8009336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff fefc 	bl	8009138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b08c      	sub	sp, #48	; 0x30
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b22      	cmp	r3, #34	; 0x22
 800935c:	f040 80ab 	bne.w	80094b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009368:	d117      	bne.n	800939a <UART_Receive_IT+0x50>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d113      	bne.n	800939a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009372:	2300      	movs	r3, #0
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	b29b      	uxth	r3, r3
 8009384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009388:	b29a      	uxth	r2, r3
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009392:	1c9a      	adds	r2, r3, #2
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	629a      	str	r2, [r3, #40]	; 0x28
 8009398:	e026      	b.n	80093e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093a0:	2300      	movs	r3, #0
 80093a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ac:	d007      	beq.n	80093be <UART_Receive_IT+0x74>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <UART_Receive_IT+0x82>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d106      	bne.n	80093cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	e008      	b.n	80093de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4619      	mov	r1, r3
 80093f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d15a      	bne.n	80094b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0220 	bic.w	r2, r2, #32
 800940a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800941a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695a      	ldr	r2, [r3, #20]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2220      	movs	r2, #32
 8009430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	2b01      	cmp	r3, #1
 800943a:	d135      	bne.n	80094a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	330c      	adds	r3, #12
 8009448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	613b      	str	r3, [r7, #16]
   return(result);
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f023 0310 	bic.w	r3, r3, #16
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	330c      	adds	r3, #12
 8009460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009462:	623a      	str	r2, [r7, #32]
 8009464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	69f9      	ldr	r1, [r7, #28]
 8009468:	6a3a      	ldr	r2, [r7, #32]
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e5      	bne.n	8009442 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b10      	cmp	r3, #16
 8009482:	d10a      	bne.n	800949a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009484:	2300      	movs	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff fe67 	bl	8009174 <HAL_UARTEx_RxEventCallback>
 80094a6:	e002      	b.n	80094ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff fe4f 	bl	800914c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	e002      	b.n	80094b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	e000      	b.n	80094b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094b6:	2302      	movs	r3, #2
  }
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3730      	adds	r7, #48	; 0x30
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094c4:	b0c0      	sub	sp, #256	; 0x100
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094dc:	68d9      	ldr	r1, [r3, #12]
 80094de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	ea40 0301 	orr.w	r3, r0, r1
 80094e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	431a      	orrs	r2, r3
 80094f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	431a      	orrs	r2, r3
 8009500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	4313      	orrs	r3, r2
 8009508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009518:	f021 010c 	bic.w	r1, r1, #12
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009526:	430b      	orrs	r3, r1
 8009528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800952a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953a:	6999      	ldr	r1, [r3, #24]
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	ea40 0301 	orr.w	r3, r0, r1
 8009546:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b8f      	ldr	r3, [pc, #572]	; (800978c <UART_SetConfig+0x2cc>)
 8009550:	429a      	cmp	r2, r3
 8009552:	d005      	beq.n	8009560 <UART_SetConfig+0xa0>
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	4b8d      	ldr	r3, [pc, #564]	; (8009790 <UART_SetConfig+0x2d0>)
 800955c:	429a      	cmp	r2, r3
 800955e:	d104      	bne.n	800956a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009560:	f7fd ff3a 	bl	80073d8 <HAL_RCC_GetPCLK2Freq>
 8009564:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009568:	e003      	b.n	8009572 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800956a:	f7fd ff21 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 800956e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800957c:	f040 810c 	bne.w	8009798 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009584:	2200      	movs	r2, #0
 8009586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800958a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800958e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009592:	4622      	mov	r2, r4
 8009594:	462b      	mov	r3, r5
 8009596:	1891      	adds	r1, r2, r2
 8009598:	65b9      	str	r1, [r7, #88]	; 0x58
 800959a:	415b      	adcs	r3, r3
 800959c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800959e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095a2:	4621      	mov	r1, r4
 80095a4:	eb12 0801 	adds.w	r8, r2, r1
 80095a8:	4629      	mov	r1, r5
 80095aa:	eb43 0901 	adc.w	r9, r3, r1
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095c2:	4690      	mov	r8, r2
 80095c4:	4699      	mov	r9, r3
 80095c6:	4623      	mov	r3, r4
 80095c8:	eb18 0303 	adds.w	r3, r8, r3
 80095cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095d0:	462b      	mov	r3, r5
 80095d2:	eb49 0303 	adc.w	r3, r9, r3
 80095d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80095e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80095ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80095ee:	460b      	mov	r3, r1
 80095f0:	18db      	adds	r3, r3, r3
 80095f2:	653b      	str	r3, [r7, #80]	; 0x50
 80095f4:	4613      	mov	r3, r2
 80095f6:	eb42 0303 	adc.w	r3, r2, r3
 80095fa:	657b      	str	r3, [r7, #84]	; 0x54
 80095fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009600:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009604:	f7f7 fb28 	bl	8000c58 <__aeabi_uldivmod>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4b61      	ldr	r3, [pc, #388]	; (8009794 <UART_SetConfig+0x2d4>)
 800960e:	fba3 2302 	umull	r2, r3, r3, r2
 8009612:	095b      	lsrs	r3, r3, #5
 8009614:	011c      	lsls	r4, r3, #4
 8009616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800961a:	2200      	movs	r2, #0
 800961c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009620:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009624:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009628:	4642      	mov	r2, r8
 800962a:	464b      	mov	r3, r9
 800962c:	1891      	adds	r1, r2, r2
 800962e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009630:	415b      	adcs	r3, r3
 8009632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009634:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009638:	4641      	mov	r1, r8
 800963a:	eb12 0a01 	adds.w	sl, r2, r1
 800963e:	4649      	mov	r1, r9
 8009640:	eb43 0b01 	adc.w	fp, r3, r1
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	f04f 0300 	mov.w	r3, #0
 800964c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009650:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009658:	4692      	mov	sl, r2
 800965a:	469b      	mov	fp, r3
 800965c:	4643      	mov	r3, r8
 800965e:	eb1a 0303 	adds.w	r3, sl, r3
 8009662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009666:	464b      	mov	r3, r9
 8009668:	eb4b 0303 	adc.w	r3, fp, r3
 800966c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800967c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009680:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009684:	460b      	mov	r3, r1
 8009686:	18db      	adds	r3, r3, r3
 8009688:	643b      	str	r3, [r7, #64]	; 0x40
 800968a:	4613      	mov	r3, r2
 800968c:	eb42 0303 	adc.w	r3, r2, r3
 8009690:	647b      	str	r3, [r7, #68]	; 0x44
 8009692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800969a:	f7f7 fadd 	bl	8000c58 <__aeabi_uldivmod>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4611      	mov	r1, r2
 80096a4:	4b3b      	ldr	r3, [pc, #236]	; (8009794 <UART_SetConfig+0x2d4>)
 80096a6:	fba3 2301 	umull	r2, r3, r3, r1
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	2264      	movs	r2, #100	; 0x64
 80096ae:	fb02 f303 	mul.w	r3, r2, r3
 80096b2:	1acb      	subs	r3, r1, r3
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096ba:	4b36      	ldr	r3, [pc, #216]	; (8009794 <UART_SetConfig+0x2d4>)
 80096bc:	fba3 2302 	umull	r2, r3, r3, r2
 80096c0:	095b      	lsrs	r3, r3, #5
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096c8:	441c      	add	r4, r3
 80096ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80096d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80096dc:	4642      	mov	r2, r8
 80096de:	464b      	mov	r3, r9
 80096e0:	1891      	adds	r1, r2, r2
 80096e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80096e4:	415b      	adcs	r3, r3
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096ec:	4641      	mov	r1, r8
 80096ee:	1851      	adds	r1, r2, r1
 80096f0:	6339      	str	r1, [r7, #48]	; 0x30
 80096f2:	4649      	mov	r1, r9
 80096f4:	414b      	adcs	r3, r1
 80096f6:	637b      	str	r3, [r7, #52]	; 0x34
 80096f8:	f04f 0200 	mov.w	r2, #0
 80096fc:	f04f 0300 	mov.w	r3, #0
 8009700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009704:	4659      	mov	r1, fp
 8009706:	00cb      	lsls	r3, r1, #3
 8009708:	4651      	mov	r1, sl
 800970a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800970e:	4651      	mov	r1, sl
 8009710:	00ca      	lsls	r2, r1, #3
 8009712:	4610      	mov	r0, r2
 8009714:	4619      	mov	r1, r3
 8009716:	4603      	mov	r3, r0
 8009718:	4642      	mov	r2, r8
 800971a:	189b      	adds	r3, r3, r2
 800971c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009720:	464b      	mov	r3, r9
 8009722:	460a      	mov	r2, r1
 8009724:	eb42 0303 	adc.w	r3, r2, r3
 8009728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009738:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800973c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009740:	460b      	mov	r3, r1
 8009742:	18db      	adds	r3, r3, r3
 8009744:	62bb      	str	r3, [r7, #40]	; 0x28
 8009746:	4613      	mov	r3, r2
 8009748:	eb42 0303 	adc.w	r3, r2, r3
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800974e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009752:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009756:	f7f7 fa7f 	bl	8000c58 <__aeabi_uldivmod>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <UART_SetConfig+0x2d4>)
 8009760:	fba3 1302 	umull	r1, r3, r3, r2
 8009764:	095b      	lsrs	r3, r3, #5
 8009766:	2164      	movs	r1, #100	; 0x64
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	3332      	adds	r3, #50	; 0x32
 8009772:	4a08      	ldr	r2, [pc, #32]	; (8009794 <UART_SetConfig+0x2d4>)
 8009774:	fba2 2303 	umull	r2, r3, r2, r3
 8009778:	095b      	lsrs	r3, r3, #5
 800977a:	f003 0207 	and.w	r2, r3, #7
 800977e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4422      	add	r2, r4
 8009786:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009788:	e105      	b.n	8009996 <UART_SetConfig+0x4d6>
 800978a:	bf00      	nop
 800978c:	40011000 	.word	0x40011000
 8009790:	40011400 	.word	0x40011400
 8009794:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800979c:	2200      	movs	r2, #0
 800979e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097aa:	4642      	mov	r2, r8
 80097ac:	464b      	mov	r3, r9
 80097ae:	1891      	adds	r1, r2, r2
 80097b0:	6239      	str	r1, [r7, #32]
 80097b2:	415b      	adcs	r3, r3
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
 80097b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097ba:	4641      	mov	r1, r8
 80097bc:	1854      	adds	r4, r2, r1
 80097be:	4649      	mov	r1, r9
 80097c0:	eb43 0501 	adc.w	r5, r3, r1
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	f04f 0300 	mov.w	r3, #0
 80097cc:	00eb      	lsls	r3, r5, #3
 80097ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097d2:	00e2      	lsls	r2, r4, #3
 80097d4:	4614      	mov	r4, r2
 80097d6:	461d      	mov	r5, r3
 80097d8:	4643      	mov	r3, r8
 80097da:	18e3      	adds	r3, r4, r3
 80097dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097e0:	464b      	mov	r3, r9
 80097e2:	eb45 0303 	adc.w	r3, r5, r3
 80097e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	f04f 0300 	mov.w	r3, #0
 8009802:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009806:	4629      	mov	r1, r5
 8009808:	008b      	lsls	r3, r1, #2
 800980a:	4621      	mov	r1, r4
 800980c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009810:	4621      	mov	r1, r4
 8009812:	008a      	lsls	r2, r1, #2
 8009814:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009818:	f7f7 fa1e 	bl	8000c58 <__aeabi_uldivmod>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4b60      	ldr	r3, [pc, #384]	; (80099a4 <UART_SetConfig+0x4e4>)
 8009822:	fba3 2302 	umull	r2, r3, r3, r2
 8009826:	095b      	lsrs	r3, r3, #5
 8009828:	011c      	lsls	r4, r3, #4
 800982a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800982e:	2200      	movs	r2, #0
 8009830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009834:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009838:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800983c:	4642      	mov	r2, r8
 800983e:	464b      	mov	r3, r9
 8009840:	1891      	adds	r1, r2, r2
 8009842:	61b9      	str	r1, [r7, #24]
 8009844:	415b      	adcs	r3, r3
 8009846:	61fb      	str	r3, [r7, #28]
 8009848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800984c:	4641      	mov	r1, r8
 800984e:	1851      	adds	r1, r2, r1
 8009850:	6139      	str	r1, [r7, #16]
 8009852:	4649      	mov	r1, r9
 8009854:	414b      	adcs	r3, r1
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	f04f 0200 	mov.w	r2, #0
 800985c:	f04f 0300 	mov.w	r3, #0
 8009860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009864:	4659      	mov	r1, fp
 8009866:	00cb      	lsls	r3, r1, #3
 8009868:	4651      	mov	r1, sl
 800986a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800986e:	4651      	mov	r1, sl
 8009870:	00ca      	lsls	r2, r1, #3
 8009872:	4610      	mov	r0, r2
 8009874:	4619      	mov	r1, r3
 8009876:	4603      	mov	r3, r0
 8009878:	4642      	mov	r2, r8
 800987a:	189b      	adds	r3, r3, r2
 800987c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009880:	464b      	mov	r3, r9
 8009882:	460a      	mov	r2, r1
 8009884:	eb42 0303 	adc.w	r3, r2, r3
 8009888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800988c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	67bb      	str	r3, [r7, #120]	; 0x78
 8009896:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009898:	f04f 0200 	mov.w	r2, #0
 800989c:	f04f 0300 	mov.w	r3, #0
 80098a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098a4:	4649      	mov	r1, r9
 80098a6:	008b      	lsls	r3, r1, #2
 80098a8:	4641      	mov	r1, r8
 80098aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098ae:	4641      	mov	r1, r8
 80098b0:	008a      	lsls	r2, r1, #2
 80098b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098b6:	f7f7 f9cf 	bl	8000c58 <__aeabi_uldivmod>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4b39      	ldr	r3, [pc, #228]	; (80099a4 <UART_SetConfig+0x4e4>)
 80098c0:	fba3 1302 	umull	r1, r3, r3, r2
 80098c4:	095b      	lsrs	r3, r3, #5
 80098c6:	2164      	movs	r1, #100	; 0x64
 80098c8:	fb01 f303 	mul.w	r3, r1, r3
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	011b      	lsls	r3, r3, #4
 80098d0:	3332      	adds	r3, #50	; 0x32
 80098d2:	4a34      	ldr	r2, [pc, #208]	; (80099a4 <UART_SetConfig+0x4e4>)
 80098d4:	fba2 2303 	umull	r2, r3, r2, r3
 80098d8:	095b      	lsrs	r3, r3, #5
 80098da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098de:	441c      	add	r4, r3
 80098e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098e4:	2200      	movs	r2, #0
 80098e6:	673b      	str	r3, [r7, #112]	; 0x70
 80098e8:	677a      	str	r2, [r7, #116]	; 0x74
 80098ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80098ee:	4642      	mov	r2, r8
 80098f0:	464b      	mov	r3, r9
 80098f2:	1891      	adds	r1, r2, r2
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	415b      	adcs	r3, r3
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098fe:	4641      	mov	r1, r8
 8009900:	1851      	adds	r1, r2, r1
 8009902:	6039      	str	r1, [r7, #0]
 8009904:	4649      	mov	r1, r9
 8009906:	414b      	adcs	r3, r1
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	f04f 0200 	mov.w	r2, #0
 800990e:	f04f 0300 	mov.w	r3, #0
 8009912:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009916:	4659      	mov	r1, fp
 8009918:	00cb      	lsls	r3, r1, #3
 800991a:	4651      	mov	r1, sl
 800991c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009920:	4651      	mov	r1, sl
 8009922:	00ca      	lsls	r2, r1, #3
 8009924:	4610      	mov	r0, r2
 8009926:	4619      	mov	r1, r3
 8009928:	4603      	mov	r3, r0
 800992a:	4642      	mov	r2, r8
 800992c:	189b      	adds	r3, r3, r2
 800992e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009930:	464b      	mov	r3, r9
 8009932:	460a      	mov	r2, r1
 8009934:	eb42 0303 	adc.w	r3, r2, r3
 8009938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800993a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	663b      	str	r3, [r7, #96]	; 0x60
 8009944:	667a      	str	r2, [r7, #100]	; 0x64
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009952:	4649      	mov	r1, r9
 8009954:	008b      	lsls	r3, r1, #2
 8009956:	4641      	mov	r1, r8
 8009958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800995c:	4641      	mov	r1, r8
 800995e:	008a      	lsls	r2, r1, #2
 8009960:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009964:	f7f7 f978 	bl	8000c58 <__aeabi_uldivmod>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <UART_SetConfig+0x4e4>)
 800996e:	fba3 1302 	umull	r1, r3, r3, r2
 8009972:	095b      	lsrs	r3, r3, #5
 8009974:	2164      	movs	r1, #100	; 0x64
 8009976:	fb01 f303 	mul.w	r3, r1, r3
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	011b      	lsls	r3, r3, #4
 800997e:	3332      	adds	r3, #50	; 0x32
 8009980:	4a08      	ldr	r2, [pc, #32]	; (80099a4 <UART_SetConfig+0x4e4>)
 8009982:	fba2 2303 	umull	r2, r3, r2, r3
 8009986:	095b      	lsrs	r3, r3, #5
 8009988:	f003 020f 	and.w	r2, r3, #15
 800998c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4422      	add	r2, r4
 8009994:	609a      	str	r2, [r3, #8]
}
 8009996:	bf00      	nop
 8009998:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800999c:	46bd      	mov	sp, r7
 800999e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099a2:	bf00      	nop
 80099a4:	51eb851f 	.word	0x51eb851f

080099a8 <__errno>:
 80099a8:	4b01      	ldr	r3, [pc, #4]	; (80099b0 <__errno+0x8>)
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20000014 	.word	0x20000014

080099b4 <__libc_init_array>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	4d0d      	ldr	r5, [pc, #52]	; (80099ec <__libc_init_array+0x38>)
 80099b8:	4c0d      	ldr	r4, [pc, #52]	; (80099f0 <__libc_init_array+0x3c>)
 80099ba:	1b64      	subs	r4, r4, r5
 80099bc:	10a4      	asrs	r4, r4, #2
 80099be:	2600      	movs	r6, #0
 80099c0:	42a6      	cmp	r6, r4
 80099c2:	d109      	bne.n	80099d8 <__libc_init_array+0x24>
 80099c4:	4d0b      	ldr	r5, [pc, #44]	; (80099f4 <__libc_init_array+0x40>)
 80099c6:	4c0c      	ldr	r4, [pc, #48]	; (80099f8 <__libc_init_array+0x44>)
 80099c8:	f003 fd2a 	bl	800d420 <_init>
 80099cc:	1b64      	subs	r4, r4, r5
 80099ce:	10a4      	asrs	r4, r4, #2
 80099d0:	2600      	movs	r6, #0
 80099d2:	42a6      	cmp	r6, r4
 80099d4:	d105      	bne.n	80099e2 <__libc_init_array+0x2e>
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099dc:	4798      	blx	r3
 80099de:	3601      	adds	r6, #1
 80099e0:	e7ee      	b.n	80099c0 <__libc_init_array+0xc>
 80099e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e6:	4798      	blx	r3
 80099e8:	3601      	adds	r6, #1
 80099ea:	e7f2      	b.n	80099d2 <__libc_init_array+0x1e>
 80099ec:	0800d9b0 	.word	0x0800d9b0
 80099f0:	0800d9b0 	.word	0x0800d9b0
 80099f4:	0800d9b0 	.word	0x0800d9b0
 80099f8:	0800d9b4 	.word	0x0800d9b4

080099fc <memset>:
 80099fc:	4402      	add	r2, r0
 80099fe:	4603      	mov	r3, r0
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d100      	bne.n	8009a06 <memset+0xa>
 8009a04:	4770      	bx	lr
 8009a06:	f803 1b01 	strb.w	r1, [r3], #1
 8009a0a:	e7f9      	b.n	8009a00 <memset+0x4>

08009a0c <__cvt>:
 8009a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	ec55 4b10 	vmov	r4, r5, d0
 8009a14:	2d00      	cmp	r5, #0
 8009a16:	460e      	mov	r6, r1
 8009a18:	4619      	mov	r1, r3
 8009a1a:	462b      	mov	r3, r5
 8009a1c:	bfbb      	ittet	lt
 8009a1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a22:	461d      	movlt	r5, r3
 8009a24:	2300      	movge	r3, #0
 8009a26:	232d      	movlt	r3, #45	; 0x2d
 8009a28:	700b      	strb	r3, [r1, #0]
 8009a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a30:	4691      	mov	r9, r2
 8009a32:	f023 0820 	bic.w	r8, r3, #32
 8009a36:	bfbc      	itt	lt
 8009a38:	4622      	movlt	r2, r4
 8009a3a:	4614      	movlt	r4, r2
 8009a3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a40:	d005      	beq.n	8009a4e <__cvt+0x42>
 8009a42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a46:	d100      	bne.n	8009a4a <__cvt+0x3e>
 8009a48:	3601      	adds	r6, #1
 8009a4a:	2102      	movs	r1, #2
 8009a4c:	e000      	b.n	8009a50 <__cvt+0x44>
 8009a4e:	2103      	movs	r1, #3
 8009a50:	ab03      	add	r3, sp, #12
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	ab02      	add	r3, sp, #8
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	ec45 4b10 	vmov	d0, r4, r5
 8009a5c:	4653      	mov	r3, sl
 8009a5e:	4632      	mov	r2, r6
 8009a60:	f000 fe1a 	bl	800a698 <_dtoa_r>
 8009a64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a68:	4607      	mov	r7, r0
 8009a6a:	d102      	bne.n	8009a72 <__cvt+0x66>
 8009a6c:	f019 0f01 	tst.w	r9, #1
 8009a70:	d022      	beq.n	8009ab8 <__cvt+0xac>
 8009a72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a76:	eb07 0906 	add.w	r9, r7, r6
 8009a7a:	d110      	bne.n	8009a9e <__cvt+0x92>
 8009a7c:	783b      	ldrb	r3, [r7, #0]
 8009a7e:	2b30      	cmp	r3, #48	; 0x30
 8009a80:	d10a      	bne.n	8009a98 <__cvt+0x8c>
 8009a82:	2200      	movs	r2, #0
 8009a84:	2300      	movs	r3, #0
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f7 f825 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a8e:	b918      	cbnz	r0, 8009a98 <__cvt+0x8c>
 8009a90:	f1c6 0601 	rsb	r6, r6, #1
 8009a94:	f8ca 6000 	str.w	r6, [sl]
 8009a98:	f8da 3000 	ldr.w	r3, [sl]
 8009a9c:	4499      	add	r9, r3
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7f7 f817 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aaa:	b108      	cbz	r0, 8009ab0 <__cvt+0xa4>
 8009aac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ab0:	2230      	movs	r2, #48	; 0x30
 8009ab2:	9b03      	ldr	r3, [sp, #12]
 8009ab4:	454b      	cmp	r3, r9
 8009ab6:	d307      	bcc.n	8009ac8 <__cvt+0xbc>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009abc:	1bdb      	subs	r3, r3, r7
 8009abe:	4638      	mov	r0, r7
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	b004      	add	sp, #16
 8009ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac8:	1c59      	adds	r1, r3, #1
 8009aca:	9103      	str	r1, [sp, #12]
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	e7f0      	b.n	8009ab2 <__cvt+0xa6>

08009ad0 <__exponent>:
 8009ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	bfb8      	it	lt
 8009ad8:	4249      	neglt	r1, r1
 8009ada:	f803 2b02 	strb.w	r2, [r3], #2
 8009ade:	bfb4      	ite	lt
 8009ae0:	222d      	movlt	r2, #45	; 0x2d
 8009ae2:	222b      	movge	r2, #43	; 0x2b
 8009ae4:	2909      	cmp	r1, #9
 8009ae6:	7042      	strb	r2, [r0, #1]
 8009ae8:	dd2a      	ble.n	8009b40 <__exponent+0x70>
 8009aea:	f10d 0407 	add.w	r4, sp, #7
 8009aee:	46a4      	mov	ip, r4
 8009af0:	270a      	movs	r7, #10
 8009af2:	46a6      	mov	lr, r4
 8009af4:	460a      	mov	r2, r1
 8009af6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009afa:	fb07 1516 	mls	r5, r7, r6, r1
 8009afe:	3530      	adds	r5, #48	; 0x30
 8009b00:	2a63      	cmp	r2, #99	; 0x63
 8009b02:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009b06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	dcf1      	bgt.n	8009af2 <__exponent+0x22>
 8009b0e:	3130      	adds	r1, #48	; 0x30
 8009b10:	f1ae 0502 	sub.w	r5, lr, #2
 8009b14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b18:	1c44      	adds	r4, r0, #1
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	4561      	cmp	r1, ip
 8009b1e:	d30a      	bcc.n	8009b36 <__exponent+0x66>
 8009b20:	f10d 0209 	add.w	r2, sp, #9
 8009b24:	eba2 020e 	sub.w	r2, r2, lr
 8009b28:	4565      	cmp	r5, ip
 8009b2a:	bf88      	it	hi
 8009b2c:	2200      	movhi	r2, #0
 8009b2e:	4413      	add	r3, r2
 8009b30:	1a18      	subs	r0, r3, r0
 8009b32:	b003      	add	sp, #12
 8009b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b3e:	e7ed      	b.n	8009b1c <__exponent+0x4c>
 8009b40:	2330      	movs	r3, #48	; 0x30
 8009b42:	3130      	adds	r1, #48	; 0x30
 8009b44:	7083      	strb	r3, [r0, #2]
 8009b46:	70c1      	strb	r1, [r0, #3]
 8009b48:	1d03      	adds	r3, r0, #4
 8009b4a:	e7f1      	b.n	8009b30 <__exponent+0x60>

08009b4c <_printf_float>:
 8009b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b50:	ed2d 8b02 	vpush	{d8}
 8009b54:	b08d      	sub	sp, #52	; 0x34
 8009b56:	460c      	mov	r4, r1
 8009b58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b5c:	4616      	mov	r6, r2
 8009b5e:	461f      	mov	r7, r3
 8009b60:	4605      	mov	r5, r0
 8009b62:	f001 fd3f 	bl	800b5e4 <_localeconv_r>
 8009b66:	f8d0 a000 	ldr.w	sl, [r0]
 8009b6a:	4650      	mov	r0, sl
 8009b6c:	f7f6 fb38 	bl	80001e0 <strlen>
 8009b70:	2300      	movs	r3, #0
 8009b72:	930a      	str	r3, [sp, #40]	; 0x28
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	f8d8 3000 	ldr.w	r3, [r8]
 8009b7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b80:	3307      	adds	r3, #7
 8009b82:	f023 0307 	bic.w	r3, r3, #7
 8009b86:	f103 0208 	add.w	r2, r3, #8
 8009b8a:	f8c8 2000 	str.w	r2, [r8]
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b9e:	9307      	str	r3, [sp, #28]
 8009ba0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ba4:	ee08 0a10 	vmov	s16, r0
 8009ba8:	4b9f      	ldr	r3, [pc, #636]	; (8009e28 <_printf_float+0x2dc>)
 8009baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bb2:	f7f6 ffc3 	bl	8000b3c <__aeabi_dcmpun>
 8009bb6:	bb88      	cbnz	r0, 8009c1c <_printf_float+0xd0>
 8009bb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bbc:	4b9a      	ldr	r3, [pc, #616]	; (8009e28 <_printf_float+0x2dc>)
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bc2:	f7f6 ff9d 	bl	8000b00 <__aeabi_dcmple>
 8009bc6:	bb48      	cbnz	r0, 8009c1c <_printf_float+0xd0>
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7f6 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8009bd4:	b110      	cbz	r0, 8009bdc <_printf_float+0x90>
 8009bd6:	232d      	movs	r3, #45	; 0x2d
 8009bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bdc:	4b93      	ldr	r3, [pc, #588]	; (8009e2c <_printf_float+0x2e0>)
 8009bde:	4894      	ldr	r0, [pc, #592]	; (8009e30 <_printf_float+0x2e4>)
 8009be0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009be4:	bf94      	ite	ls
 8009be6:	4698      	movls	r8, r3
 8009be8:	4680      	movhi	r8, r0
 8009bea:	2303      	movs	r3, #3
 8009bec:	6123      	str	r3, [r4, #16]
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	f023 0204 	bic.w	r2, r3, #4
 8009bf4:	6022      	str	r2, [r4, #0]
 8009bf6:	f04f 0900 	mov.w	r9, #0
 8009bfa:	9700      	str	r7, [sp, #0]
 8009bfc:	4633      	mov	r3, r6
 8009bfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c00:	4621      	mov	r1, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 f9d8 	bl	8009fb8 <_printf_common>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	f040 8090 	bne.w	8009d2e <_printf_float+0x1e2>
 8009c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c12:	b00d      	add	sp, #52	; 0x34
 8009c14:	ecbd 8b02 	vpop	{d8}
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	4642      	mov	r2, r8
 8009c1e:	464b      	mov	r3, r9
 8009c20:	4640      	mov	r0, r8
 8009c22:	4649      	mov	r1, r9
 8009c24:	f7f6 ff8a 	bl	8000b3c <__aeabi_dcmpun>
 8009c28:	b140      	cbz	r0, 8009c3c <_printf_float+0xf0>
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bfbc      	itt	lt
 8009c30:	232d      	movlt	r3, #45	; 0x2d
 8009c32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c36:	487f      	ldr	r0, [pc, #508]	; (8009e34 <_printf_float+0x2e8>)
 8009c38:	4b7f      	ldr	r3, [pc, #508]	; (8009e38 <_printf_float+0x2ec>)
 8009c3a:	e7d1      	b.n	8009be0 <_printf_float+0x94>
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c42:	9206      	str	r2, [sp, #24]
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	d13f      	bne.n	8009cc8 <_printf_float+0x17c>
 8009c48:	2306      	movs	r3, #6
 8009c4a:	6063      	str	r3, [r4, #4]
 8009c4c:	9b05      	ldr	r3, [sp, #20]
 8009c4e:	6861      	ldr	r1, [r4, #4]
 8009c50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c54:	2300      	movs	r3, #0
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	ab0a      	add	r3, sp, #40	; 0x28
 8009c5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c5e:	ab09      	add	r3, sp, #36	; 0x24
 8009c60:	ec49 8b10 	vmov	d0, r8, r9
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	6022      	str	r2, [r4, #0]
 8009c68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f7ff fecd 	bl	8009a0c <__cvt>
 8009c72:	9b06      	ldr	r3, [sp, #24]
 8009c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c76:	2b47      	cmp	r3, #71	; 0x47
 8009c78:	4680      	mov	r8, r0
 8009c7a:	d108      	bne.n	8009c8e <_printf_float+0x142>
 8009c7c:	1cc8      	adds	r0, r1, #3
 8009c7e:	db02      	blt.n	8009c86 <_printf_float+0x13a>
 8009c80:	6863      	ldr	r3, [r4, #4]
 8009c82:	4299      	cmp	r1, r3
 8009c84:	dd41      	ble.n	8009d0a <_printf_float+0x1be>
 8009c86:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c8a:	fa5f fb8b 	uxtb.w	fp, fp
 8009c8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c92:	d820      	bhi.n	8009cd6 <_printf_float+0x18a>
 8009c94:	3901      	subs	r1, #1
 8009c96:	465a      	mov	r2, fp
 8009c98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c9c:	9109      	str	r1, [sp, #36]	; 0x24
 8009c9e:	f7ff ff17 	bl	8009ad0 <__exponent>
 8009ca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ca4:	1813      	adds	r3, r2, r0
 8009ca6:	2a01      	cmp	r2, #1
 8009ca8:	4681      	mov	r9, r0
 8009caa:	6123      	str	r3, [r4, #16]
 8009cac:	dc02      	bgt.n	8009cb4 <_printf_float+0x168>
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	07d2      	lsls	r2, r2, #31
 8009cb2:	d501      	bpl.n	8009cb8 <_printf_float+0x16c>
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	6123      	str	r3, [r4, #16]
 8009cb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d09c      	beq.n	8009bfa <_printf_float+0xae>
 8009cc0:	232d      	movs	r3, #45	; 0x2d
 8009cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc6:	e798      	b.n	8009bfa <_printf_float+0xae>
 8009cc8:	9a06      	ldr	r2, [sp, #24]
 8009cca:	2a47      	cmp	r2, #71	; 0x47
 8009ccc:	d1be      	bne.n	8009c4c <_printf_float+0x100>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1bc      	bne.n	8009c4c <_printf_float+0x100>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e7b9      	b.n	8009c4a <_printf_float+0xfe>
 8009cd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009cda:	d118      	bne.n	8009d0e <_printf_float+0x1c2>
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	dd0b      	ble.n	8009cfa <_printf_float+0x1ae>
 8009ce2:	6121      	str	r1, [r4, #16]
 8009ce4:	b913      	cbnz	r3, 8009cec <_printf_float+0x1a0>
 8009ce6:	6822      	ldr	r2, [r4, #0]
 8009ce8:	07d0      	lsls	r0, r2, #31
 8009cea:	d502      	bpl.n	8009cf2 <_printf_float+0x1a6>
 8009cec:	3301      	adds	r3, #1
 8009cee:	440b      	add	r3, r1
 8009cf0:	6123      	str	r3, [r4, #16]
 8009cf2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009cf4:	f04f 0900 	mov.w	r9, #0
 8009cf8:	e7de      	b.n	8009cb8 <_printf_float+0x16c>
 8009cfa:	b913      	cbnz	r3, 8009d02 <_printf_float+0x1b6>
 8009cfc:	6822      	ldr	r2, [r4, #0]
 8009cfe:	07d2      	lsls	r2, r2, #31
 8009d00:	d501      	bpl.n	8009d06 <_printf_float+0x1ba>
 8009d02:	3302      	adds	r3, #2
 8009d04:	e7f4      	b.n	8009cf0 <_printf_float+0x1a4>
 8009d06:	2301      	movs	r3, #1
 8009d08:	e7f2      	b.n	8009cf0 <_printf_float+0x1a4>
 8009d0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d10:	4299      	cmp	r1, r3
 8009d12:	db05      	blt.n	8009d20 <_printf_float+0x1d4>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	6121      	str	r1, [r4, #16]
 8009d18:	07d8      	lsls	r0, r3, #31
 8009d1a:	d5ea      	bpl.n	8009cf2 <_printf_float+0x1a6>
 8009d1c:	1c4b      	adds	r3, r1, #1
 8009d1e:	e7e7      	b.n	8009cf0 <_printf_float+0x1a4>
 8009d20:	2900      	cmp	r1, #0
 8009d22:	bfd4      	ite	le
 8009d24:	f1c1 0202 	rsble	r2, r1, #2
 8009d28:	2201      	movgt	r2, #1
 8009d2a:	4413      	add	r3, r2
 8009d2c:	e7e0      	b.n	8009cf0 <_printf_float+0x1a4>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	055a      	lsls	r2, r3, #21
 8009d32:	d407      	bmi.n	8009d44 <_printf_float+0x1f8>
 8009d34:	6923      	ldr	r3, [r4, #16]
 8009d36:	4642      	mov	r2, r8
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	d12c      	bne.n	8009d9c <_printf_float+0x250>
 8009d42:	e764      	b.n	8009c0e <_printf_float+0xc2>
 8009d44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d48:	f240 80e0 	bls.w	8009f0c <_printf_float+0x3c0>
 8009d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	f7f6 fec0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d034      	beq.n	8009dc6 <_printf_float+0x27a>
 8009d5c:	4a37      	ldr	r2, [pc, #220]	; (8009e3c <_printf_float+0x2f0>)
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4631      	mov	r1, r6
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	f43f af51 	beq.w	8009c0e <_printf_float+0xc2>
 8009d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d70:	429a      	cmp	r2, r3
 8009d72:	db02      	blt.n	8009d7a <_printf_float+0x22e>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	07d8      	lsls	r0, r3, #31
 8009d78:	d510      	bpl.n	8009d9c <_printf_float+0x250>
 8009d7a:	ee18 3a10 	vmov	r3, s16
 8009d7e:	4652      	mov	r2, sl
 8009d80:	4631      	mov	r1, r6
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	f43f af41 	beq.w	8009c0e <_printf_float+0xc2>
 8009d8c:	f04f 0800 	mov.w	r8, #0
 8009d90:	f104 091a 	add.w	r9, r4, #26
 8009d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d96:	3b01      	subs	r3, #1
 8009d98:	4543      	cmp	r3, r8
 8009d9a:	dc09      	bgt.n	8009db0 <_printf_float+0x264>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	079b      	lsls	r3, r3, #30
 8009da0:	f100 8105 	bmi.w	8009fae <_printf_float+0x462>
 8009da4:	68e0      	ldr	r0, [r4, #12]
 8009da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da8:	4298      	cmp	r0, r3
 8009daa:	bfb8      	it	lt
 8009dac:	4618      	movlt	r0, r3
 8009dae:	e730      	b.n	8009c12 <_printf_float+0xc6>
 8009db0:	2301      	movs	r3, #1
 8009db2:	464a      	mov	r2, r9
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af27 	beq.w	8009c0e <_printf_float+0xc2>
 8009dc0:	f108 0801 	add.w	r8, r8, #1
 8009dc4:	e7e6      	b.n	8009d94 <_printf_float+0x248>
 8009dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dc39      	bgt.n	8009e40 <_printf_float+0x2f4>
 8009dcc:	4a1b      	ldr	r2, [pc, #108]	; (8009e3c <_printf_float+0x2f0>)
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	47b8      	blx	r7
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	f43f af19 	beq.w	8009c0e <_printf_float+0xc2>
 8009ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009de0:	4313      	orrs	r3, r2
 8009de2:	d102      	bne.n	8009dea <_printf_float+0x29e>
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	07d9      	lsls	r1, r3, #31
 8009de8:	d5d8      	bpl.n	8009d9c <_printf_float+0x250>
 8009dea:	ee18 3a10 	vmov	r3, s16
 8009dee:	4652      	mov	r2, sl
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b8      	blx	r7
 8009df6:	3001      	adds	r0, #1
 8009df8:	f43f af09 	beq.w	8009c0e <_printf_float+0xc2>
 8009dfc:	f04f 0900 	mov.w	r9, #0
 8009e00:	f104 0a1a 	add.w	sl, r4, #26
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	425b      	negs	r3, r3
 8009e08:	454b      	cmp	r3, r9
 8009e0a:	dc01      	bgt.n	8009e10 <_printf_float+0x2c4>
 8009e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0e:	e792      	b.n	8009d36 <_printf_float+0x1ea>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4652      	mov	r2, sl
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f aef7 	beq.w	8009c0e <_printf_float+0xc2>
 8009e20:	f109 0901 	add.w	r9, r9, #1
 8009e24:	e7ee      	b.n	8009e04 <_printf_float+0x2b8>
 8009e26:	bf00      	nop
 8009e28:	7fefffff 	.word	0x7fefffff
 8009e2c:	0800d56c 	.word	0x0800d56c
 8009e30:	0800d570 	.word	0x0800d570
 8009e34:	0800d578 	.word	0x0800d578
 8009e38:	0800d574 	.word	0x0800d574
 8009e3c:	0800d57c 	.word	0x0800d57c
 8009e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e44:	429a      	cmp	r2, r3
 8009e46:	bfa8      	it	ge
 8009e48:	461a      	movge	r2, r3
 8009e4a:	2a00      	cmp	r2, #0
 8009e4c:	4691      	mov	r9, r2
 8009e4e:	dc37      	bgt.n	8009ec0 <_printf_float+0x374>
 8009e50:	f04f 0b00 	mov.w	fp, #0
 8009e54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e58:	f104 021a 	add.w	r2, r4, #26
 8009e5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e5e:	9305      	str	r3, [sp, #20]
 8009e60:	eba3 0309 	sub.w	r3, r3, r9
 8009e64:	455b      	cmp	r3, fp
 8009e66:	dc33      	bgt.n	8009ed0 <_printf_float+0x384>
 8009e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	db3b      	blt.n	8009ee8 <_printf_float+0x39c>
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	07da      	lsls	r2, r3, #31
 8009e74:	d438      	bmi.n	8009ee8 <_printf_float+0x39c>
 8009e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e78:	9a05      	ldr	r2, [sp, #20]
 8009e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e7c:	1a9a      	subs	r2, r3, r2
 8009e7e:	eba3 0901 	sub.w	r9, r3, r1
 8009e82:	4591      	cmp	r9, r2
 8009e84:	bfa8      	it	ge
 8009e86:	4691      	movge	r9, r2
 8009e88:	f1b9 0f00 	cmp.w	r9, #0
 8009e8c:	dc35      	bgt.n	8009efa <_printf_float+0x3ae>
 8009e8e:	f04f 0800 	mov.w	r8, #0
 8009e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e96:	f104 0a1a 	add.w	sl, r4, #26
 8009e9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	eba3 0309 	sub.w	r3, r3, r9
 8009ea4:	4543      	cmp	r3, r8
 8009ea6:	f77f af79 	ble.w	8009d9c <_printf_float+0x250>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4652      	mov	r2, sl
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f43f aeaa 	beq.w	8009c0e <_printf_float+0xc2>
 8009eba:	f108 0801 	add.w	r8, r8, #1
 8009ebe:	e7ec      	b.n	8009e9a <_printf_float+0x34e>
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d1c0      	bne.n	8009e50 <_printf_float+0x304>
 8009ece:	e69e      	b.n	8009c0e <_printf_float+0xc2>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	9205      	str	r2, [sp, #20]
 8009ed8:	47b8      	blx	r7
 8009eda:	3001      	adds	r0, #1
 8009edc:	f43f ae97 	beq.w	8009c0e <_printf_float+0xc2>
 8009ee0:	9a05      	ldr	r2, [sp, #20]
 8009ee2:	f10b 0b01 	add.w	fp, fp, #1
 8009ee6:	e7b9      	b.n	8009e5c <_printf_float+0x310>
 8009ee8:	ee18 3a10 	vmov	r3, s16
 8009eec:	4652      	mov	r2, sl
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d1be      	bne.n	8009e76 <_printf_float+0x32a>
 8009ef8:	e689      	b.n	8009c0e <_printf_float+0xc2>
 8009efa:	9a05      	ldr	r2, [sp, #20]
 8009efc:	464b      	mov	r3, r9
 8009efe:	4442      	add	r2, r8
 8009f00:	4631      	mov	r1, r6
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b8      	blx	r7
 8009f06:	3001      	adds	r0, #1
 8009f08:	d1c1      	bne.n	8009e8e <_printf_float+0x342>
 8009f0a:	e680      	b.n	8009c0e <_printf_float+0xc2>
 8009f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f0e:	2a01      	cmp	r2, #1
 8009f10:	dc01      	bgt.n	8009f16 <_printf_float+0x3ca>
 8009f12:	07db      	lsls	r3, r3, #31
 8009f14:	d538      	bpl.n	8009f88 <_printf_float+0x43c>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4642      	mov	r2, r8
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	f43f ae74 	beq.w	8009c0e <_printf_float+0xc2>
 8009f26:	ee18 3a10 	vmov	r3, s16
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f ae6b 	beq.w	8009c0e <_printf_float+0xc2>
 8009f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f7f6 fdca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f44:	b9d8      	cbnz	r0, 8009f7e <_printf_float+0x432>
 8009f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f48:	f108 0201 	add.w	r2, r8, #1
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	4631      	mov	r1, r6
 8009f50:	4628      	mov	r0, r5
 8009f52:	47b8      	blx	r7
 8009f54:	3001      	adds	r0, #1
 8009f56:	d10e      	bne.n	8009f76 <_printf_float+0x42a>
 8009f58:	e659      	b.n	8009c0e <_printf_float+0xc2>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	4631      	mov	r1, r6
 8009f60:	4628      	mov	r0, r5
 8009f62:	47b8      	blx	r7
 8009f64:	3001      	adds	r0, #1
 8009f66:	f43f ae52 	beq.w	8009c0e <_printf_float+0xc2>
 8009f6a:	f108 0801 	add.w	r8, r8, #1
 8009f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f70:	3b01      	subs	r3, #1
 8009f72:	4543      	cmp	r3, r8
 8009f74:	dcf1      	bgt.n	8009f5a <_printf_float+0x40e>
 8009f76:	464b      	mov	r3, r9
 8009f78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f7c:	e6dc      	b.n	8009d38 <_printf_float+0x1ec>
 8009f7e:	f04f 0800 	mov.w	r8, #0
 8009f82:	f104 0a1a 	add.w	sl, r4, #26
 8009f86:	e7f2      	b.n	8009f6e <_printf_float+0x422>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	4642      	mov	r2, r8
 8009f8c:	e7df      	b.n	8009f4e <_printf_float+0x402>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	464a      	mov	r2, r9
 8009f92:	4631      	mov	r1, r6
 8009f94:	4628      	mov	r0, r5
 8009f96:	47b8      	blx	r7
 8009f98:	3001      	adds	r0, #1
 8009f9a:	f43f ae38 	beq.w	8009c0e <_printf_float+0xc2>
 8009f9e:	f108 0801 	add.w	r8, r8, #1
 8009fa2:	68e3      	ldr	r3, [r4, #12]
 8009fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fa6:	1a5b      	subs	r3, r3, r1
 8009fa8:	4543      	cmp	r3, r8
 8009faa:	dcf0      	bgt.n	8009f8e <_printf_float+0x442>
 8009fac:	e6fa      	b.n	8009da4 <_printf_float+0x258>
 8009fae:	f04f 0800 	mov.w	r8, #0
 8009fb2:	f104 0919 	add.w	r9, r4, #25
 8009fb6:	e7f4      	b.n	8009fa2 <_printf_float+0x456>

08009fb8 <_printf_common>:
 8009fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	4616      	mov	r6, r2
 8009fbe:	4699      	mov	r9, r3
 8009fc0:	688a      	ldr	r2, [r1, #8]
 8009fc2:	690b      	ldr	r3, [r1, #16]
 8009fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	bfb8      	it	lt
 8009fcc:	4613      	movlt	r3, r2
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b10a      	cbz	r2, 8009fde <_printf_common+0x26>
 8009fda:	3301      	adds	r3, #1
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	0699      	lsls	r1, r3, #26
 8009fe2:	bf42      	ittt	mi
 8009fe4:	6833      	ldrmi	r3, [r6, #0]
 8009fe6:	3302      	addmi	r3, #2
 8009fe8:	6033      	strmi	r3, [r6, #0]
 8009fea:	6825      	ldr	r5, [r4, #0]
 8009fec:	f015 0506 	ands.w	r5, r5, #6
 8009ff0:	d106      	bne.n	800a000 <_printf_common+0x48>
 8009ff2:	f104 0a19 	add.w	sl, r4, #25
 8009ff6:	68e3      	ldr	r3, [r4, #12]
 8009ff8:	6832      	ldr	r2, [r6, #0]
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	42ab      	cmp	r3, r5
 8009ffe:	dc26      	bgt.n	800a04e <_printf_common+0x96>
 800a000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a004:	1e13      	subs	r3, r2, #0
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	bf18      	it	ne
 800a00a:	2301      	movne	r3, #1
 800a00c:	0692      	lsls	r2, r2, #26
 800a00e:	d42b      	bmi.n	800a068 <_printf_common+0xb0>
 800a010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d01e      	beq.n	800a05c <_printf_common+0xa4>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	68e5      	ldr	r5, [r4, #12]
 800a022:	6832      	ldr	r2, [r6, #0]
 800a024:	f003 0306 	and.w	r3, r3, #6
 800a028:	2b04      	cmp	r3, #4
 800a02a:	bf08      	it	eq
 800a02c:	1aad      	subeq	r5, r5, r2
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	bf0c      	ite	eq
 800a034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a038:	2500      	movne	r5, #0
 800a03a:	4293      	cmp	r3, r2
 800a03c:	bfc4      	itt	gt
 800a03e:	1a9b      	subgt	r3, r3, r2
 800a040:	18ed      	addgt	r5, r5, r3
 800a042:	2600      	movs	r6, #0
 800a044:	341a      	adds	r4, #26
 800a046:	42b5      	cmp	r5, r6
 800a048:	d11a      	bne.n	800a080 <_printf_common+0xc8>
 800a04a:	2000      	movs	r0, #0
 800a04c:	e008      	b.n	800a060 <_printf_common+0xa8>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4649      	mov	r1, r9
 800a054:	4638      	mov	r0, r7
 800a056:	47c0      	blx	r8
 800a058:	3001      	adds	r0, #1
 800a05a:	d103      	bne.n	800a064 <_printf_common+0xac>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	3501      	adds	r5, #1
 800a066:	e7c6      	b.n	8009ff6 <_printf_common+0x3e>
 800a068:	18e1      	adds	r1, r4, r3
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	2030      	movs	r0, #48	; 0x30
 800a06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a072:	4422      	add	r2, r4
 800a074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a07c:	3302      	adds	r3, #2
 800a07e:	e7c7      	b.n	800a010 <_printf_common+0x58>
 800a080:	2301      	movs	r3, #1
 800a082:	4622      	mov	r2, r4
 800a084:	4649      	mov	r1, r9
 800a086:	4638      	mov	r0, r7
 800a088:	47c0      	blx	r8
 800a08a:	3001      	adds	r0, #1
 800a08c:	d0e6      	beq.n	800a05c <_printf_common+0xa4>
 800a08e:	3601      	adds	r6, #1
 800a090:	e7d9      	b.n	800a046 <_printf_common+0x8e>
	...

0800a094 <_printf_i>:
 800a094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	7e0f      	ldrb	r7, [r1, #24]
 800a09a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a09c:	2f78      	cmp	r7, #120	; 0x78
 800a09e:	4691      	mov	r9, r2
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	469a      	mov	sl, r3
 800a0a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0aa:	d807      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ac:	2f62      	cmp	r7, #98	; 0x62
 800a0ae:	d80a      	bhi.n	800a0c6 <_printf_i+0x32>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	f000 80d8 	beq.w	800a266 <_printf_i+0x1d2>
 800a0b6:	2f58      	cmp	r7, #88	; 0x58
 800a0b8:	f000 80a3 	beq.w	800a202 <_printf_i+0x16e>
 800a0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0c4:	e03a      	b.n	800a13c <_printf_i+0xa8>
 800a0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ca:	2b15      	cmp	r3, #21
 800a0cc:	d8f6      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ce:	a101      	add	r1, pc, #4	; (adr r1, 800a0d4 <_printf_i+0x40>)
 800a0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d4:	0800a12d 	.word	0x0800a12d
 800a0d8:	0800a141 	.word	0x0800a141
 800a0dc:	0800a0bd 	.word	0x0800a0bd
 800a0e0:	0800a0bd 	.word	0x0800a0bd
 800a0e4:	0800a0bd 	.word	0x0800a0bd
 800a0e8:	0800a0bd 	.word	0x0800a0bd
 800a0ec:	0800a141 	.word	0x0800a141
 800a0f0:	0800a0bd 	.word	0x0800a0bd
 800a0f4:	0800a0bd 	.word	0x0800a0bd
 800a0f8:	0800a0bd 	.word	0x0800a0bd
 800a0fc:	0800a0bd 	.word	0x0800a0bd
 800a100:	0800a24d 	.word	0x0800a24d
 800a104:	0800a171 	.word	0x0800a171
 800a108:	0800a22f 	.word	0x0800a22f
 800a10c:	0800a0bd 	.word	0x0800a0bd
 800a110:	0800a0bd 	.word	0x0800a0bd
 800a114:	0800a26f 	.word	0x0800a26f
 800a118:	0800a0bd 	.word	0x0800a0bd
 800a11c:	0800a171 	.word	0x0800a171
 800a120:	0800a0bd 	.word	0x0800a0bd
 800a124:	0800a0bd 	.word	0x0800a0bd
 800a128:	0800a237 	.word	0x0800a237
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	602a      	str	r2, [r5, #0]
 800a134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a13c:	2301      	movs	r3, #1
 800a13e:	e0a3      	b.n	800a288 <_printf_i+0x1f4>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	6829      	ldr	r1, [r5, #0]
 800a144:	0606      	lsls	r6, r0, #24
 800a146:	f101 0304 	add.w	r3, r1, #4
 800a14a:	d50a      	bpl.n	800a162 <_printf_i+0xce>
 800a14c:	680e      	ldr	r6, [r1, #0]
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	2e00      	cmp	r6, #0
 800a152:	da03      	bge.n	800a15c <_printf_i+0xc8>
 800a154:	232d      	movs	r3, #45	; 0x2d
 800a156:	4276      	negs	r6, r6
 800a158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a15c:	485e      	ldr	r0, [pc, #376]	; (800a2d8 <_printf_i+0x244>)
 800a15e:	230a      	movs	r3, #10
 800a160:	e019      	b.n	800a196 <_printf_i+0x102>
 800a162:	680e      	ldr	r6, [r1, #0]
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a16a:	bf18      	it	ne
 800a16c:	b236      	sxthne	r6, r6
 800a16e:	e7ef      	b.n	800a150 <_printf_i+0xbc>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	6820      	ldr	r0, [r4, #0]
 800a174:	1d19      	adds	r1, r3, #4
 800a176:	6029      	str	r1, [r5, #0]
 800a178:	0601      	lsls	r1, r0, #24
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0xec>
 800a17c:	681e      	ldr	r6, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0xf2>
 800a180:	0646      	lsls	r6, r0, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0xe8>
 800a184:	881e      	ldrh	r6, [r3, #0]
 800a186:	4854      	ldr	r0, [pc, #336]	; (800a2d8 <_printf_i+0x244>)
 800a188:	2f6f      	cmp	r7, #111	; 0x6f
 800a18a:	bf0c      	ite	eq
 800a18c:	2308      	moveq	r3, #8
 800a18e:	230a      	movne	r3, #10
 800a190:	2100      	movs	r1, #0
 800a192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a196:	6865      	ldr	r5, [r4, #4]
 800a198:	60a5      	str	r5, [r4, #8]
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	bfa2      	ittt	ge
 800a19e:	6821      	ldrge	r1, [r4, #0]
 800a1a0:	f021 0104 	bicge.w	r1, r1, #4
 800a1a4:	6021      	strge	r1, [r4, #0]
 800a1a6:	b90e      	cbnz	r6, 800a1ac <_printf_i+0x118>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d04d      	beq.n	800a248 <_printf_i+0x1b4>
 800a1ac:	4615      	mov	r5, r2
 800a1ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a1b6:	5dc7      	ldrb	r7, [r0, r7]
 800a1b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1bc:	4637      	mov	r7, r6
 800a1be:	42bb      	cmp	r3, r7
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	d9f4      	bls.n	800a1ae <_printf_i+0x11a>
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d10b      	bne.n	800a1e0 <_printf_i+0x14c>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	07de      	lsls	r6, r3, #31
 800a1cc:	d508      	bpl.n	800a1e0 <_printf_i+0x14c>
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	bfde      	ittt	le
 800a1d6:	2330      	movle	r3, #48	; 0x30
 800a1d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a1e0:	1b52      	subs	r2, r2, r5
 800a1e2:	6122      	str	r2, [r4, #16]
 800a1e4:	f8cd a000 	str.w	sl, [sp]
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	aa03      	add	r2, sp, #12
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7ff fee2 	bl	8009fb8 <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d14c      	bne.n	800a292 <_printf_i+0x1fe>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1fc:	b004      	add	sp, #16
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	4835      	ldr	r0, [pc, #212]	; (800a2d8 <_printf_i+0x244>)
 800a204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a208:	6829      	ldr	r1, [r5, #0]
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a210:	6029      	str	r1, [r5, #0]
 800a212:	061d      	lsls	r5, r3, #24
 800a214:	d514      	bpl.n	800a240 <_printf_i+0x1ac>
 800a216:	07df      	lsls	r7, r3, #31
 800a218:	bf44      	itt	mi
 800a21a:	f043 0320 	orrmi.w	r3, r3, #32
 800a21e:	6023      	strmi	r3, [r4, #0]
 800a220:	b91e      	cbnz	r6, 800a22a <_printf_i+0x196>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f023 0320 	bic.w	r3, r3, #32
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	2310      	movs	r3, #16
 800a22c:	e7b0      	b.n	800a190 <_printf_i+0xfc>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	f043 0320 	orr.w	r3, r3, #32
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	2378      	movs	r3, #120	; 0x78
 800a238:	4828      	ldr	r0, [pc, #160]	; (800a2dc <_printf_i+0x248>)
 800a23a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a23e:	e7e3      	b.n	800a208 <_printf_i+0x174>
 800a240:	0659      	lsls	r1, r3, #25
 800a242:	bf48      	it	mi
 800a244:	b2b6      	uxthmi	r6, r6
 800a246:	e7e6      	b.n	800a216 <_printf_i+0x182>
 800a248:	4615      	mov	r5, r2
 800a24a:	e7bb      	b.n	800a1c4 <_printf_i+0x130>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	6826      	ldr	r6, [r4, #0]
 800a250:	6961      	ldr	r1, [r4, #20]
 800a252:	1d18      	adds	r0, r3, #4
 800a254:	6028      	str	r0, [r5, #0]
 800a256:	0635      	lsls	r5, r6, #24
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	d501      	bpl.n	800a260 <_printf_i+0x1cc>
 800a25c:	6019      	str	r1, [r3, #0]
 800a25e:	e002      	b.n	800a266 <_printf_i+0x1d2>
 800a260:	0670      	lsls	r0, r6, #25
 800a262:	d5fb      	bpl.n	800a25c <_printf_i+0x1c8>
 800a264:	8019      	strh	r1, [r3, #0]
 800a266:	2300      	movs	r3, #0
 800a268:	6123      	str	r3, [r4, #16]
 800a26a:	4615      	mov	r5, r2
 800a26c:	e7ba      	b.n	800a1e4 <_printf_i+0x150>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	1d1a      	adds	r2, r3, #4
 800a272:	602a      	str	r2, [r5, #0]
 800a274:	681d      	ldr	r5, [r3, #0]
 800a276:	6862      	ldr	r2, [r4, #4]
 800a278:	2100      	movs	r1, #0
 800a27a:	4628      	mov	r0, r5
 800a27c:	f7f5 ffb8 	bl	80001f0 <memchr>
 800a280:	b108      	cbz	r0, 800a286 <_printf_i+0x1f2>
 800a282:	1b40      	subs	r0, r0, r5
 800a284:	6060      	str	r0, [r4, #4]
 800a286:	6863      	ldr	r3, [r4, #4]
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	2300      	movs	r3, #0
 800a28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a290:	e7a8      	b.n	800a1e4 <_printf_i+0x150>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	462a      	mov	r2, r5
 800a296:	4649      	mov	r1, r9
 800a298:	4640      	mov	r0, r8
 800a29a:	47d0      	blx	sl
 800a29c:	3001      	adds	r0, #1
 800a29e:	d0ab      	beq.n	800a1f8 <_printf_i+0x164>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	079b      	lsls	r3, r3, #30
 800a2a4:	d413      	bmi.n	800a2ce <_printf_i+0x23a>
 800a2a6:	68e0      	ldr	r0, [r4, #12]
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	4298      	cmp	r0, r3
 800a2ac:	bfb8      	it	lt
 800a2ae:	4618      	movlt	r0, r3
 800a2b0:	e7a4      	b.n	800a1fc <_printf_i+0x168>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	47d0      	blx	sl
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d09b      	beq.n	800a1f8 <_printf_i+0x164>
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	68e3      	ldr	r3, [r4, #12]
 800a2c4:	9903      	ldr	r1, [sp, #12]
 800a2c6:	1a5b      	subs	r3, r3, r1
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dcf2      	bgt.n	800a2b2 <_printf_i+0x21e>
 800a2cc:	e7eb      	b.n	800a2a6 <_printf_i+0x212>
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	f104 0619 	add.w	r6, r4, #25
 800a2d4:	e7f5      	b.n	800a2c2 <_printf_i+0x22e>
 800a2d6:	bf00      	nop
 800a2d8:	0800d57e 	.word	0x0800d57e
 800a2dc:	0800d58f 	.word	0x0800d58f

0800a2e0 <iprintf>:
 800a2e0:	b40f      	push	{r0, r1, r2, r3}
 800a2e2:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <iprintf+0x2c>)
 800a2e4:	b513      	push	{r0, r1, r4, lr}
 800a2e6:	681c      	ldr	r4, [r3, #0]
 800a2e8:	b124      	cbz	r4, 800a2f4 <iprintf+0x14>
 800a2ea:	69a3      	ldr	r3, [r4, #24]
 800a2ec:	b913      	cbnz	r3, 800a2f4 <iprintf+0x14>
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f001 f8da 	bl	800b4a8 <__sinit>
 800a2f4:	ab05      	add	r3, sp, #20
 800a2f6:	9a04      	ldr	r2, [sp, #16]
 800a2f8:	68a1      	ldr	r1, [r4, #8]
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f001 fe97 	bl	800c030 <_vfiprintf_r>
 800a302:	b002      	add	sp, #8
 800a304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a308:	b004      	add	sp, #16
 800a30a:	4770      	bx	lr
 800a30c:	20000014 	.word	0x20000014

0800a310 <_puts_r>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	460e      	mov	r6, r1
 800a314:	4605      	mov	r5, r0
 800a316:	b118      	cbz	r0, 800a320 <_puts_r+0x10>
 800a318:	6983      	ldr	r3, [r0, #24]
 800a31a:	b90b      	cbnz	r3, 800a320 <_puts_r+0x10>
 800a31c:	f001 f8c4 	bl	800b4a8 <__sinit>
 800a320:	69ab      	ldr	r3, [r5, #24]
 800a322:	68ac      	ldr	r4, [r5, #8]
 800a324:	b913      	cbnz	r3, 800a32c <_puts_r+0x1c>
 800a326:	4628      	mov	r0, r5
 800a328:	f001 f8be 	bl	800b4a8 <__sinit>
 800a32c:	4b2c      	ldr	r3, [pc, #176]	; (800a3e0 <_puts_r+0xd0>)
 800a32e:	429c      	cmp	r4, r3
 800a330:	d120      	bne.n	800a374 <_puts_r+0x64>
 800a332:	686c      	ldr	r4, [r5, #4]
 800a334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a336:	07db      	lsls	r3, r3, #31
 800a338:	d405      	bmi.n	800a346 <_puts_r+0x36>
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	0598      	lsls	r0, r3, #22
 800a33e:	d402      	bmi.n	800a346 <_puts_r+0x36>
 800a340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a342:	f001 f954 	bl	800b5ee <__retarget_lock_acquire_recursive>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	0719      	lsls	r1, r3, #28
 800a34a:	d51d      	bpl.n	800a388 <_puts_r+0x78>
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	b1db      	cbz	r3, 800a388 <_puts_r+0x78>
 800a350:	3e01      	subs	r6, #1
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a358:	3b01      	subs	r3, #1
 800a35a:	60a3      	str	r3, [r4, #8]
 800a35c:	bb39      	cbnz	r1, 800a3ae <_puts_r+0x9e>
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da38      	bge.n	800a3d4 <_puts_r+0xc4>
 800a362:	4622      	mov	r2, r4
 800a364:	210a      	movs	r1, #10
 800a366:	4628      	mov	r0, r5
 800a368:	f000 f848 	bl	800a3fc <__swbuf_r>
 800a36c:	3001      	adds	r0, #1
 800a36e:	d011      	beq.n	800a394 <_puts_r+0x84>
 800a370:	250a      	movs	r5, #10
 800a372:	e011      	b.n	800a398 <_puts_r+0x88>
 800a374:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <_puts_r+0xd4>)
 800a376:	429c      	cmp	r4, r3
 800a378:	d101      	bne.n	800a37e <_puts_r+0x6e>
 800a37a:	68ac      	ldr	r4, [r5, #8]
 800a37c:	e7da      	b.n	800a334 <_puts_r+0x24>
 800a37e:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <_puts_r+0xd8>)
 800a380:	429c      	cmp	r4, r3
 800a382:	bf08      	it	eq
 800a384:	68ec      	ldreq	r4, [r5, #12]
 800a386:	e7d5      	b.n	800a334 <_puts_r+0x24>
 800a388:	4621      	mov	r1, r4
 800a38a:	4628      	mov	r0, r5
 800a38c:	f000 f888 	bl	800a4a0 <__swsetup_r>
 800a390:	2800      	cmp	r0, #0
 800a392:	d0dd      	beq.n	800a350 <_puts_r+0x40>
 800a394:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a39a:	07da      	lsls	r2, r3, #31
 800a39c:	d405      	bmi.n	800a3aa <_puts_r+0x9a>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	059b      	lsls	r3, r3, #22
 800a3a2:	d402      	bmi.n	800a3aa <_puts_r+0x9a>
 800a3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3a6:	f001 f923 	bl	800b5f0 <__retarget_lock_release_recursive>
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	da04      	bge.n	800a3bc <_puts_r+0xac>
 800a3b2:	69a2      	ldr	r2, [r4, #24]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	dc06      	bgt.n	800a3c6 <_puts_r+0xb6>
 800a3b8:	290a      	cmp	r1, #10
 800a3ba:	d004      	beq.n	800a3c6 <_puts_r+0xb6>
 800a3bc:	6823      	ldr	r3, [r4, #0]
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	6022      	str	r2, [r4, #0]
 800a3c2:	7019      	strb	r1, [r3, #0]
 800a3c4:	e7c5      	b.n	800a352 <_puts_r+0x42>
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f000 f817 	bl	800a3fc <__swbuf_r>
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d1bf      	bne.n	800a352 <_puts_r+0x42>
 800a3d2:	e7df      	b.n	800a394 <_puts_r+0x84>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	250a      	movs	r5, #10
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	6022      	str	r2, [r4, #0]
 800a3dc:	701d      	strb	r5, [r3, #0]
 800a3de:	e7db      	b.n	800a398 <_puts_r+0x88>
 800a3e0:	0800d650 	.word	0x0800d650
 800a3e4:	0800d670 	.word	0x0800d670
 800a3e8:	0800d630 	.word	0x0800d630

0800a3ec <puts>:
 800a3ec:	4b02      	ldr	r3, [pc, #8]	; (800a3f8 <puts+0xc>)
 800a3ee:	4601      	mov	r1, r0
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	f7ff bf8d 	b.w	800a310 <_puts_r>
 800a3f6:	bf00      	nop
 800a3f8:	20000014 	.word	0x20000014

0800a3fc <__swbuf_r>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	460e      	mov	r6, r1
 800a400:	4614      	mov	r4, r2
 800a402:	4605      	mov	r5, r0
 800a404:	b118      	cbz	r0, 800a40e <__swbuf_r+0x12>
 800a406:	6983      	ldr	r3, [r0, #24]
 800a408:	b90b      	cbnz	r3, 800a40e <__swbuf_r+0x12>
 800a40a:	f001 f84d 	bl	800b4a8 <__sinit>
 800a40e:	4b21      	ldr	r3, [pc, #132]	; (800a494 <__swbuf_r+0x98>)
 800a410:	429c      	cmp	r4, r3
 800a412:	d12b      	bne.n	800a46c <__swbuf_r+0x70>
 800a414:	686c      	ldr	r4, [r5, #4]
 800a416:	69a3      	ldr	r3, [r4, #24]
 800a418:	60a3      	str	r3, [r4, #8]
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	071a      	lsls	r2, r3, #28
 800a41e:	d52f      	bpl.n	800a480 <__swbuf_r+0x84>
 800a420:	6923      	ldr	r3, [r4, #16]
 800a422:	b36b      	cbz	r3, 800a480 <__swbuf_r+0x84>
 800a424:	6923      	ldr	r3, [r4, #16]
 800a426:	6820      	ldr	r0, [r4, #0]
 800a428:	1ac0      	subs	r0, r0, r3
 800a42a:	6963      	ldr	r3, [r4, #20]
 800a42c:	b2f6      	uxtb	r6, r6
 800a42e:	4283      	cmp	r3, r0
 800a430:	4637      	mov	r7, r6
 800a432:	dc04      	bgt.n	800a43e <__swbuf_r+0x42>
 800a434:	4621      	mov	r1, r4
 800a436:	4628      	mov	r0, r5
 800a438:	f000 ffa2 	bl	800b380 <_fflush_r>
 800a43c:	bb30      	cbnz	r0, 800a48c <__swbuf_r+0x90>
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	3b01      	subs	r3, #1
 800a442:	60a3      	str	r3, [r4, #8]
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	6022      	str	r2, [r4, #0]
 800a44a:	701e      	strb	r6, [r3, #0]
 800a44c:	6963      	ldr	r3, [r4, #20]
 800a44e:	3001      	adds	r0, #1
 800a450:	4283      	cmp	r3, r0
 800a452:	d004      	beq.n	800a45e <__swbuf_r+0x62>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	07db      	lsls	r3, r3, #31
 800a458:	d506      	bpl.n	800a468 <__swbuf_r+0x6c>
 800a45a:	2e0a      	cmp	r6, #10
 800a45c:	d104      	bne.n	800a468 <__swbuf_r+0x6c>
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	f000 ff8d 	bl	800b380 <_fflush_r>
 800a466:	b988      	cbnz	r0, 800a48c <__swbuf_r+0x90>
 800a468:	4638      	mov	r0, r7
 800a46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <__swbuf_r+0x9c>)
 800a46e:	429c      	cmp	r4, r3
 800a470:	d101      	bne.n	800a476 <__swbuf_r+0x7a>
 800a472:	68ac      	ldr	r4, [r5, #8]
 800a474:	e7cf      	b.n	800a416 <__swbuf_r+0x1a>
 800a476:	4b09      	ldr	r3, [pc, #36]	; (800a49c <__swbuf_r+0xa0>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	bf08      	it	eq
 800a47c:	68ec      	ldreq	r4, [r5, #12]
 800a47e:	e7ca      	b.n	800a416 <__swbuf_r+0x1a>
 800a480:	4621      	mov	r1, r4
 800a482:	4628      	mov	r0, r5
 800a484:	f000 f80c 	bl	800a4a0 <__swsetup_r>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d0cb      	beq.n	800a424 <__swbuf_r+0x28>
 800a48c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a490:	e7ea      	b.n	800a468 <__swbuf_r+0x6c>
 800a492:	bf00      	nop
 800a494:	0800d650 	.word	0x0800d650
 800a498:	0800d670 	.word	0x0800d670
 800a49c:	0800d630 	.word	0x0800d630

0800a4a0 <__swsetup_r>:
 800a4a0:	4b32      	ldr	r3, [pc, #200]	; (800a56c <__swsetup_r+0xcc>)
 800a4a2:	b570      	push	{r4, r5, r6, lr}
 800a4a4:	681d      	ldr	r5, [r3, #0]
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	b125      	cbz	r5, 800a4b6 <__swsetup_r+0x16>
 800a4ac:	69ab      	ldr	r3, [r5, #24]
 800a4ae:	b913      	cbnz	r3, 800a4b6 <__swsetup_r+0x16>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f000 fff9 	bl	800b4a8 <__sinit>
 800a4b6:	4b2e      	ldr	r3, [pc, #184]	; (800a570 <__swsetup_r+0xd0>)
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	d10f      	bne.n	800a4dc <__swsetup_r+0x3c>
 800a4bc:	686c      	ldr	r4, [r5, #4]
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4c4:	0719      	lsls	r1, r3, #28
 800a4c6:	d42c      	bmi.n	800a522 <__swsetup_r+0x82>
 800a4c8:	06dd      	lsls	r5, r3, #27
 800a4ca:	d411      	bmi.n	800a4f0 <__swsetup_r+0x50>
 800a4cc:	2309      	movs	r3, #9
 800a4ce:	6033      	str	r3, [r6, #0]
 800a4d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4da:	e03e      	b.n	800a55a <__swsetup_r+0xba>
 800a4dc:	4b25      	ldr	r3, [pc, #148]	; (800a574 <__swsetup_r+0xd4>)
 800a4de:	429c      	cmp	r4, r3
 800a4e0:	d101      	bne.n	800a4e6 <__swsetup_r+0x46>
 800a4e2:	68ac      	ldr	r4, [r5, #8]
 800a4e4:	e7eb      	b.n	800a4be <__swsetup_r+0x1e>
 800a4e6:	4b24      	ldr	r3, [pc, #144]	; (800a578 <__swsetup_r+0xd8>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	bf08      	it	eq
 800a4ec:	68ec      	ldreq	r4, [r5, #12]
 800a4ee:	e7e6      	b.n	800a4be <__swsetup_r+0x1e>
 800a4f0:	0758      	lsls	r0, r3, #29
 800a4f2:	d512      	bpl.n	800a51a <__swsetup_r+0x7a>
 800a4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4f6:	b141      	cbz	r1, 800a50a <__swsetup_r+0x6a>
 800a4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4fc:	4299      	cmp	r1, r3
 800a4fe:	d002      	beq.n	800a506 <__swsetup_r+0x66>
 800a500:	4630      	mov	r0, r6
 800a502:	f001 fc8b 	bl	800be1c <_free_r>
 800a506:	2300      	movs	r3, #0
 800a508:	6363      	str	r3, [r4, #52]	; 0x34
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	2300      	movs	r3, #0
 800a514:	6063      	str	r3, [r4, #4]
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f043 0308 	orr.w	r3, r3, #8
 800a520:	81a3      	strh	r3, [r4, #12]
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	b94b      	cbnz	r3, 800a53a <__swsetup_r+0x9a>
 800a526:	89a3      	ldrh	r3, [r4, #12]
 800a528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a52c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a530:	d003      	beq.n	800a53a <__swsetup_r+0x9a>
 800a532:	4621      	mov	r1, r4
 800a534:	4630      	mov	r0, r6
 800a536:	f001 f881 	bl	800b63c <__smakebuf_r>
 800a53a:	89a0      	ldrh	r0, [r4, #12]
 800a53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a540:	f010 0301 	ands.w	r3, r0, #1
 800a544:	d00a      	beq.n	800a55c <__swsetup_r+0xbc>
 800a546:	2300      	movs	r3, #0
 800a548:	60a3      	str	r3, [r4, #8]
 800a54a:	6963      	ldr	r3, [r4, #20]
 800a54c:	425b      	negs	r3, r3
 800a54e:	61a3      	str	r3, [r4, #24]
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	b943      	cbnz	r3, 800a566 <__swsetup_r+0xc6>
 800a554:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a558:	d1ba      	bne.n	800a4d0 <__swsetup_r+0x30>
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	0781      	lsls	r1, r0, #30
 800a55e:	bf58      	it	pl
 800a560:	6963      	ldrpl	r3, [r4, #20]
 800a562:	60a3      	str	r3, [r4, #8]
 800a564:	e7f4      	b.n	800a550 <__swsetup_r+0xb0>
 800a566:	2000      	movs	r0, #0
 800a568:	e7f7      	b.n	800a55a <__swsetup_r+0xba>
 800a56a:	bf00      	nop
 800a56c:	20000014 	.word	0x20000014
 800a570:	0800d650 	.word	0x0800d650
 800a574:	0800d670 	.word	0x0800d670
 800a578:	0800d630 	.word	0x0800d630

0800a57c <quorem>:
 800a57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	6903      	ldr	r3, [r0, #16]
 800a582:	690c      	ldr	r4, [r1, #16]
 800a584:	42a3      	cmp	r3, r4
 800a586:	4607      	mov	r7, r0
 800a588:	f2c0 8081 	blt.w	800a68e <quorem+0x112>
 800a58c:	3c01      	subs	r4, #1
 800a58e:	f101 0814 	add.w	r8, r1, #20
 800a592:	f100 0514 	add.w	r5, r0, #20
 800a596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a59a:	9301      	str	r3, [sp, #4]
 800a59c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5b4:	d331      	bcc.n	800a61a <quorem+0x9e>
 800a5b6:	f04f 0e00 	mov.w	lr, #0
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	46ac      	mov	ip, r5
 800a5be:	46f2      	mov	sl, lr
 800a5c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5c4:	b293      	uxth	r3, r2
 800a5c6:	fb06 e303 	mla	r3, r6, r3, lr
 800a5ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	ebaa 0303 	sub.w	r3, sl, r3
 800a5d4:	f8dc a000 	ldr.w	sl, [ip]
 800a5d8:	0c12      	lsrs	r2, r2, #16
 800a5da:	fa13 f38a 	uxtah	r3, r3, sl
 800a5de:	fb06 e202 	mla	r2, r6, r2, lr
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	9b00      	ldr	r3, [sp, #0]
 800a5e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5ea:	b292      	uxth	r2, r2
 800a5ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5f8:	4581      	cmp	r9, r0
 800a5fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5fe:	f84c 3b04 	str.w	r3, [ip], #4
 800a602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a606:	d2db      	bcs.n	800a5c0 <quorem+0x44>
 800a608:	f855 300b 	ldr.w	r3, [r5, fp]
 800a60c:	b92b      	cbnz	r3, 800a61a <quorem+0x9e>
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	3b04      	subs	r3, #4
 800a612:	429d      	cmp	r5, r3
 800a614:	461a      	mov	r2, r3
 800a616:	d32e      	bcc.n	800a676 <quorem+0xfa>
 800a618:	613c      	str	r4, [r7, #16]
 800a61a:	4638      	mov	r0, r7
 800a61c:	f001 fae6 	bl	800bbec <__mcmp>
 800a620:	2800      	cmp	r0, #0
 800a622:	db24      	blt.n	800a66e <quorem+0xf2>
 800a624:	3601      	adds	r6, #1
 800a626:	4628      	mov	r0, r5
 800a628:	f04f 0c00 	mov.w	ip, #0
 800a62c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a630:	f8d0 e000 	ldr.w	lr, [r0]
 800a634:	b293      	uxth	r3, r2
 800a636:	ebac 0303 	sub.w	r3, ip, r3
 800a63a:	0c12      	lsrs	r2, r2, #16
 800a63c:	fa13 f38e 	uxtah	r3, r3, lr
 800a640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a648:	b29b      	uxth	r3, r3
 800a64a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a64e:	45c1      	cmp	r9, r8
 800a650:	f840 3b04 	str.w	r3, [r0], #4
 800a654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a658:	d2e8      	bcs.n	800a62c <quorem+0xb0>
 800a65a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a662:	b922      	cbnz	r2, 800a66e <quorem+0xf2>
 800a664:	3b04      	subs	r3, #4
 800a666:	429d      	cmp	r5, r3
 800a668:	461a      	mov	r2, r3
 800a66a:	d30a      	bcc.n	800a682 <quorem+0x106>
 800a66c:	613c      	str	r4, [r7, #16]
 800a66e:	4630      	mov	r0, r6
 800a670:	b003      	add	sp, #12
 800a672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a676:	6812      	ldr	r2, [r2, #0]
 800a678:	3b04      	subs	r3, #4
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	d1cc      	bne.n	800a618 <quorem+0x9c>
 800a67e:	3c01      	subs	r4, #1
 800a680:	e7c7      	b.n	800a612 <quorem+0x96>
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	3b04      	subs	r3, #4
 800a686:	2a00      	cmp	r2, #0
 800a688:	d1f0      	bne.n	800a66c <quorem+0xf0>
 800a68a:	3c01      	subs	r4, #1
 800a68c:	e7eb      	b.n	800a666 <quorem+0xea>
 800a68e:	2000      	movs	r0, #0
 800a690:	e7ee      	b.n	800a670 <quorem+0xf4>
 800a692:	0000      	movs	r0, r0
 800a694:	0000      	movs	r0, r0
	...

0800a698 <_dtoa_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	ed2d 8b04 	vpush	{d8-d9}
 800a6a0:	ec57 6b10 	vmov	r6, r7, d0
 800a6a4:	b093      	sub	sp, #76	; 0x4c
 800a6a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6ac:	9106      	str	r1, [sp, #24]
 800a6ae:	ee10 aa10 	vmov	sl, s0
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6b8:	46bb      	mov	fp, r7
 800a6ba:	b975      	cbnz	r5, 800a6da <_dtoa_r+0x42>
 800a6bc:	2010      	movs	r0, #16
 800a6be:	f000 fffd 	bl	800b6bc <malloc>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6c6:	b920      	cbnz	r0, 800a6d2 <_dtoa_r+0x3a>
 800a6c8:	4ba7      	ldr	r3, [pc, #668]	; (800a968 <_dtoa_r+0x2d0>)
 800a6ca:	21ea      	movs	r1, #234	; 0xea
 800a6cc:	48a7      	ldr	r0, [pc, #668]	; (800a96c <_dtoa_r+0x2d4>)
 800a6ce:	f001 fe45 	bl	800c35c <__assert_func>
 800a6d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6d6:	6005      	str	r5, [r0, #0]
 800a6d8:	60c5      	str	r5, [r0, #12]
 800a6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6dc:	6819      	ldr	r1, [r3, #0]
 800a6de:	b151      	cbz	r1, 800a6f6 <_dtoa_r+0x5e>
 800a6e0:	685a      	ldr	r2, [r3, #4]
 800a6e2:	604a      	str	r2, [r1, #4]
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4093      	lsls	r3, r2
 800a6e8:	608b      	str	r3, [r1, #8]
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f001 f83c 	bl	800b768 <_Bfree>
 800a6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	1e3b      	subs	r3, r7, #0
 800a6f8:	bfaa      	itet	ge
 800a6fa:	2300      	movge	r3, #0
 800a6fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a700:	f8c8 3000 	strge.w	r3, [r8]
 800a704:	4b9a      	ldr	r3, [pc, #616]	; (800a970 <_dtoa_r+0x2d8>)
 800a706:	bfbc      	itt	lt
 800a708:	2201      	movlt	r2, #1
 800a70a:	f8c8 2000 	strlt.w	r2, [r8]
 800a70e:	ea33 030b 	bics.w	r3, r3, fp
 800a712:	d11b      	bne.n	800a74c <_dtoa_r+0xb4>
 800a714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a716:	f242 730f 	movw	r3, #9999	; 0x270f
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a720:	4333      	orrs	r3, r6
 800a722:	f000 8592 	beq.w	800b24a <_dtoa_r+0xbb2>
 800a726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a728:	b963      	cbnz	r3, 800a744 <_dtoa_r+0xac>
 800a72a:	4b92      	ldr	r3, [pc, #584]	; (800a974 <_dtoa_r+0x2dc>)
 800a72c:	e022      	b.n	800a774 <_dtoa_r+0xdc>
 800a72e:	4b92      	ldr	r3, [pc, #584]	; (800a978 <_dtoa_r+0x2e0>)
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	3308      	adds	r3, #8
 800a734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	9801      	ldr	r0, [sp, #4]
 800a73a:	b013      	add	sp, #76	; 0x4c
 800a73c:	ecbd 8b04 	vpop	{d8-d9}
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	4b8b      	ldr	r3, [pc, #556]	; (800a974 <_dtoa_r+0x2dc>)
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	3303      	adds	r3, #3
 800a74a:	e7f3      	b.n	800a734 <_dtoa_r+0x9c>
 800a74c:	2200      	movs	r2, #0
 800a74e:	2300      	movs	r3, #0
 800a750:	4650      	mov	r0, sl
 800a752:	4659      	mov	r1, fp
 800a754:	f7f6 f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a758:	ec4b ab19 	vmov	d9, sl, fp
 800a75c:	4680      	mov	r8, r0
 800a75e:	b158      	cbz	r0, 800a778 <_dtoa_r+0xe0>
 800a760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a762:	2301      	movs	r3, #1
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 856b 	beq.w	800b244 <_dtoa_r+0xbac>
 800a76e:	4883      	ldr	r0, [pc, #524]	; (800a97c <_dtoa_r+0x2e4>)
 800a770:	6018      	str	r0, [r3, #0]
 800a772:	1e43      	subs	r3, r0, #1
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	e7df      	b.n	800a738 <_dtoa_r+0xa0>
 800a778:	ec4b ab10 	vmov	d0, sl, fp
 800a77c:	aa10      	add	r2, sp, #64	; 0x40
 800a77e:	a911      	add	r1, sp, #68	; 0x44
 800a780:	4620      	mov	r0, r4
 800a782:	f001 fad9 	bl	800bd38 <__d2b>
 800a786:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a78a:	ee08 0a10 	vmov	s16, r0
 800a78e:	2d00      	cmp	r5, #0
 800a790:	f000 8084 	beq.w	800a89c <_dtoa_r+0x204>
 800a794:	ee19 3a90 	vmov	r3, s19
 800a798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a79c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a7a0:	4656      	mov	r6, sl
 800a7a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a7a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a7ae:	4b74      	ldr	r3, [pc, #464]	; (800a980 <_dtoa_r+0x2e8>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f5 fd6f 	bl	8000298 <__aeabi_dsub>
 800a7ba:	a365      	add	r3, pc, #404	; (adr r3, 800a950 <_dtoa_r+0x2b8>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 ff22 	bl	8000608 <__aeabi_dmul>
 800a7c4:	a364      	add	r3, pc, #400	; (adr r3, 800a958 <_dtoa_r+0x2c0>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 fd67 	bl	800029c <__adddf3>
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	460f      	mov	r7, r1
 800a7d4:	f7f5 feae 	bl	8000534 <__aeabi_i2d>
 800a7d8:	a361      	add	r3, pc, #388	; (adr r3, 800a960 <_dtoa_r+0x2c8>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	f7f5 ff13 	bl	8000608 <__aeabi_dmul>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f5 fd57 	bl	800029c <__adddf3>
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	f7f6 f9b9 	bl	8000b68 <__aeabi_d2iz>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	9000      	str	r0, [sp, #0]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f6 f974 	bl	8000aec <__aeabi_dcmplt>
 800a804:	b150      	cbz	r0, 800a81c <_dtoa_r+0x184>
 800a806:	9800      	ldr	r0, [sp, #0]
 800a808:	f7f5 fe94 	bl	8000534 <__aeabi_i2d>
 800a80c:	4632      	mov	r2, r6
 800a80e:	463b      	mov	r3, r7
 800a810:	f7f6 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 800a814:	b910      	cbnz	r0, 800a81c <_dtoa_r+0x184>
 800a816:	9b00      	ldr	r3, [sp, #0]
 800a818:	3b01      	subs	r3, #1
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	9b00      	ldr	r3, [sp, #0]
 800a81e:	2b16      	cmp	r3, #22
 800a820:	d85a      	bhi.n	800a8d8 <_dtoa_r+0x240>
 800a822:	9a00      	ldr	r2, [sp, #0]
 800a824:	4b57      	ldr	r3, [pc, #348]	; (800a984 <_dtoa_r+0x2ec>)
 800a826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	ec51 0b19 	vmov	r0, r1, d9
 800a832:	f7f6 f95b 	bl	8000aec <__aeabi_dcmplt>
 800a836:	2800      	cmp	r0, #0
 800a838:	d050      	beq.n	800a8dc <_dtoa_r+0x244>
 800a83a:	9b00      	ldr	r3, [sp, #0]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	2300      	movs	r3, #0
 800a842:	930b      	str	r3, [sp, #44]	; 0x2c
 800a844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a846:	1b5d      	subs	r5, r3, r5
 800a848:	1e6b      	subs	r3, r5, #1
 800a84a:	9305      	str	r3, [sp, #20]
 800a84c:	bf45      	ittet	mi
 800a84e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a852:	9304      	strmi	r3, [sp, #16]
 800a854:	2300      	movpl	r3, #0
 800a856:	2300      	movmi	r3, #0
 800a858:	bf4c      	ite	mi
 800a85a:	9305      	strmi	r3, [sp, #20]
 800a85c:	9304      	strpl	r3, [sp, #16]
 800a85e:	9b00      	ldr	r3, [sp, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	db3d      	blt.n	800a8e0 <_dtoa_r+0x248>
 800a864:	9b05      	ldr	r3, [sp, #20]
 800a866:	9a00      	ldr	r2, [sp, #0]
 800a868:	920a      	str	r2, [sp, #40]	; 0x28
 800a86a:	4413      	add	r3, r2
 800a86c:	9305      	str	r3, [sp, #20]
 800a86e:	2300      	movs	r3, #0
 800a870:	9307      	str	r3, [sp, #28]
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	2b09      	cmp	r3, #9
 800a876:	f200 8089 	bhi.w	800a98c <_dtoa_r+0x2f4>
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	bfc4      	itt	gt
 800a87e:	3b04      	subgt	r3, #4
 800a880:	9306      	strgt	r3, [sp, #24]
 800a882:	9b06      	ldr	r3, [sp, #24]
 800a884:	f1a3 0302 	sub.w	r3, r3, #2
 800a888:	bfcc      	ite	gt
 800a88a:	2500      	movgt	r5, #0
 800a88c:	2501      	movle	r5, #1
 800a88e:	2b03      	cmp	r3, #3
 800a890:	f200 8087 	bhi.w	800a9a2 <_dtoa_r+0x30a>
 800a894:	e8df f003 	tbb	[pc, r3]
 800a898:	59383a2d 	.word	0x59383a2d
 800a89c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a8a0:	441d      	add	r5, r3
 800a8a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8a6:	2b20      	cmp	r3, #32
 800a8a8:	bfc1      	itttt	gt
 800a8aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a8b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8ba:	bfda      	itte	le
 800a8bc:	f1c3 0320 	rsble	r3, r3, #32
 800a8c0:	fa06 f003 	lslle.w	r0, r6, r3
 800a8c4:	4318      	orrgt	r0, r3
 800a8c6:	f7f5 fe25 	bl	8000514 <__aeabi_ui2d>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a8d2:	3d01      	subs	r5, #1
 800a8d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a8d6:	e76a      	b.n	800a7ae <_dtoa_r+0x116>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e7b2      	b.n	800a842 <_dtoa_r+0x1aa>
 800a8dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8de:	e7b1      	b.n	800a844 <_dtoa_r+0x1ac>
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	9a00      	ldr	r2, [sp, #0]
 800a8e4:	1a9b      	subs	r3, r3, r2
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	4253      	negs	r3, r2
 800a8ea:	9307      	str	r3, [sp, #28]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a8f0:	e7bf      	b.n	800a872 <_dtoa_r+0x1da>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9308      	str	r3, [sp, #32]
 800a8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dc55      	bgt.n	800a9a8 <_dtoa_r+0x310>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a902:	461a      	mov	r2, r3
 800a904:	9209      	str	r2, [sp, #36]	; 0x24
 800a906:	e00c      	b.n	800a922 <_dtoa_r+0x28a>
 800a908:	2301      	movs	r3, #1
 800a90a:	e7f3      	b.n	800a8f4 <_dtoa_r+0x25c>
 800a90c:	2300      	movs	r3, #0
 800a90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a910:	9308      	str	r3, [sp, #32]
 800a912:	9b00      	ldr	r3, [sp, #0]
 800a914:	4413      	add	r3, r2
 800a916:	9302      	str	r3, [sp, #8]
 800a918:	3301      	adds	r3, #1
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	9303      	str	r3, [sp, #12]
 800a91e:	bfb8      	it	lt
 800a920:	2301      	movlt	r3, #1
 800a922:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a924:	2200      	movs	r2, #0
 800a926:	6042      	str	r2, [r0, #4]
 800a928:	2204      	movs	r2, #4
 800a92a:	f102 0614 	add.w	r6, r2, #20
 800a92e:	429e      	cmp	r6, r3
 800a930:	6841      	ldr	r1, [r0, #4]
 800a932:	d93d      	bls.n	800a9b0 <_dtoa_r+0x318>
 800a934:	4620      	mov	r0, r4
 800a936:	f000 fed7 	bl	800b6e8 <_Balloc>
 800a93a:	9001      	str	r0, [sp, #4]
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d13b      	bne.n	800a9b8 <_dtoa_r+0x320>
 800a940:	4b11      	ldr	r3, [pc, #68]	; (800a988 <_dtoa_r+0x2f0>)
 800a942:	4602      	mov	r2, r0
 800a944:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a948:	e6c0      	b.n	800a6cc <_dtoa_r+0x34>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e7df      	b.n	800a90e <_dtoa_r+0x276>
 800a94e:	bf00      	nop
 800a950:	636f4361 	.word	0x636f4361
 800a954:	3fd287a7 	.word	0x3fd287a7
 800a958:	8b60c8b3 	.word	0x8b60c8b3
 800a95c:	3fc68a28 	.word	0x3fc68a28
 800a960:	509f79fb 	.word	0x509f79fb
 800a964:	3fd34413 	.word	0x3fd34413
 800a968:	0800d5ad 	.word	0x0800d5ad
 800a96c:	0800d5c4 	.word	0x0800d5c4
 800a970:	7ff00000 	.word	0x7ff00000
 800a974:	0800d5a9 	.word	0x0800d5a9
 800a978:	0800d5a0 	.word	0x0800d5a0
 800a97c:	0800d57d 	.word	0x0800d57d
 800a980:	3ff80000 	.word	0x3ff80000
 800a984:	0800d718 	.word	0x0800d718
 800a988:	0800d61f 	.word	0x0800d61f
 800a98c:	2501      	movs	r5, #1
 800a98e:	2300      	movs	r3, #0
 800a990:	9306      	str	r3, [sp, #24]
 800a992:	9508      	str	r5, [sp, #32]
 800a994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a998:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a99c:	2200      	movs	r2, #0
 800a99e:	2312      	movs	r3, #18
 800a9a0:	e7b0      	b.n	800a904 <_dtoa_r+0x26c>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	9308      	str	r3, [sp, #32]
 800a9a6:	e7f5      	b.n	800a994 <_dtoa_r+0x2fc>
 800a9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9ae:	e7b8      	b.n	800a922 <_dtoa_r+0x28a>
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	6041      	str	r1, [r0, #4]
 800a9b4:	0052      	lsls	r2, r2, #1
 800a9b6:	e7b8      	b.n	800a92a <_dtoa_r+0x292>
 800a9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ba:	9a01      	ldr	r2, [sp, #4]
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	2b0e      	cmp	r3, #14
 800a9c2:	f200 809d 	bhi.w	800ab00 <_dtoa_r+0x468>
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	f000 809a 	beq.w	800ab00 <_dtoa_r+0x468>
 800a9cc:	9b00      	ldr	r3, [sp, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dd32      	ble.n	800aa38 <_dtoa_r+0x3a0>
 800a9d2:	4ab7      	ldr	r2, [pc, #732]	; (800acb0 <_dtoa_r+0x618>)
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9e0:	9b00      	ldr	r3, [sp, #0]
 800a9e2:	05d8      	lsls	r0, r3, #23
 800a9e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a9e8:	d516      	bpl.n	800aa18 <_dtoa_r+0x380>
 800a9ea:	4bb2      	ldr	r3, [pc, #712]	; (800acb4 <_dtoa_r+0x61c>)
 800a9ec:	ec51 0b19 	vmov	r0, r1, d9
 800a9f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9f4:	f7f5 ff32 	bl	800085c <__aeabi_ddiv>
 800a9f8:	f007 070f 	and.w	r7, r7, #15
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	468b      	mov	fp, r1
 800aa00:	2503      	movs	r5, #3
 800aa02:	4eac      	ldr	r6, [pc, #688]	; (800acb4 <_dtoa_r+0x61c>)
 800aa04:	b957      	cbnz	r7, 800aa1c <_dtoa_r+0x384>
 800aa06:	4642      	mov	r2, r8
 800aa08:	464b      	mov	r3, r9
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	4659      	mov	r1, fp
 800aa0e:	f7f5 ff25 	bl	800085c <__aeabi_ddiv>
 800aa12:	4682      	mov	sl, r0
 800aa14:	468b      	mov	fp, r1
 800aa16:	e028      	b.n	800aa6a <_dtoa_r+0x3d2>
 800aa18:	2502      	movs	r5, #2
 800aa1a:	e7f2      	b.n	800aa02 <_dtoa_r+0x36a>
 800aa1c:	07f9      	lsls	r1, r7, #31
 800aa1e:	d508      	bpl.n	800aa32 <_dtoa_r+0x39a>
 800aa20:	4640      	mov	r0, r8
 800aa22:	4649      	mov	r1, r9
 800aa24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa28:	f7f5 fdee 	bl	8000608 <__aeabi_dmul>
 800aa2c:	3501      	adds	r5, #1
 800aa2e:	4680      	mov	r8, r0
 800aa30:	4689      	mov	r9, r1
 800aa32:	107f      	asrs	r7, r7, #1
 800aa34:	3608      	adds	r6, #8
 800aa36:	e7e5      	b.n	800aa04 <_dtoa_r+0x36c>
 800aa38:	f000 809b 	beq.w	800ab72 <_dtoa_r+0x4da>
 800aa3c:	9b00      	ldr	r3, [sp, #0]
 800aa3e:	4f9d      	ldr	r7, [pc, #628]	; (800acb4 <_dtoa_r+0x61c>)
 800aa40:	425e      	negs	r6, r3
 800aa42:	4b9b      	ldr	r3, [pc, #620]	; (800acb0 <_dtoa_r+0x618>)
 800aa44:	f006 020f 	and.w	r2, r6, #15
 800aa48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	ec51 0b19 	vmov	r0, r1, d9
 800aa54:	f7f5 fdd8 	bl	8000608 <__aeabi_dmul>
 800aa58:	1136      	asrs	r6, r6, #4
 800aa5a:	4682      	mov	sl, r0
 800aa5c:	468b      	mov	fp, r1
 800aa5e:	2300      	movs	r3, #0
 800aa60:	2502      	movs	r5, #2
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	d17a      	bne.n	800ab5c <_dtoa_r+0x4c4>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1d3      	bne.n	800aa12 <_dtoa_r+0x37a>
 800aa6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 8082 	beq.w	800ab76 <_dtoa_r+0x4de>
 800aa72:	4b91      	ldr	r3, [pc, #580]	; (800acb8 <_dtoa_r+0x620>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	4650      	mov	r0, sl
 800aa78:	4659      	mov	r1, fp
 800aa7a:	f7f6 f837 	bl	8000aec <__aeabi_dcmplt>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d079      	beq.n	800ab76 <_dtoa_r+0x4de>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d076      	beq.n	800ab76 <_dtoa_r+0x4de>
 800aa88:	9b02      	ldr	r3, [sp, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd36      	ble.n	800aafc <_dtoa_r+0x464>
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	4650      	mov	r0, sl
 800aa92:	4659      	mov	r1, fp
 800aa94:	1e5f      	subs	r7, r3, #1
 800aa96:	2200      	movs	r2, #0
 800aa98:	4b88      	ldr	r3, [pc, #544]	; (800acbc <_dtoa_r+0x624>)
 800aa9a:	f7f5 fdb5 	bl	8000608 <__aeabi_dmul>
 800aa9e:	9e02      	ldr	r6, [sp, #8]
 800aaa0:	4682      	mov	sl, r0
 800aaa2:	468b      	mov	fp, r1
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f7f5 fd44 	bl	8000534 <__aeabi_i2d>
 800aaac:	4652      	mov	r2, sl
 800aaae:	465b      	mov	r3, fp
 800aab0:	f7f5 fdaa 	bl	8000608 <__aeabi_dmul>
 800aab4:	4b82      	ldr	r3, [pc, #520]	; (800acc0 <_dtoa_r+0x628>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	f7f5 fbf0 	bl	800029c <__adddf3>
 800aabc:	46d0      	mov	r8, sl
 800aabe:	46d9      	mov	r9, fp
 800aac0:	4682      	mov	sl, r0
 800aac2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aac6:	2e00      	cmp	r6, #0
 800aac8:	d158      	bne.n	800ab7c <_dtoa_r+0x4e4>
 800aaca:	4b7e      	ldr	r3, [pc, #504]	; (800acc4 <_dtoa_r+0x62c>)
 800aacc:	2200      	movs	r2, #0
 800aace:	4640      	mov	r0, r8
 800aad0:	4649      	mov	r1, r9
 800aad2:	f7f5 fbe1 	bl	8000298 <__aeabi_dsub>
 800aad6:	4652      	mov	r2, sl
 800aad8:	465b      	mov	r3, fp
 800aada:	4680      	mov	r8, r0
 800aadc:	4689      	mov	r9, r1
 800aade:	f7f6 f823 	bl	8000b28 <__aeabi_dcmpgt>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	f040 8295 	bne.w	800b012 <_dtoa_r+0x97a>
 800aae8:	4652      	mov	r2, sl
 800aaea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aaee:	4640      	mov	r0, r8
 800aaf0:	4649      	mov	r1, r9
 800aaf2:	f7f5 fffb 	bl	8000aec <__aeabi_dcmplt>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f040 8289 	bne.w	800b00e <_dtoa_r+0x976>
 800aafc:	ec5b ab19 	vmov	sl, fp, d9
 800ab00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f2c0 8148 	blt.w	800ad98 <_dtoa_r+0x700>
 800ab08:	9a00      	ldr	r2, [sp, #0]
 800ab0a:	2a0e      	cmp	r2, #14
 800ab0c:	f300 8144 	bgt.w	800ad98 <_dtoa_r+0x700>
 800ab10:	4b67      	ldr	r3, [pc, #412]	; (800acb0 <_dtoa_r+0x618>)
 800ab12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f280 80d5 	bge.w	800accc <_dtoa_r+0x634>
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f300 80d1 	bgt.w	800accc <_dtoa_r+0x634>
 800ab2a:	f040 826f 	bne.w	800b00c <_dtoa_r+0x974>
 800ab2e:	4b65      	ldr	r3, [pc, #404]	; (800acc4 <_dtoa_r+0x62c>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	4640      	mov	r0, r8
 800ab34:	4649      	mov	r1, r9
 800ab36:	f7f5 fd67 	bl	8000608 <__aeabi_dmul>
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	465b      	mov	r3, fp
 800ab3e:	f7f5 ffe9 	bl	8000b14 <__aeabi_dcmpge>
 800ab42:	9e03      	ldr	r6, [sp, #12]
 800ab44:	4637      	mov	r7, r6
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f040 8245 	bne.w	800afd6 <_dtoa_r+0x93e>
 800ab4c:	9d01      	ldr	r5, [sp, #4]
 800ab4e:	2331      	movs	r3, #49	; 0x31
 800ab50:	f805 3b01 	strb.w	r3, [r5], #1
 800ab54:	9b00      	ldr	r3, [sp, #0]
 800ab56:	3301      	adds	r3, #1
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	e240      	b.n	800afde <_dtoa_r+0x946>
 800ab5c:	07f2      	lsls	r2, r6, #31
 800ab5e:	d505      	bpl.n	800ab6c <_dtoa_r+0x4d4>
 800ab60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab64:	f7f5 fd50 	bl	8000608 <__aeabi_dmul>
 800ab68:	3501      	adds	r5, #1
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	1076      	asrs	r6, r6, #1
 800ab6e:	3708      	adds	r7, #8
 800ab70:	e777      	b.n	800aa62 <_dtoa_r+0x3ca>
 800ab72:	2502      	movs	r5, #2
 800ab74:	e779      	b.n	800aa6a <_dtoa_r+0x3d2>
 800ab76:	9f00      	ldr	r7, [sp, #0]
 800ab78:	9e03      	ldr	r6, [sp, #12]
 800ab7a:	e794      	b.n	800aaa6 <_dtoa_r+0x40e>
 800ab7c:	9901      	ldr	r1, [sp, #4]
 800ab7e:	4b4c      	ldr	r3, [pc, #304]	; (800acb0 <_dtoa_r+0x618>)
 800ab80:	4431      	add	r1, r6
 800ab82:	910d      	str	r1, [sp, #52]	; 0x34
 800ab84:	9908      	ldr	r1, [sp, #32]
 800ab86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab8e:	2900      	cmp	r1, #0
 800ab90:	d043      	beq.n	800ac1a <_dtoa_r+0x582>
 800ab92:	494d      	ldr	r1, [pc, #308]	; (800acc8 <_dtoa_r+0x630>)
 800ab94:	2000      	movs	r0, #0
 800ab96:	f7f5 fe61 	bl	800085c <__aeabi_ddiv>
 800ab9a:	4652      	mov	r2, sl
 800ab9c:	465b      	mov	r3, fp
 800ab9e:	f7f5 fb7b 	bl	8000298 <__aeabi_dsub>
 800aba2:	9d01      	ldr	r5, [sp, #4]
 800aba4:	4682      	mov	sl, r0
 800aba6:	468b      	mov	fp, r1
 800aba8:	4649      	mov	r1, r9
 800abaa:	4640      	mov	r0, r8
 800abac:	f7f5 ffdc 	bl	8000b68 <__aeabi_d2iz>
 800abb0:	4606      	mov	r6, r0
 800abb2:	f7f5 fcbf 	bl	8000534 <__aeabi_i2d>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	4640      	mov	r0, r8
 800abbc:	4649      	mov	r1, r9
 800abbe:	f7f5 fb6b 	bl	8000298 <__aeabi_dsub>
 800abc2:	3630      	adds	r6, #48	; 0x30
 800abc4:	f805 6b01 	strb.w	r6, [r5], #1
 800abc8:	4652      	mov	r2, sl
 800abca:	465b      	mov	r3, fp
 800abcc:	4680      	mov	r8, r0
 800abce:	4689      	mov	r9, r1
 800abd0:	f7f5 ff8c 	bl	8000aec <__aeabi_dcmplt>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d163      	bne.n	800aca0 <_dtoa_r+0x608>
 800abd8:	4642      	mov	r2, r8
 800abda:	464b      	mov	r3, r9
 800abdc:	4936      	ldr	r1, [pc, #216]	; (800acb8 <_dtoa_r+0x620>)
 800abde:	2000      	movs	r0, #0
 800abe0:	f7f5 fb5a 	bl	8000298 <__aeabi_dsub>
 800abe4:	4652      	mov	r2, sl
 800abe6:	465b      	mov	r3, fp
 800abe8:	f7f5 ff80 	bl	8000aec <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	f040 80b5 	bne.w	800ad5c <_dtoa_r+0x6c4>
 800abf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abf4:	429d      	cmp	r5, r3
 800abf6:	d081      	beq.n	800aafc <_dtoa_r+0x464>
 800abf8:	4b30      	ldr	r3, [pc, #192]	; (800acbc <_dtoa_r+0x624>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	4650      	mov	r0, sl
 800abfe:	4659      	mov	r1, fp
 800ac00:	f7f5 fd02 	bl	8000608 <__aeabi_dmul>
 800ac04:	4b2d      	ldr	r3, [pc, #180]	; (800acbc <_dtoa_r+0x624>)
 800ac06:	4682      	mov	sl, r0
 800ac08:	468b      	mov	fp, r1
 800ac0a:	4640      	mov	r0, r8
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f7f5 fcfa 	bl	8000608 <__aeabi_dmul>
 800ac14:	4680      	mov	r8, r0
 800ac16:	4689      	mov	r9, r1
 800ac18:	e7c6      	b.n	800aba8 <_dtoa_r+0x510>
 800ac1a:	4650      	mov	r0, sl
 800ac1c:	4659      	mov	r1, fp
 800ac1e:	f7f5 fcf3 	bl	8000608 <__aeabi_dmul>
 800ac22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac24:	9d01      	ldr	r5, [sp, #4]
 800ac26:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac28:	4682      	mov	sl, r0
 800ac2a:	468b      	mov	fp, r1
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	4640      	mov	r0, r8
 800ac30:	f7f5 ff9a 	bl	8000b68 <__aeabi_d2iz>
 800ac34:	4606      	mov	r6, r0
 800ac36:	f7f5 fc7d 	bl	8000534 <__aeabi_i2d>
 800ac3a:	3630      	adds	r6, #48	; 0x30
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	f7f5 fb28 	bl	8000298 <__aeabi_dsub>
 800ac48:	f805 6b01 	strb.w	r6, [r5], #1
 800ac4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac4e:	429d      	cmp	r5, r3
 800ac50:	4680      	mov	r8, r0
 800ac52:	4689      	mov	r9, r1
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	d124      	bne.n	800aca4 <_dtoa_r+0x60c>
 800ac5a:	4b1b      	ldr	r3, [pc, #108]	; (800acc8 <_dtoa_r+0x630>)
 800ac5c:	4650      	mov	r0, sl
 800ac5e:	4659      	mov	r1, fp
 800ac60:	f7f5 fb1c 	bl	800029c <__adddf3>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4640      	mov	r0, r8
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	f7f5 ff5c 	bl	8000b28 <__aeabi_dcmpgt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d173      	bne.n	800ad5c <_dtoa_r+0x6c4>
 800ac74:	4652      	mov	r2, sl
 800ac76:	465b      	mov	r3, fp
 800ac78:	4913      	ldr	r1, [pc, #76]	; (800acc8 <_dtoa_r+0x630>)
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	f7f5 fb0c 	bl	8000298 <__aeabi_dsub>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4640      	mov	r0, r8
 800ac86:	4649      	mov	r1, r9
 800ac88:	f7f5 ff30 	bl	8000aec <__aeabi_dcmplt>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f43f af35 	beq.w	800aafc <_dtoa_r+0x464>
 800ac92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac94:	1e6b      	subs	r3, r5, #1
 800ac96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac9c:	2b30      	cmp	r3, #48	; 0x30
 800ac9e:	d0f8      	beq.n	800ac92 <_dtoa_r+0x5fa>
 800aca0:	9700      	str	r7, [sp, #0]
 800aca2:	e049      	b.n	800ad38 <_dtoa_r+0x6a0>
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <_dtoa_r+0x624>)
 800aca6:	f7f5 fcaf 	bl	8000608 <__aeabi_dmul>
 800acaa:	4680      	mov	r8, r0
 800acac:	4689      	mov	r9, r1
 800acae:	e7bd      	b.n	800ac2c <_dtoa_r+0x594>
 800acb0:	0800d718 	.word	0x0800d718
 800acb4:	0800d6f0 	.word	0x0800d6f0
 800acb8:	3ff00000 	.word	0x3ff00000
 800acbc:	40240000 	.word	0x40240000
 800acc0:	401c0000 	.word	0x401c0000
 800acc4:	40140000 	.word	0x40140000
 800acc8:	3fe00000 	.word	0x3fe00000
 800accc:	9d01      	ldr	r5, [sp, #4]
 800acce:	4656      	mov	r6, sl
 800acd0:	465f      	mov	r7, fp
 800acd2:	4642      	mov	r2, r8
 800acd4:	464b      	mov	r3, r9
 800acd6:	4630      	mov	r0, r6
 800acd8:	4639      	mov	r1, r7
 800acda:	f7f5 fdbf 	bl	800085c <__aeabi_ddiv>
 800acde:	f7f5 ff43 	bl	8000b68 <__aeabi_d2iz>
 800ace2:	4682      	mov	sl, r0
 800ace4:	f7f5 fc26 	bl	8000534 <__aeabi_i2d>
 800ace8:	4642      	mov	r2, r8
 800acea:	464b      	mov	r3, r9
 800acec:	f7f5 fc8c 	bl	8000608 <__aeabi_dmul>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4630      	mov	r0, r6
 800acf6:	4639      	mov	r1, r7
 800acf8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800acfc:	f7f5 facc 	bl	8000298 <__aeabi_dsub>
 800ad00:	f805 6b01 	strb.w	r6, [r5], #1
 800ad04:	9e01      	ldr	r6, [sp, #4]
 800ad06:	9f03      	ldr	r7, [sp, #12]
 800ad08:	1bae      	subs	r6, r5, r6
 800ad0a:	42b7      	cmp	r7, r6
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	d135      	bne.n	800ad7e <_dtoa_r+0x6e6>
 800ad12:	f7f5 fac3 	bl	800029c <__adddf3>
 800ad16:	4642      	mov	r2, r8
 800ad18:	464b      	mov	r3, r9
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	f7f5 ff03 	bl	8000b28 <__aeabi_dcmpgt>
 800ad22:	b9d0      	cbnz	r0, 800ad5a <_dtoa_r+0x6c2>
 800ad24:	4642      	mov	r2, r8
 800ad26:	464b      	mov	r3, r9
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	f7f5 fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad30:	b110      	cbz	r0, 800ad38 <_dtoa_r+0x6a0>
 800ad32:	f01a 0f01 	tst.w	sl, #1
 800ad36:	d110      	bne.n	800ad5a <_dtoa_r+0x6c2>
 800ad38:	4620      	mov	r0, r4
 800ad3a:	ee18 1a10 	vmov	r1, s16
 800ad3e:	f000 fd13 	bl	800b768 <_Bfree>
 800ad42:	2300      	movs	r3, #0
 800ad44:	9800      	ldr	r0, [sp, #0]
 800ad46:	702b      	strb	r3, [r5, #0]
 800ad48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	6018      	str	r0, [r3, #0]
 800ad4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f43f acf1 	beq.w	800a738 <_dtoa_r+0xa0>
 800ad56:	601d      	str	r5, [r3, #0]
 800ad58:	e4ee      	b.n	800a738 <_dtoa_r+0xa0>
 800ad5a:	9f00      	ldr	r7, [sp, #0]
 800ad5c:	462b      	mov	r3, r5
 800ad5e:	461d      	mov	r5, r3
 800ad60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad64:	2a39      	cmp	r2, #57	; 0x39
 800ad66:	d106      	bne.n	800ad76 <_dtoa_r+0x6de>
 800ad68:	9a01      	ldr	r2, [sp, #4]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d1f7      	bne.n	800ad5e <_dtoa_r+0x6c6>
 800ad6e:	9901      	ldr	r1, [sp, #4]
 800ad70:	2230      	movs	r2, #48	; 0x30
 800ad72:	3701      	adds	r7, #1
 800ad74:	700a      	strb	r2, [r1, #0]
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	3201      	adds	r2, #1
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e790      	b.n	800aca0 <_dtoa_r+0x608>
 800ad7e:	4ba6      	ldr	r3, [pc, #664]	; (800b018 <_dtoa_r+0x980>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	f7f5 fc41 	bl	8000608 <__aeabi_dmul>
 800ad86:	2200      	movs	r2, #0
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	f7f5 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d09d      	beq.n	800acd2 <_dtoa_r+0x63a>
 800ad96:	e7cf      	b.n	800ad38 <_dtoa_r+0x6a0>
 800ad98:	9a08      	ldr	r2, [sp, #32]
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	f000 80d7 	beq.w	800af4e <_dtoa_r+0x8b6>
 800ada0:	9a06      	ldr	r2, [sp, #24]
 800ada2:	2a01      	cmp	r2, #1
 800ada4:	f300 80ba 	bgt.w	800af1c <_dtoa_r+0x884>
 800ada8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adaa:	2a00      	cmp	r2, #0
 800adac:	f000 80b2 	beq.w	800af14 <_dtoa_r+0x87c>
 800adb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adb4:	9e07      	ldr	r6, [sp, #28]
 800adb6:	9d04      	ldr	r5, [sp, #16]
 800adb8:	9a04      	ldr	r2, [sp, #16]
 800adba:	441a      	add	r2, r3
 800adbc:	9204      	str	r2, [sp, #16]
 800adbe:	9a05      	ldr	r2, [sp, #20]
 800adc0:	2101      	movs	r1, #1
 800adc2:	441a      	add	r2, r3
 800adc4:	4620      	mov	r0, r4
 800adc6:	9205      	str	r2, [sp, #20]
 800adc8:	f000 fd86 	bl	800b8d8 <__i2b>
 800adcc:	4607      	mov	r7, r0
 800adce:	2d00      	cmp	r5, #0
 800add0:	dd0c      	ble.n	800adec <_dtoa_r+0x754>
 800add2:	9b05      	ldr	r3, [sp, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	dd09      	ble.n	800adec <_dtoa_r+0x754>
 800add8:	42ab      	cmp	r3, r5
 800adda:	9a04      	ldr	r2, [sp, #16]
 800addc:	bfa8      	it	ge
 800adde:	462b      	movge	r3, r5
 800ade0:	1ad2      	subs	r2, r2, r3
 800ade2:	9204      	str	r2, [sp, #16]
 800ade4:	9a05      	ldr	r2, [sp, #20]
 800ade6:	1aed      	subs	r5, r5, r3
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	9305      	str	r3, [sp, #20]
 800adec:	9b07      	ldr	r3, [sp, #28]
 800adee:	b31b      	cbz	r3, 800ae38 <_dtoa_r+0x7a0>
 800adf0:	9b08      	ldr	r3, [sp, #32]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 80af 	beq.w	800af56 <_dtoa_r+0x8be>
 800adf8:	2e00      	cmp	r6, #0
 800adfa:	dd13      	ble.n	800ae24 <_dtoa_r+0x78c>
 800adfc:	4639      	mov	r1, r7
 800adfe:	4632      	mov	r2, r6
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 fe29 	bl	800ba58 <__pow5mult>
 800ae06:	ee18 2a10 	vmov	r2, s16
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	4607      	mov	r7, r0
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 fd78 	bl	800b904 <__multiply>
 800ae14:	ee18 1a10 	vmov	r1, s16
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fca4 	bl	800b768 <_Bfree>
 800ae20:	ee08 8a10 	vmov	s16, r8
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	1b9a      	subs	r2, r3, r6
 800ae28:	d006      	beq.n	800ae38 <_dtoa_r+0x7a0>
 800ae2a:	ee18 1a10 	vmov	r1, s16
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fe12 	bl	800ba58 <__pow5mult>
 800ae34:	ee08 0a10 	vmov	s16, r0
 800ae38:	2101      	movs	r1, #1
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f000 fd4c 	bl	800b8d8 <__i2b>
 800ae40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	4606      	mov	r6, r0
 800ae46:	f340 8088 	ble.w	800af5a <_dtoa_r+0x8c2>
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	4601      	mov	r1, r0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 fe02 	bl	800ba58 <__pow5mult>
 800ae54:	9b06      	ldr	r3, [sp, #24]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	4606      	mov	r6, r0
 800ae5a:	f340 8081 	ble.w	800af60 <_dtoa_r+0x8c8>
 800ae5e:	f04f 0800 	mov.w	r8, #0
 800ae62:	6933      	ldr	r3, [r6, #16]
 800ae64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae68:	6918      	ldr	r0, [r3, #16]
 800ae6a:	f000 fce5 	bl	800b838 <__hi0bits>
 800ae6e:	f1c0 0020 	rsb	r0, r0, #32
 800ae72:	9b05      	ldr	r3, [sp, #20]
 800ae74:	4418      	add	r0, r3
 800ae76:	f010 001f 	ands.w	r0, r0, #31
 800ae7a:	f000 8092 	beq.w	800afa2 <_dtoa_r+0x90a>
 800ae7e:	f1c0 0320 	rsb	r3, r0, #32
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	f340 808a 	ble.w	800af9c <_dtoa_r+0x904>
 800ae88:	f1c0 001c 	rsb	r0, r0, #28
 800ae8c:	9b04      	ldr	r3, [sp, #16]
 800ae8e:	4403      	add	r3, r0
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	9b05      	ldr	r3, [sp, #20]
 800ae94:	4403      	add	r3, r0
 800ae96:	4405      	add	r5, r0
 800ae98:	9305      	str	r3, [sp, #20]
 800ae9a:	9b04      	ldr	r3, [sp, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dd07      	ble.n	800aeb0 <_dtoa_r+0x818>
 800aea0:	ee18 1a10 	vmov	r1, s16
 800aea4:	461a      	mov	r2, r3
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 fe30 	bl	800bb0c <__lshift>
 800aeac:	ee08 0a10 	vmov	s16, r0
 800aeb0:	9b05      	ldr	r3, [sp, #20]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	dd05      	ble.n	800aec2 <_dtoa_r+0x82a>
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 fe26 	bl	800bb0c <__lshift>
 800aec0:	4606      	mov	r6, r0
 800aec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d06e      	beq.n	800afa6 <_dtoa_r+0x90e>
 800aec8:	ee18 0a10 	vmov	r0, s16
 800aecc:	4631      	mov	r1, r6
 800aece:	f000 fe8d 	bl	800bbec <__mcmp>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	da67      	bge.n	800afa6 <_dtoa_r+0x90e>
 800aed6:	9b00      	ldr	r3, [sp, #0]
 800aed8:	3b01      	subs	r3, #1
 800aeda:	ee18 1a10 	vmov	r1, s16
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	220a      	movs	r2, #10
 800aee2:	2300      	movs	r3, #0
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fc61 	bl	800b7ac <__multadd>
 800aeea:	9b08      	ldr	r3, [sp, #32]
 800aeec:	ee08 0a10 	vmov	s16, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 81b1 	beq.w	800b258 <_dtoa_r+0xbc0>
 800aef6:	2300      	movs	r3, #0
 800aef8:	4639      	mov	r1, r7
 800aefa:	220a      	movs	r2, #10
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 fc55 	bl	800b7ac <__multadd>
 800af02:	9b02      	ldr	r3, [sp, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	4607      	mov	r7, r0
 800af08:	f300 808e 	bgt.w	800b028 <_dtoa_r+0x990>
 800af0c:	9b06      	ldr	r3, [sp, #24]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	dc51      	bgt.n	800afb6 <_dtoa_r+0x91e>
 800af12:	e089      	b.n	800b028 <_dtoa_r+0x990>
 800af14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af1a:	e74b      	b.n	800adb4 <_dtoa_r+0x71c>
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	1e5e      	subs	r6, r3, #1
 800af20:	9b07      	ldr	r3, [sp, #28]
 800af22:	42b3      	cmp	r3, r6
 800af24:	bfbf      	itttt	lt
 800af26:	9b07      	ldrlt	r3, [sp, #28]
 800af28:	9607      	strlt	r6, [sp, #28]
 800af2a:	1af2      	sublt	r2, r6, r3
 800af2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af2e:	bfb6      	itet	lt
 800af30:	189b      	addlt	r3, r3, r2
 800af32:	1b9e      	subge	r6, r3, r6
 800af34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	bfb8      	it	lt
 800af3a:	2600      	movlt	r6, #0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bfb7      	itett	lt
 800af40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af48:	1a9d      	sublt	r5, r3, r2
 800af4a:	2300      	movlt	r3, #0
 800af4c:	e734      	b.n	800adb8 <_dtoa_r+0x720>
 800af4e:	9e07      	ldr	r6, [sp, #28]
 800af50:	9d04      	ldr	r5, [sp, #16]
 800af52:	9f08      	ldr	r7, [sp, #32]
 800af54:	e73b      	b.n	800adce <_dtoa_r+0x736>
 800af56:	9a07      	ldr	r2, [sp, #28]
 800af58:	e767      	b.n	800ae2a <_dtoa_r+0x792>
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	dc18      	bgt.n	800af92 <_dtoa_r+0x8fa>
 800af60:	f1ba 0f00 	cmp.w	sl, #0
 800af64:	d115      	bne.n	800af92 <_dtoa_r+0x8fa>
 800af66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af6a:	b993      	cbnz	r3, 800af92 <_dtoa_r+0x8fa>
 800af6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af70:	0d1b      	lsrs	r3, r3, #20
 800af72:	051b      	lsls	r3, r3, #20
 800af74:	b183      	cbz	r3, 800af98 <_dtoa_r+0x900>
 800af76:	9b04      	ldr	r3, [sp, #16]
 800af78:	3301      	adds	r3, #1
 800af7a:	9304      	str	r3, [sp, #16]
 800af7c:	9b05      	ldr	r3, [sp, #20]
 800af7e:	3301      	adds	r3, #1
 800af80:	9305      	str	r3, [sp, #20]
 800af82:	f04f 0801 	mov.w	r8, #1
 800af86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f47f af6a 	bne.w	800ae62 <_dtoa_r+0x7ca>
 800af8e:	2001      	movs	r0, #1
 800af90:	e76f      	b.n	800ae72 <_dtoa_r+0x7da>
 800af92:	f04f 0800 	mov.w	r8, #0
 800af96:	e7f6      	b.n	800af86 <_dtoa_r+0x8ee>
 800af98:	4698      	mov	r8, r3
 800af9a:	e7f4      	b.n	800af86 <_dtoa_r+0x8ee>
 800af9c:	f43f af7d 	beq.w	800ae9a <_dtoa_r+0x802>
 800afa0:	4618      	mov	r0, r3
 800afa2:	301c      	adds	r0, #28
 800afa4:	e772      	b.n	800ae8c <_dtoa_r+0x7f4>
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	dc37      	bgt.n	800b01c <_dtoa_r+0x984>
 800afac:	9b06      	ldr	r3, [sp, #24]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	dd34      	ble.n	800b01c <_dtoa_r+0x984>
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	9302      	str	r3, [sp, #8]
 800afb6:	9b02      	ldr	r3, [sp, #8]
 800afb8:	b96b      	cbnz	r3, 800afd6 <_dtoa_r+0x93e>
 800afba:	4631      	mov	r1, r6
 800afbc:	2205      	movs	r2, #5
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fbf4 	bl	800b7ac <__multadd>
 800afc4:	4601      	mov	r1, r0
 800afc6:	4606      	mov	r6, r0
 800afc8:	ee18 0a10 	vmov	r0, s16
 800afcc:	f000 fe0e 	bl	800bbec <__mcmp>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	f73f adbb 	bgt.w	800ab4c <_dtoa_r+0x4b4>
 800afd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd8:	9d01      	ldr	r5, [sp, #4]
 800afda:	43db      	mvns	r3, r3
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	f04f 0800 	mov.w	r8, #0
 800afe2:	4631      	mov	r1, r6
 800afe4:	4620      	mov	r0, r4
 800afe6:	f000 fbbf 	bl	800b768 <_Bfree>
 800afea:	2f00      	cmp	r7, #0
 800afec:	f43f aea4 	beq.w	800ad38 <_dtoa_r+0x6a0>
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	d005      	beq.n	800b002 <_dtoa_r+0x96a>
 800aff6:	45b8      	cmp	r8, r7
 800aff8:	d003      	beq.n	800b002 <_dtoa_r+0x96a>
 800affa:	4641      	mov	r1, r8
 800affc:	4620      	mov	r0, r4
 800affe:	f000 fbb3 	bl	800b768 <_Bfree>
 800b002:	4639      	mov	r1, r7
 800b004:	4620      	mov	r0, r4
 800b006:	f000 fbaf 	bl	800b768 <_Bfree>
 800b00a:	e695      	b.n	800ad38 <_dtoa_r+0x6a0>
 800b00c:	2600      	movs	r6, #0
 800b00e:	4637      	mov	r7, r6
 800b010:	e7e1      	b.n	800afd6 <_dtoa_r+0x93e>
 800b012:	9700      	str	r7, [sp, #0]
 800b014:	4637      	mov	r7, r6
 800b016:	e599      	b.n	800ab4c <_dtoa_r+0x4b4>
 800b018:	40240000 	.word	0x40240000
 800b01c:	9b08      	ldr	r3, [sp, #32]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 80ca 	beq.w	800b1b8 <_dtoa_r+0xb20>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	9302      	str	r3, [sp, #8]
 800b028:	2d00      	cmp	r5, #0
 800b02a:	dd05      	ble.n	800b038 <_dtoa_r+0x9a0>
 800b02c:	4639      	mov	r1, r7
 800b02e:	462a      	mov	r2, r5
 800b030:	4620      	mov	r0, r4
 800b032:	f000 fd6b 	bl	800bb0c <__lshift>
 800b036:	4607      	mov	r7, r0
 800b038:	f1b8 0f00 	cmp.w	r8, #0
 800b03c:	d05b      	beq.n	800b0f6 <_dtoa_r+0xa5e>
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4620      	mov	r0, r4
 800b042:	f000 fb51 	bl	800b6e8 <_Balloc>
 800b046:	4605      	mov	r5, r0
 800b048:	b928      	cbnz	r0, 800b056 <_dtoa_r+0x9be>
 800b04a:	4b87      	ldr	r3, [pc, #540]	; (800b268 <_dtoa_r+0xbd0>)
 800b04c:	4602      	mov	r2, r0
 800b04e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b052:	f7ff bb3b 	b.w	800a6cc <_dtoa_r+0x34>
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	3202      	adds	r2, #2
 800b05a:	0092      	lsls	r2, r2, #2
 800b05c:	f107 010c 	add.w	r1, r7, #12
 800b060:	300c      	adds	r0, #12
 800b062:	f000 fb33 	bl	800b6cc <memcpy>
 800b066:	2201      	movs	r2, #1
 800b068:	4629      	mov	r1, r5
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 fd4e 	bl	800bb0c <__lshift>
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	f103 0901 	add.w	r9, r3, #1
 800b076:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b07a:	4413      	add	r3, r2
 800b07c:	9305      	str	r3, [sp, #20]
 800b07e:	f00a 0301 	and.w	r3, sl, #1
 800b082:	46b8      	mov	r8, r7
 800b084:	9304      	str	r3, [sp, #16]
 800b086:	4607      	mov	r7, r0
 800b088:	4631      	mov	r1, r6
 800b08a:	ee18 0a10 	vmov	r0, s16
 800b08e:	f7ff fa75 	bl	800a57c <quorem>
 800b092:	4641      	mov	r1, r8
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b09a:	ee18 0a10 	vmov	r0, s16
 800b09e:	f000 fda5 	bl	800bbec <__mcmp>
 800b0a2:	463a      	mov	r2, r7
 800b0a4:	9003      	str	r0, [sp, #12]
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fdbb 	bl	800bc24 <__mdiff>
 800b0ae:	68c2      	ldr	r2, [r0, #12]
 800b0b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	bb02      	cbnz	r2, 800b0fa <_dtoa_r+0xa62>
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	ee18 0a10 	vmov	r0, s16
 800b0be:	f000 fd95 	bl	800bbec <__mcmp>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	9207      	str	r2, [sp, #28]
 800b0ca:	f000 fb4d 	bl	800b768 <_Bfree>
 800b0ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b0d2:	ea43 0102 	orr.w	r1, r3, r2
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	464d      	mov	r5, r9
 800b0dc:	d10f      	bne.n	800b0fe <_dtoa_r+0xa66>
 800b0de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0e2:	d02a      	beq.n	800b13a <_dtoa_r+0xaa2>
 800b0e4:	9b03      	ldr	r3, [sp, #12]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dd02      	ble.n	800b0f0 <_dtoa_r+0xa58>
 800b0ea:	9b02      	ldr	r3, [sp, #8]
 800b0ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b0f0:	f88b a000 	strb.w	sl, [fp]
 800b0f4:	e775      	b.n	800afe2 <_dtoa_r+0x94a>
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	e7ba      	b.n	800b070 <_dtoa_r+0x9d8>
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	e7e2      	b.n	800b0c4 <_dtoa_r+0xa2c>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	db04      	blt.n	800b10e <_dtoa_r+0xa76>
 800b104:	9906      	ldr	r1, [sp, #24]
 800b106:	430b      	orrs	r3, r1
 800b108:	9904      	ldr	r1, [sp, #16]
 800b10a:	430b      	orrs	r3, r1
 800b10c:	d122      	bne.n	800b154 <_dtoa_r+0xabc>
 800b10e:	2a00      	cmp	r2, #0
 800b110:	ddee      	ble.n	800b0f0 <_dtoa_r+0xa58>
 800b112:	ee18 1a10 	vmov	r1, s16
 800b116:	2201      	movs	r2, #1
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fcf7 	bl	800bb0c <__lshift>
 800b11e:	4631      	mov	r1, r6
 800b120:	ee08 0a10 	vmov	s16, r0
 800b124:	f000 fd62 	bl	800bbec <__mcmp>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dc03      	bgt.n	800b134 <_dtoa_r+0xa9c>
 800b12c:	d1e0      	bne.n	800b0f0 <_dtoa_r+0xa58>
 800b12e:	f01a 0f01 	tst.w	sl, #1
 800b132:	d0dd      	beq.n	800b0f0 <_dtoa_r+0xa58>
 800b134:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b138:	d1d7      	bne.n	800b0ea <_dtoa_r+0xa52>
 800b13a:	2339      	movs	r3, #57	; 0x39
 800b13c:	f88b 3000 	strb.w	r3, [fp]
 800b140:	462b      	mov	r3, r5
 800b142:	461d      	mov	r5, r3
 800b144:	3b01      	subs	r3, #1
 800b146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b14a:	2a39      	cmp	r2, #57	; 0x39
 800b14c:	d071      	beq.n	800b232 <_dtoa_r+0xb9a>
 800b14e:	3201      	adds	r2, #1
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	e746      	b.n	800afe2 <_dtoa_r+0x94a>
 800b154:	2a00      	cmp	r2, #0
 800b156:	dd07      	ble.n	800b168 <_dtoa_r+0xad0>
 800b158:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b15c:	d0ed      	beq.n	800b13a <_dtoa_r+0xaa2>
 800b15e:	f10a 0301 	add.w	r3, sl, #1
 800b162:	f88b 3000 	strb.w	r3, [fp]
 800b166:	e73c      	b.n	800afe2 <_dtoa_r+0x94a>
 800b168:	9b05      	ldr	r3, [sp, #20]
 800b16a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b16e:	4599      	cmp	r9, r3
 800b170:	d047      	beq.n	800b202 <_dtoa_r+0xb6a>
 800b172:	ee18 1a10 	vmov	r1, s16
 800b176:	2300      	movs	r3, #0
 800b178:	220a      	movs	r2, #10
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fb16 	bl	800b7ac <__multadd>
 800b180:	45b8      	cmp	r8, r7
 800b182:	ee08 0a10 	vmov	s16, r0
 800b186:	f04f 0300 	mov.w	r3, #0
 800b18a:	f04f 020a 	mov.w	r2, #10
 800b18e:	4641      	mov	r1, r8
 800b190:	4620      	mov	r0, r4
 800b192:	d106      	bne.n	800b1a2 <_dtoa_r+0xb0a>
 800b194:	f000 fb0a 	bl	800b7ac <__multadd>
 800b198:	4680      	mov	r8, r0
 800b19a:	4607      	mov	r7, r0
 800b19c:	f109 0901 	add.w	r9, r9, #1
 800b1a0:	e772      	b.n	800b088 <_dtoa_r+0x9f0>
 800b1a2:	f000 fb03 	bl	800b7ac <__multadd>
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	4680      	mov	r8, r0
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	220a      	movs	r2, #10
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 fafc 	bl	800b7ac <__multadd>
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	e7f1      	b.n	800b19c <_dtoa_r+0xb04>
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	9302      	str	r3, [sp, #8]
 800b1bc:	9d01      	ldr	r5, [sp, #4]
 800b1be:	ee18 0a10 	vmov	r0, s16
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	f7ff f9da 	bl	800a57c <quorem>
 800b1c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1cc:	9b01      	ldr	r3, [sp, #4]
 800b1ce:	f805 ab01 	strb.w	sl, [r5], #1
 800b1d2:	1aea      	subs	r2, r5, r3
 800b1d4:	9b02      	ldr	r3, [sp, #8]
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	dd09      	ble.n	800b1ee <_dtoa_r+0xb56>
 800b1da:	ee18 1a10 	vmov	r1, s16
 800b1de:	2300      	movs	r3, #0
 800b1e0:	220a      	movs	r2, #10
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 fae2 	bl	800b7ac <__multadd>
 800b1e8:	ee08 0a10 	vmov	s16, r0
 800b1ec:	e7e7      	b.n	800b1be <_dtoa_r+0xb26>
 800b1ee:	9b02      	ldr	r3, [sp, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bfc8      	it	gt
 800b1f4:	461d      	movgt	r5, r3
 800b1f6:	9b01      	ldr	r3, [sp, #4]
 800b1f8:	bfd8      	it	le
 800b1fa:	2501      	movle	r5, #1
 800b1fc:	441d      	add	r5, r3
 800b1fe:	f04f 0800 	mov.w	r8, #0
 800b202:	ee18 1a10 	vmov	r1, s16
 800b206:	2201      	movs	r2, #1
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 fc7f 	bl	800bb0c <__lshift>
 800b20e:	4631      	mov	r1, r6
 800b210:	ee08 0a10 	vmov	s16, r0
 800b214:	f000 fcea 	bl	800bbec <__mcmp>
 800b218:	2800      	cmp	r0, #0
 800b21a:	dc91      	bgt.n	800b140 <_dtoa_r+0xaa8>
 800b21c:	d102      	bne.n	800b224 <_dtoa_r+0xb8c>
 800b21e:	f01a 0f01 	tst.w	sl, #1
 800b222:	d18d      	bne.n	800b140 <_dtoa_r+0xaa8>
 800b224:	462b      	mov	r3, r5
 800b226:	461d      	mov	r5, r3
 800b228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b22c:	2a30      	cmp	r2, #48	; 0x30
 800b22e:	d0fa      	beq.n	800b226 <_dtoa_r+0xb8e>
 800b230:	e6d7      	b.n	800afe2 <_dtoa_r+0x94a>
 800b232:	9a01      	ldr	r2, [sp, #4]
 800b234:	429a      	cmp	r2, r3
 800b236:	d184      	bne.n	800b142 <_dtoa_r+0xaaa>
 800b238:	9b00      	ldr	r3, [sp, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	2331      	movs	r3, #49	; 0x31
 800b240:	7013      	strb	r3, [r2, #0]
 800b242:	e6ce      	b.n	800afe2 <_dtoa_r+0x94a>
 800b244:	4b09      	ldr	r3, [pc, #36]	; (800b26c <_dtoa_r+0xbd4>)
 800b246:	f7ff ba95 	b.w	800a774 <_dtoa_r+0xdc>
 800b24a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f47f aa6e 	bne.w	800a72e <_dtoa_r+0x96>
 800b252:	4b07      	ldr	r3, [pc, #28]	; (800b270 <_dtoa_r+0xbd8>)
 800b254:	f7ff ba8e 	b.w	800a774 <_dtoa_r+0xdc>
 800b258:	9b02      	ldr	r3, [sp, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dcae      	bgt.n	800b1bc <_dtoa_r+0xb24>
 800b25e:	9b06      	ldr	r3, [sp, #24]
 800b260:	2b02      	cmp	r3, #2
 800b262:	f73f aea8 	bgt.w	800afb6 <_dtoa_r+0x91e>
 800b266:	e7a9      	b.n	800b1bc <_dtoa_r+0xb24>
 800b268:	0800d61f 	.word	0x0800d61f
 800b26c:	0800d57c 	.word	0x0800d57c
 800b270:	0800d5a0 	.word	0x0800d5a0

0800b274 <__sflush_r>:
 800b274:	898a      	ldrh	r2, [r1, #12]
 800b276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27a:	4605      	mov	r5, r0
 800b27c:	0710      	lsls	r0, r2, #28
 800b27e:	460c      	mov	r4, r1
 800b280:	d458      	bmi.n	800b334 <__sflush_r+0xc0>
 800b282:	684b      	ldr	r3, [r1, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	dc05      	bgt.n	800b294 <__sflush_r+0x20>
 800b288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dc02      	bgt.n	800b294 <__sflush_r+0x20>
 800b28e:	2000      	movs	r0, #0
 800b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b296:	2e00      	cmp	r6, #0
 800b298:	d0f9      	beq.n	800b28e <__sflush_r+0x1a>
 800b29a:	2300      	movs	r3, #0
 800b29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2a0:	682f      	ldr	r7, [r5, #0]
 800b2a2:	602b      	str	r3, [r5, #0]
 800b2a4:	d032      	beq.n	800b30c <__sflush_r+0x98>
 800b2a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	075a      	lsls	r2, r3, #29
 800b2ac:	d505      	bpl.n	800b2ba <__sflush_r+0x46>
 800b2ae:	6863      	ldr	r3, [r4, #4]
 800b2b0:	1ac0      	subs	r0, r0, r3
 800b2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2b4:	b10b      	cbz	r3, 800b2ba <__sflush_r+0x46>
 800b2b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2b8:	1ac0      	subs	r0, r0, r3
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4602      	mov	r2, r0
 800b2be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2c0:	6a21      	ldr	r1, [r4, #32]
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b0      	blx	r6
 800b2c6:	1c43      	adds	r3, r0, #1
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	d106      	bne.n	800b2da <__sflush_r+0x66>
 800b2cc:	6829      	ldr	r1, [r5, #0]
 800b2ce:	291d      	cmp	r1, #29
 800b2d0:	d82c      	bhi.n	800b32c <__sflush_r+0xb8>
 800b2d2:	4a2a      	ldr	r2, [pc, #168]	; (800b37c <__sflush_r+0x108>)
 800b2d4:	40ca      	lsrs	r2, r1
 800b2d6:	07d6      	lsls	r6, r2, #31
 800b2d8:	d528      	bpl.n	800b32c <__sflush_r+0xb8>
 800b2da:	2200      	movs	r2, #0
 800b2dc:	6062      	str	r2, [r4, #4]
 800b2de:	04d9      	lsls	r1, r3, #19
 800b2e0:	6922      	ldr	r2, [r4, #16]
 800b2e2:	6022      	str	r2, [r4, #0]
 800b2e4:	d504      	bpl.n	800b2f0 <__sflush_r+0x7c>
 800b2e6:	1c42      	adds	r2, r0, #1
 800b2e8:	d101      	bne.n	800b2ee <__sflush_r+0x7a>
 800b2ea:	682b      	ldr	r3, [r5, #0]
 800b2ec:	b903      	cbnz	r3, 800b2f0 <__sflush_r+0x7c>
 800b2ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2f2:	602f      	str	r7, [r5, #0]
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	d0ca      	beq.n	800b28e <__sflush_r+0x1a>
 800b2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	d002      	beq.n	800b306 <__sflush_r+0x92>
 800b300:	4628      	mov	r0, r5
 800b302:	f000 fd8b 	bl	800be1c <_free_r>
 800b306:	2000      	movs	r0, #0
 800b308:	6360      	str	r0, [r4, #52]	; 0x34
 800b30a:	e7c1      	b.n	800b290 <__sflush_r+0x1c>
 800b30c:	6a21      	ldr	r1, [r4, #32]
 800b30e:	2301      	movs	r3, #1
 800b310:	4628      	mov	r0, r5
 800b312:	47b0      	blx	r6
 800b314:	1c41      	adds	r1, r0, #1
 800b316:	d1c7      	bne.n	800b2a8 <__sflush_r+0x34>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0c4      	beq.n	800b2a8 <__sflush_r+0x34>
 800b31e:	2b1d      	cmp	r3, #29
 800b320:	d001      	beq.n	800b326 <__sflush_r+0xb2>
 800b322:	2b16      	cmp	r3, #22
 800b324:	d101      	bne.n	800b32a <__sflush_r+0xb6>
 800b326:	602f      	str	r7, [r5, #0]
 800b328:	e7b1      	b.n	800b28e <__sflush_r+0x1a>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b330:	81a3      	strh	r3, [r4, #12]
 800b332:	e7ad      	b.n	800b290 <__sflush_r+0x1c>
 800b334:	690f      	ldr	r7, [r1, #16]
 800b336:	2f00      	cmp	r7, #0
 800b338:	d0a9      	beq.n	800b28e <__sflush_r+0x1a>
 800b33a:	0793      	lsls	r3, r2, #30
 800b33c:	680e      	ldr	r6, [r1, #0]
 800b33e:	bf08      	it	eq
 800b340:	694b      	ldreq	r3, [r1, #20]
 800b342:	600f      	str	r7, [r1, #0]
 800b344:	bf18      	it	ne
 800b346:	2300      	movne	r3, #0
 800b348:	eba6 0807 	sub.w	r8, r6, r7
 800b34c:	608b      	str	r3, [r1, #8]
 800b34e:	f1b8 0f00 	cmp.w	r8, #0
 800b352:	dd9c      	ble.n	800b28e <__sflush_r+0x1a>
 800b354:	6a21      	ldr	r1, [r4, #32]
 800b356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b358:	4643      	mov	r3, r8
 800b35a:	463a      	mov	r2, r7
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b0      	blx	r6
 800b360:	2800      	cmp	r0, #0
 800b362:	dc06      	bgt.n	800b372 <__sflush_r+0xfe>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b370:	e78e      	b.n	800b290 <__sflush_r+0x1c>
 800b372:	4407      	add	r7, r0
 800b374:	eba8 0800 	sub.w	r8, r8, r0
 800b378:	e7e9      	b.n	800b34e <__sflush_r+0xda>
 800b37a:	bf00      	nop
 800b37c:	20400001 	.word	0x20400001

0800b380 <_fflush_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	4605      	mov	r5, r0
 800b386:	460c      	mov	r4, r1
 800b388:	b913      	cbnz	r3, 800b390 <_fflush_r+0x10>
 800b38a:	2500      	movs	r5, #0
 800b38c:	4628      	mov	r0, r5
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	b118      	cbz	r0, 800b39a <_fflush_r+0x1a>
 800b392:	6983      	ldr	r3, [r0, #24]
 800b394:	b90b      	cbnz	r3, 800b39a <_fflush_r+0x1a>
 800b396:	f000 f887 	bl	800b4a8 <__sinit>
 800b39a:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <_fflush_r+0x6c>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	d11b      	bne.n	800b3d8 <_fflush_r+0x58>
 800b3a0:	686c      	ldr	r4, [r5, #4]
 800b3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0ef      	beq.n	800b38a <_fflush_r+0xa>
 800b3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3ac:	07d0      	lsls	r0, r2, #31
 800b3ae:	d404      	bmi.n	800b3ba <_fflush_r+0x3a>
 800b3b0:	0599      	lsls	r1, r3, #22
 800b3b2:	d402      	bmi.n	800b3ba <_fflush_r+0x3a>
 800b3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3b6:	f000 f91a 	bl	800b5ee <__retarget_lock_acquire_recursive>
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	4621      	mov	r1, r4
 800b3be:	f7ff ff59 	bl	800b274 <__sflush_r>
 800b3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3c4:	07da      	lsls	r2, r3, #31
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	d4e0      	bmi.n	800b38c <_fflush_r+0xc>
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	059b      	lsls	r3, r3, #22
 800b3ce:	d4dd      	bmi.n	800b38c <_fflush_r+0xc>
 800b3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3d2:	f000 f90d 	bl	800b5f0 <__retarget_lock_release_recursive>
 800b3d6:	e7d9      	b.n	800b38c <_fflush_r+0xc>
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <_fflush_r+0x70>)
 800b3da:	429c      	cmp	r4, r3
 800b3dc:	d101      	bne.n	800b3e2 <_fflush_r+0x62>
 800b3de:	68ac      	ldr	r4, [r5, #8]
 800b3e0:	e7df      	b.n	800b3a2 <_fflush_r+0x22>
 800b3e2:	4b04      	ldr	r3, [pc, #16]	; (800b3f4 <_fflush_r+0x74>)
 800b3e4:	429c      	cmp	r4, r3
 800b3e6:	bf08      	it	eq
 800b3e8:	68ec      	ldreq	r4, [r5, #12]
 800b3ea:	e7da      	b.n	800b3a2 <_fflush_r+0x22>
 800b3ec:	0800d650 	.word	0x0800d650
 800b3f0:	0800d670 	.word	0x0800d670
 800b3f4:	0800d630 	.word	0x0800d630

0800b3f8 <std>:
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b406:	6083      	str	r3, [r0, #8]
 800b408:	8181      	strh	r1, [r0, #12]
 800b40a:	6643      	str	r3, [r0, #100]	; 0x64
 800b40c:	81c2      	strh	r2, [r0, #14]
 800b40e:	6183      	str	r3, [r0, #24]
 800b410:	4619      	mov	r1, r3
 800b412:	2208      	movs	r2, #8
 800b414:	305c      	adds	r0, #92	; 0x5c
 800b416:	f7fe faf1 	bl	80099fc <memset>
 800b41a:	4b05      	ldr	r3, [pc, #20]	; (800b430 <std+0x38>)
 800b41c:	6263      	str	r3, [r4, #36]	; 0x24
 800b41e:	4b05      	ldr	r3, [pc, #20]	; (800b434 <std+0x3c>)
 800b420:	62a3      	str	r3, [r4, #40]	; 0x28
 800b422:	4b05      	ldr	r3, [pc, #20]	; (800b438 <std+0x40>)
 800b424:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b426:	4b05      	ldr	r3, [pc, #20]	; (800b43c <std+0x44>)
 800b428:	6224      	str	r4, [r4, #32]
 800b42a:	6323      	str	r3, [r4, #48]	; 0x30
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	0800c2b1 	.word	0x0800c2b1
 800b434:	0800c2d3 	.word	0x0800c2d3
 800b438:	0800c30b 	.word	0x0800c30b
 800b43c:	0800c32f 	.word	0x0800c32f

0800b440 <_cleanup_r>:
 800b440:	4901      	ldr	r1, [pc, #4]	; (800b448 <_cleanup_r+0x8>)
 800b442:	f000 b8af 	b.w	800b5a4 <_fwalk_reent>
 800b446:	bf00      	nop
 800b448:	0800b381 	.word	0x0800b381

0800b44c <__sfmoreglue>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	2268      	movs	r2, #104	; 0x68
 800b450:	1e4d      	subs	r5, r1, #1
 800b452:	4355      	muls	r5, r2
 800b454:	460e      	mov	r6, r1
 800b456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b45a:	f000 fd4b 	bl	800bef4 <_malloc_r>
 800b45e:	4604      	mov	r4, r0
 800b460:	b140      	cbz	r0, 800b474 <__sfmoreglue+0x28>
 800b462:	2100      	movs	r1, #0
 800b464:	e9c0 1600 	strd	r1, r6, [r0]
 800b468:	300c      	adds	r0, #12
 800b46a:	60a0      	str	r0, [r4, #8]
 800b46c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b470:	f7fe fac4 	bl	80099fc <memset>
 800b474:	4620      	mov	r0, r4
 800b476:	bd70      	pop	{r4, r5, r6, pc}

0800b478 <__sfp_lock_acquire>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__sfp_lock_acquire+0x8>)
 800b47a:	f000 b8b8 	b.w	800b5ee <__retarget_lock_acquire_recursive>
 800b47e:	bf00      	nop
 800b480:	20000615 	.word	0x20000615

0800b484 <__sfp_lock_release>:
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__sfp_lock_release+0x8>)
 800b486:	f000 b8b3 	b.w	800b5f0 <__retarget_lock_release_recursive>
 800b48a:	bf00      	nop
 800b48c:	20000615 	.word	0x20000615

0800b490 <__sinit_lock_acquire>:
 800b490:	4801      	ldr	r0, [pc, #4]	; (800b498 <__sinit_lock_acquire+0x8>)
 800b492:	f000 b8ac 	b.w	800b5ee <__retarget_lock_acquire_recursive>
 800b496:	bf00      	nop
 800b498:	20000616 	.word	0x20000616

0800b49c <__sinit_lock_release>:
 800b49c:	4801      	ldr	r0, [pc, #4]	; (800b4a4 <__sinit_lock_release+0x8>)
 800b49e:	f000 b8a7 	b.w	800b5f0 <__retarget_lock_release_recursive>
 800b4a2:	bf00      	nop
 800b4a4:	20000616 	.word	0x20000616

0800b4a8 <__sinit>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	f7ff fff0 	bl	800b490 <__sinit_lock_acquire>
 800b4b0:	69a3      	ldr	r3, [r4, #24]
 800b4b2:	b11b      	cbz	r3, 800b4bc <__sinit+0x14>
 800b4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b8:	f7ff bff0 	b.w	800b49c <__sinit_lock_release>
 800b4bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4c2:	4b13      	ldr	r3, [pc, #76]	; (800b510 <__sinit+0x68>)
 800b4c4:	4a13      	ldr	r2, [pc, #76]	; (800b514 <__sinit+0x6c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	bf04      	itt	eq
 800b4ce:	2301      	moveq	r3, #1
 800b4d0:	61a3      	streq	r3, [r4, #24]
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 f820 	bl	800b518 <__sfp>
 800b4d8:	6060      	str	r0, [r4, #4]
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 f81c 	bl	800b518 <__sfp>
 800b4e0:	60a0      	str	r0, [r4, #8]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f818 	bl	800b518 <__sfp>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	60e0      	str	r0, [r4, #12]
 800b4ec:	2104      	movs	r1, #4
 800b4ee:	6860      	ldr	r0, [r4, #4]
 800b4f0:	f7ff ff82 	bl	800b3f8 <std>
 800b4f4:	68a0      	ldr	r0, [r4, #8]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	2109      	movs	r1, #9
 800b4fa:	f7ff ff7d 	bl	800b3f8 <std>
 800b4fe:	68e0      	ldr	r0, [r4, #12]
 800b500:	2202      	movs	r2, #2
 800b502:	2112      	movs	r1, #18
 800b504:	f7ff ff78 	bl	800b3f8 <std>
 800b508:	2301      	movs	r3, #1
 800b50a:	61a3      	str	r3, [r4, #24]
 800b50c:	e7d2      	b.n	800b4b4 <__sinit+0xc>
 800b50e:	bf00      	nop
 800b510:	0800d568 	.word	0x0800d568
 800b514:	0800b441 	.word	0x0800b441

0800b518 <__sfp>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	4607      	mov	r7, r0
 800b51c:	f7ff ffac 	bl	800b478 <__sfp_lock_acquire>
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <__sfp+0x84>)
 800b522:	681e      	ldr	r6, [r3, #0]
 800b524:	69b3      	ldr	r3, [r6, #24]
 800b526:	b913      	cbnz	r3, 800b52e <__sfp+0x16>
 800b528:	4630      	mov	r0, r6
 800b52a:	f7ff ffbd 	bl	800b4a8 <__sinit>
 800b52e:	3648      	adds	r6, #72	; 0x48
 800b530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b534:	3b01      	subs	r3, #1
 800b536:	d503      	bpl.n	800b540 <__sfp+0x28>
 800b538:	6833      	ldr	r3, [r6, #0]
 800b53a:	b30b      	cbz	r3, 800b580 <__sfp+0x68>
 800b53c:	6836      	ldr	r6, [r6, #0]
 800b53e:	e7f7      	b.n	800b530 <__sfp+0x18>
 800b540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b544:	b9d5      	cbnz	r5, 800b57c <__sfp+0x64>
 800b546:	4b16      	ldr	r3, [pc, #88]	; (800b5a0 <__sfp+0x88>)
 800b548:	60e3      	str	r3, [r4, #12]
 800b54a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b54e:	6665      	str	r5, [r4, #100]	; 0x64
 800b550:	f000 f84c 	bl	800b5ec <__retarget_lock_init_recursive>
 800b554:	f7ff ff96 	bl	800b484 <__sfp_lock_release>
 800b558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b55c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b560:	6025      	str	r5, [r4, #0]
 800b562:	61a5      	str	r5, [r4, #24]
 800b564:	2208      	movs	r2, #8
 800b566:	4629      	mov	r1, r5
 800b568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b56c:	f7fe fa46 	bl	80099fc <memset>
 800b570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b578:	4620      	mov	r0, r4
 800b57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b57c:	3468      	adds	r4, #104	; 0x68
 800b57e:	e7d9      	b.n	800b534 <__sfp+0x1c>
 800b580:	2104      	movs	r1, #4
 800b582:	4638      	mov	r0, r7
 800b584:	f7ff ff62 	bl	800b44c <__sfmoreglue>
 800b588:	4604      	mov	r4, r0
 800b58a:	6030      	str	r0, [r6, #0]
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1d5      	bne.n	800b53c <__sfp+0x24>
 800b590:	f7ff ff78 	bl	800b484 <__sfp_lock_release>
 800b594:	230c      	movs	r3, #12
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	e7ee      	b.n	800b578 <__sfp+0x60>
 800b59a:	bf00      	nop
 800b59c:	0800d568 	.word	0x0800d568
 800b5a0:	ffff0001 	.word	0xffff0001

0800b5a4 <_fwalk_reent>:
 800b5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	4688      	mov	r8, r1
 800b5ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5b0:	2700      	movs	r7, #0
 800b5b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b6:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ba:	d505      	bpl.n	800b5c8 <_fwalk_reent+0x24>
 800b5bc:	6824      	ldr	r4, [r4, #0]
 800b5be:	2c00      	cmp	r4, #0
 800b5c0:	d1f7      	bne.n	800b5b2 <_fwalk_reent+0xe>
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c8:	89ab      	ldrh	r3, [r5, #12]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d907      	bls.n	800b5de <_fwalk_reent+0x3a>
 800b5ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	d003      	beq.n	800b5de <_fwalk_reent+0x3a>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4630      	mov	r0, r6
 800b5da:	47c0      	blx	r8
 800b5dc:	4307      	orrs	r7, r0
 800b5de:	3568      	adds	r5, #104	; 0x68
 800b5e0:	e7e9      	b.n	800b5b6 <_fwalk_reent+0x12>
	...

0800b5e4 <_localeconv_r>:
 800b5e4:	4800      	ldr	r0, [pc, #0]	; (800b5e8 <_localeconv_r+0x4>)
 800b5e6:	4770      	bx	lr
 800b5e8:	20000168 	.word	0x20000168

0800b5ec <__retarget_lock_init_recursive>:
 800b5ec:	4770      	bx	lr

0800b5ee <__retarget_lock_acquire_recursive>:
 800b5ee:	4770      	bx	lr

0800b5f0 <__retarget_lock_release_recursive>:
 800b5f0:	4770      	bx	lr

0800b5f2 <__swhatbuf_r>:
 800b5f2:	b570      	push	{r4, r5, r6, lr}
 800b5f4:	460e      	mov	r6, r1
 800b5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	b096      	sub	sp, #88	; 0x58
 800b5fe:	4614      	mov	r4, r2
 800b600:	461d      	mov	r5, r3
 800b602:	da08      	bge.n	800b616 <__swhatbuf_r+0x24>
 800b604:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	602a      	str	r2, [r5, #0]
 800b60c:	061a      	lsls	r2, r3, #24
 800b60e:	d410      	bmi.n	800b632 <__swhatbuf_r+0x40>
 800b610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b614:	e00e      	b.n	800b634 <__swhatbuf_r+0x42>
 800b616:	466a      	mov	r2, sp
 800b618:	f000 fee0 	bl	800c3dc <_fstat_r>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	dbf1      	blt.n	800b604 <__swhatbuf_r+0x12>
 800b620:	9a01      	ldr	r2, [sp, #4]
 800b622:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b626:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b62a:	425a      	negs	r2, r3
 800b62c:	415a      	adcs	r2, r3
 800b62e:	602a      	str	r2, [r5, #0]
 800b630:	e7ee      	b.n	800b610 <__swhatbuf_r+0x1e>
 800b632:	2340      	movs	r3, #64	; 0x40
 800b634:	2000      	movs	r0, #0
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	b016      	add	sp, #88	; 0x58
 800b63a:	bd70      	pop	{r4, r5, r6, pc}

0800b63c <__smakebuf_r>:
 800b63c:	898b      	ldrh	r3, [r1, #12]
 800b63e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b640:	079d      	lsls	r5, r3, #30
 800b642:	4606      	mov	r6, r0
 800b644:	460c      	mov	r4, r1
 800b646:	d507      	bpl.n	800b658 <__smakebuf_r+0x1c>
 800b648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	6123      	str	r3, [r4, #16]
 800b650:	2301      	movs	r3, #1
 800b652:	6163      	str	r3, [r4, #20]
 800b654:	b002      	add	sp, #8
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	ab01      	add	r3, sp, #4
 800b65a:	466a      	mov	r2, sp
 800b65c:	f7ff ffc9 	bl	800b5f2 <__swhatbuf_r>
 800b660:	9900      	ldr	r1, [sp, #0]
 800b662:	4605      	mov	r5, r0
 800b664:	4630      	mov	r0, r6
 800b666:	f000 fc45 	bl	800bef4 <_malloc_r>
 800b66a:	b948      	cbnz	r0, 800b680 <__smakebuf_r+0x44>
 800b66c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b670:	059a      	lsls	r2, r3, #22
 800b672:	d4ef      	bmi.n	800b654 <__smakebuf_r+0x18>
 800b674:	f023 0303 	bic.w	r3, r3, #3
 800b678:	f043 0302 	orr.w	r3, r3, #2
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	e7e3      	b.n	800b648 <__smakebuf_r+0xc>
 800b680:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <__smakebuf_r+0x7c>)
 800b682:	62b3      	str	r3, [r6, #40]	; 0x28
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	9b00      	ldr	r3, [sp, #0]
 800b690:	6163      	str	r3, [r4, #20]
 800b692:	9b01      	ldr	r3, [sp, #4]
 800b694:	6120      	str	r0, [r4, #16]
 800b696:	b15b      	cbz	r3, 800b6b0 <__smakebuf_r+0x74>
 800b698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b69c:	4630      	mov	r0, r6
 800b69e:	f000 feaf 	bl	800c400 <_isatty_r>
 800b6a2:	b128      	cbz	r0, 800b6b0 <__smakebuf_r+0x74>
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	f023 0303 	bic.w	r3, r3, #3
 800b6aa:	f043 0301 	orr.w	r3, r3, #1
 800b6ae:	81a3      	strh	r3, [r4, #12]
 800b6b0:	89a0      	ldrh	r0, [r4, #12]
 800b6b2:	4305      	orrs	r5, r0
 800b6b4:	81a5      	strh	r5, [r4, #12]
 800b6b6:	e7cd      	b.n	800b654 <__smakebuf_r+0x18>
 800b6b8:	0800b441 	.word	0x0800b441

0800b6bc <malloc>:
 800b6bc:	4b02      	ldr	r3, [pc, #8]	; (800b6c8 <malloc+0xc>)
 800b6be:	4601      	mov	r1, r0
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	f000 bc17 	b.w	800bef4 <_malloc_r>
 800b6c6:	bf00      	nop
 800b6c8:	20000014 	.word	0x20000014

0800b6cc <memcpy>:
 800b6cc:	440a      	add	r2, r1
 800b6ce:	4291      	cmp	r1, r2
 800b6d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b6d4:	d100      	bne.n	800b6d8 <memcpy+0xc>
 800b6d6:	4770      	bx	lr
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6e2:	4291      	cmp	r1, r2
 800b6e4:	d1f9      	bne.n	800b6da <memcpy+0xe>
 800b6e6:	bd10      	pop	{r4, pc}

0800b6e8 <_Balloc>:
 800b6e8:	b570      	push	{r4, r5, r6, lr}
 800b6ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	460d      	mov	r5, r1
 800b6f0:	b976      	cbnz	r6, 800b710 <_Balloc+0x28>
 800b6f2:	2010      	movs	r0, #16
 800b6f4:	f7ff ffe2 	bl	800b6bc <malloc>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	6260      	str	r0, [r4, #36]	; 0x24
 800b6fc:	b920      	cbnz	r0, 800b708 <_Balloc+0x20>
 800b6fe:	4b18      	ldr	r3, [pc, #96]	; (800b760 <_Balloc+0x78>)
 800b700:	4818      	ldr	r0, [pc, #96]	; (800b764 <_Balloc+0x7c>)
 800b702:	2166      	movs	r1, #102	; 0x66
 800b704:	f000 fe2a 	bl	800c35c <__assert_func>
 800b708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b70c:	6006      	str	r6, [r0, #0]
 800b70e:	60c6      	str	r6, [r0, #12]
 800b710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b712:	68f3      	ldr	r3, [r6, #12]
 800b714:	b183      	cbz	r3, 800b738 <_Balloc+0x50>
 800b716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b71e:	b9b8      	cbnz	r0, 800b750 <_Balloc+0x68>
 800b720:	2101      	movs	r1, #1
 800b722:	fa01 f605 	lsl.w	r6, r1, r5
 800b726:	1d72      	adds	r2, r6, #5
 800b728:	0092      	lsls	r2, r2, #2
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 fb60 	bl	800bdf0 <_calloc_r>
 800b730:	b160      	cbz	r0, 800b74c <_Balloc+0x64>
 800b732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b736:	e00e      	b.n	800b756 <_Balloc+0x6e>
 800b738:	2221      	movs	r2, #33	; 0x21
 800b73a:	2104      	movs	r1, #4
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 fb57 	bl	800bdf0 <_calloc_r>
 800b742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b744:	60f0      	str	r0, [r6, #12]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e4      	bne.n	800b716 <_Balloc+0x2e>
 800b74c:	2000      	movs	r0, #0
 800b74e:	bd70      	pop	{r4, r5, r6, pc}
 800b750:	6802      	ldr	r2, [r0, #0]
 800b752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b756:	2300      	movs	r3, #0
 800b758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b75c:	e7f7      	b.n	800b74e <_Balloc+0x66>
 800b75e:	bf00      	nop
 800b760:	0800d5ad 	.word	0x0800d5ad
 800b764:	0800d690 	.word	0x0800d690

0800b768 <_Bfree>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	b976      	cbnz	r6, 800b790 <_Bfree+0x28>
 800b772:	2010      	movs	r0, #16
 800b774:	f7ff ffa2 	bl	800b6bc <malloc>
 800b778:	4602      	mov	r2, r0
 800b77a:	6268      	str	r0, [r5, #36]	; 0x24
 800b77c:	b920      	cbnz	r0, 800b788 <_Bfree+0x20>
 800b77e:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <_Bfree+0x3c>)
 800b780:	4809      	ldr	r0, [pc, #36]	; (800b7a8 <_Bfree+0x40>)
 800b782:	218a      	movs	r1, #138	; 0x8a
 800b784:	f000 fdea 	bl	800c35c <__assert_func>
 800b788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b78c:	6006      	str	r6, [r0, #0]
 800b78e:	60c6      	str	r6, [r0, #12]
 800b790:	b13c      	cbz	r4, 800b7a2 <_Bfree+0x3a>
 800b792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b794:	6862      	ldr	r2, [r4, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b79c:	6021      	str	r1, [r4, #0]
 800b79e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	0800d5ad 	.word	0x0800d5ad
 800b7a8:	0800d690 	.word	0x0800d690

0800b7ac <__multadd>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	690d      	ldr	r5, [r1, #16]
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	461e      	mov	r6, r3
 800b7b8:	f101 0c14 	add.w	ip, r1, #20
 800b7bc:	2000      	movs	r0, #0
 800b7be:	f8dc 3000 	ldr.w	r3, [ip]
 800b7c2:	b299      	uxth	r1, r3
 800b7c4:	fb02 6101 	mla	r1, r2, r1, r6
 800b7c8:	0c1e      	lsrs	r6, r3, #16
 800b7ca:	0c0b      	lsrs	r3, r1, #16
 800b7cc:	fb02 3306 	mla	r3, r2, r6, r3
 800b7d0:	b289      	uxth	r1, r1
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7d8:	4285      	cmp	r5, r0
 800b7da:	f84c 1b04 	str.w	r1, [ip], #4
 800b7de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7e2:	dcec      	bgt.n	800b7be <__multadd+0x12>
 800b7e4:	b30e      	cbz	r6, 800b82a <__multadd+0x7e>
 800b7e6:	68a3      	ldr	r3, [r4, #8]
 800b7e8:	42ab      	cmp	r3, r5
 800b7ea:	dc19      	bgt.n	800b820 <__multadd+0x74>
 800b7ec:	6861      	ldr	r1, [r4, #4]
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	3101      	adds	r1, #1
 800b7f2:	f7ff ff79 	bl	800b6e8 <_Balloc>
 800b7f6:	4680      	mov	r8, r0
 800b7f8:	b928      	cbnz	r0, 800b806 <__multadd+0x5a>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	4b0c      	ldr	r3, [pc, #48]	; (800b830 <__multadd+0x84>)
 800b7fe:	480d      	ldr	r0, [pc, #52]	; (800b834 <__multadd+0x88>)
 800b800:	21b5      	movs	r1, #181	; 0xb5
 800b802:	f000 fdab 	bl	800c35c <__assert_func>
 800b806:	6922      	ldr	r2, [r4, #16]
 800b808:	3202      	adds	r2, #2
 800b80a:	f104 010c 	add.w	r1, r4, #12
 800b80e:	0092      	lsls	r2, r2, #2
 800b810:	300c      	adds	r0, #12
 800b812:	f7ff ff5b 	bl	800b6cc <memcpy>
 800b816:	4621      	mov	r1, r4
 800b818:	4638      	mov	r0, r7
 800b81a:	f7ff ffa5 	bl	800b768 <_Bfree>
 800b81e:	4644      	mov	r4, r8
 800b820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b824:	3501      	adds	r5, #1
 800b826:	615e      	str	r6, [r3, #20]
 800b828:	6125      	str	r5, [r4, #16]
 800b82a:	4620      	mov	r0, r4
 800b82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b830:	0800d61f 	.word	0x0800d61f
 800b834:	0800d690 	.word	0x0800d690

0800b838 <__hi0bits>:
 800b838:	0c03      	lsrs	r3, r0, #16
 800b83a:	041b      	lsls	r3, r3, #16
 800b83c:	b9d3      	cbnz	r3, 800b874 <__hi0bits+0x3c>
 800b83e:	0400      	lsls	r0, r0, #16
 800b840:	2310      	movs	r3, #16
 800b842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b846:	bf04      	itt	eq
 800b848:	0200      	lsleq	r0, r0, #8
 800b84a:	3308      	addeq	r3, #8
 800b84c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b850:	bf04      	itt	eq
 800b852:	0100      	lsleq	r0, r0, #4
 800b854:	3304      	addeq	r3, #4
 800b856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b85a:	bf04      	itt	eq
 800b85c:	0080      	lsleq	r0, r0, #2
 800b85e:	3302      	addeq	r3, #2
 800b860:	2800      	cmp	r0, #0
 800b862:	db05      	blt.n	800b870 <__hi0bits+0x38>
 800b864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b868:	f103 0301 	add.w	r3, r3, #1
 800b86c:	bf08      	it	eq
 800b86e:	2320      	moveq	r3, #32
 800b870:	4618      	mov	r0, r3
 800b872:	4770      	bx	lr
 800b874:	2300      	movs	r3, #0
 800b876:	e7e4      	b.n	800b842 <__hi0bits+0xa>

0800b878 <__lo0bits>:
 800b878:	6803      	ldr	r3, [r0, #0]
 800b87a:	f013 0207 	ands.w	r2, r3, #7
 800b87e:	4601      	mov	r1, r0
 800b880:	d00b      	beq.n	800b89a <__lo0bits+0x22>
 800b882:	07da      	lsls	r2, r3, #31
 800b884:	d423      	bmi.n	800b8ce <__lo0bits+0x56>
 800b886:	0798      	lsls	r0, r3, #30
 800b888:	bf49      	itett	mi
 800b88a:	085b      	lsrmi	r3, r3, #1
 800b88c:	089b      	lsrpl	r3, r3, #2
 800b88e:	2001      	movmi	r0, #1
 800b890:	600b      	strmi	r3, [r1, #0]
 800b892:	bf5c      	itt	pl
 800b894:	600b      	strpl	r3, [r1, #0]
 800b896:	2002      	movpl	r0, #2
 800b898:	4770      	bx	lr
 800b89a:	b298      	uxth	r0, r3
 800b89c:	b9a8      	cbnz	r0, 800b8ca <__lo0bits+0x52>
 800b89e:	0c1b      	lsrs	r3, r3, #16
 800b8a0:	2010      	movs	r0, #16
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	b90a      	cbnz	r2, 800b8aa <__lo0bits+0x32>
 800b8a6:	3008      	adds	r0, #8
 800b8a8:	0a1b      	lsrs	r3, r3, #8
 800b8aa:	071a      	lsls	r2, r3, #28
 800b8ac:	bf04      	itt	eq
 800b8ae:	091b      	lsreq	r3, r3, #4
 800b8b0:	3004      	addeq	r0, #4
 800b8b2:	079a      	lsls	r2, r3, #30
 800b8b4:	bf04      	itt	eq
 800b8b6:	089b      	lsreq	r3, r3, #2
 800b8b8:	3002      	addeq	r0, #2
 800b8ba:	07da      	lsls	r2, r3, #31
 800b8bc:	d403      	bmi.n	800b8c6 <__lo0bits+0x4e>
 800b8be:	085b      	lsrs	r3, r3, #1
 800b8c0:	f100 0001 	add.w	r0, r0, #1
 800b8c4:	d005      	beq.n	800b8d2 <__lo0bits+0x5a>
 800b8c6:	600b      	str	r3, [r1, #0]
 800b8c8:	4770      	bx	lr
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	e7e9      	b.n	800b8a2 <__lo0bits+0x2a>
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	4770      	bx	lr
 800b8d2:	2020      	movs	r0, #32
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <__i2b>:
 800b8d8:	b510      	push	{r4, lr}
 800b8da:	460c      	mov	r4, r1
 800b8dc:	2101      	movs	r1, #1
 800b8de:	f7ff ff03 	bl	800b6e8 <_Balloc>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	b928      	cbnz	r0, 800b8f2 <__i2b+0x1a>
 800b8e6:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <__i2b+0x24>)
 800b8e8:	4805      	ldr	r0, [pc, #20]	; (800b900 <__i2b+0x28>)
 800b8ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8ee:	f000 fd35 	bl	800c35c <__assert_func>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	6144      	str	r4, [r0, #20]
 800b8f6:	6103      	str	r3, [r0, #16]
 800b8f8:	bd10      	pop	{r4, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0800d61f 	.word	0x0800d61f
 800b900:	0800d690 	.word	0x0800d690

0800b904 <__multiply>:
 800b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b908:	4691      	mov	r9, r2
 800b90a:	690a      	ldr	r2, [r1, #16]
 800b90c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b910:	429a      	cmp	r2, r3
 800b912:	bfb8      	it	lt
 800b914:	460b      	movlt	r3, r1
 800b916:	460c      	mov	r4, r1
 800b918:	bfbc      	itt	lt
 800b91a:	464c      	movlt	r4, r9
 800b91c:	4699      	movlt	r9, r3
 800b91e:	6927      	ldr	r7, [r4, #16]
 800b920:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b924:	68a3      	ldr	r3, [r4, #8]
 800b926:	6861      	ldr	r1, [r4, #4]
 800b928:	eb07 060a 	add.w	r6, r7, sl
 800b92c:	42b3      	cmp	r3, r6
 800b92e:	b085      	sub	sp, #20
 800b930:	bfb8      	it	lt
 800b932:	3101      	addlt	r1, #1
 800b934:	f7ff fed8 	bl	800b6e8 <_Balloc>
 800b938:	b930      	cbnz	r0, 800b948 <__multiply+0x44>
 800b93a:	4602      	mov	r2, r0
 800b93c:	4b44      	ldr	r3, [pc, #272]	; (800ba50 <__multiply+0x14c>)
 800b93e:	4845      	ldr	r0, [pc, #276]	; (800ba54 <__multiply+0x150>)
 800b940:	f240 115d 	movw	r1, #349	; 0x15d
 800b944:	f000 fd0a 	bl	800c35c <__assert_func>
 800b948:	f100 0514 	add.w	r5, r0, #20
 800b94c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b950:	462b      	mov	r3, r5
 800b952:	2200      	movs	r2, #0
 800b954:	4543      	cmp	r3, r8
 800b956:	d321      	bcc.n	800b99c <__multiply+0x98>
 800b958:	f104 0314 	add.w	r3, r4, #20
 800b95c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b960:	f109 0314 	add.w	r3, r9, #20
 800b964:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b968:	9202      	str	r2, [sp, #8]
 800b96a:	1b3a      	subs	r2, r7, r4
 800b96c:	3a15      	subs	r2, #21
 800b96e:	f022 0203 	bic.w	r2, r2, #3
 800b972:	3204      	adds	r2, #4
 800b974:	f104 0115 	add.w	r1, r4, #21
 800b978:	428f      	cmp	r7, r1
 800b97a:	bf38      	it	cc
 800b97c:	2204      	movcc	r2, #4
 800b97e:	9201      	str	r2, [sp, #4]
 800b980:	9a02      	ldr	r2, [sp, #8]
 800b982:	9303      	str	r3, [sp, #12]
 800b984:	429a      	cmp	r2, r3
 800b986:	d80c      	bhi.n	800b9a2 <__multiply+0x9e>
 800b988:	2e00      	cmp	r6, #0
 800b98a:	dd03      	ble.n	800b994 <__multiply+0x90>
 800b98c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b990:	2b00      	cmp	r3, #0
 800b992:	d05a      	beq.n	800ba4a <__multiply+0x146>
 800b994:	6106      	str	r6, [r0, #16]
 800b996:	b005      	add	sp, #20
 800b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99c:	f843 2b04 	str.w	r2, [r3], #4
 800b9a0:	e7d8      	b.n	800b954 <__multiply+0x50>
 800b9a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9a6:	f1ba 0f00 	cmp.w	sl, #0
 800b9aa:	d024      	beq.n	800b9f6 <__multiply+0xf2>
 800b9ac:	f104 0e14 	add.w	lr, r4, #20
 800b9b0:	46a9      	mov	r9, r5
 800b9b2:	f04f 0c00 	mov.w	ip, #0
 800b9b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9ba:	f8d9 1000 	ldr.w	r1, [r9]
 800b9be:	fa1f fb82 	uxth.w	fp, r2
 800b9c2:	b289      	uxth	r1, r1
 800b9c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9cc:	f8d9 2000 	ldr.w	r2, [r9]
 800b9d0:	4461      	add	r1, ip
 800b9d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9de:	b289      	uxth	r1, r1
 800b9e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9e4:	4577      	cmp	r7, lr
 800b9e6:	f849 1b04 	str.w	r1, [r9], #4
 800b9ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9ee:	d8e2      	bhi.n	800b9b6 <__multiply+0xb2>
 800b9f0:	9a01      	ldr	r2, [sp, #4]
 800b9f2:	f845 c002 	str.w	ip, [r5, r2]
 800b9f6:	9a03      	ldr	r2, [sp, #12]
 800b9f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	f1b9 0f00 	cmp.w	r9, #0
 800ba02:	d020      	beq.n	800ba46 <__multiply+0x142>
 800ba04:	6829      	ldr	r1, [r5, #0]
 800ba06:	f104 0c14 	add.w	ip, r4, #20
 800ba0a:	46ae      	mov	lr, r5
 800ba0c:	f04f 0a00 	mov.w	sl, #0
 800ba10:	f8bc b000 	ldrh.w	fp, [ip]
 800ba14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba18:	fb09 220b 	mla	r2, r9, fp, r2
 800ba1c:	4492      	add	sl, r2
 800ba1e:	b289      	uxth	r1, r1
 800ba20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba24:	f84e 1b04 	str.w	r1, [lr], #4
 800ba28:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba2c:	f8be 1000 	ldrh.w	r1, [lr]
 800ba30:	0c12      	lsrs	r2, r2, #16
 800ba32:	fb09 1102 	mla	r1, r9, r2, r1
 800ba36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba3a:	4567      	cmp	r7, ip
 800ba3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba40:	d8e6      	bhi.n	800ba10 <__multiply+0x10c>
 800ba42:	9a01      	ldr	r2, [sp, #4]
 800ba44:	50a9      	str	r1, [r5, r2]
 800ba46:	3504      	adds	r5, #4
 800ba48:	e79a      	b.n	800b980 <__multiply+0x7c>
 800ba4a:	3e01      	subs	r6, #1
 800ba4c:	e79c      	b.n	800b988 <__multiply+0x84>
 800ba4e:	bf00      	nop
 800ba50:	0800d61f 	.word	0x0800d61f
 800ba54:	0800d690 	.word	0x0800d690

0800ba58 <__pow5mult>:
 800ba58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba5c:	4615      	mov	r5, r2
 800ba5e:	f012 0203 	ands.w	r2, r2, #3
 800ba62:	4606      	mov	r6, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	d007      	beq.n	800ba78 <__pow5mult+0x20>
 800ba68:	4c25      	ldr	r4, [pc, #148]	; (800bb00 <__pow5mult+0xa8>)
 800ba6a:	3a01      	subs	r2, #1
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba72:	f7ff fe9b 	bl	800b7ac <__multadd>
 800ba76:	4607      	mov	r7, r0
 800ba78:	10ad      	asrs	r5, r5, #2
 800ba7a:	d03d      	beq.n	800baf8 <__pow5mult+0xa0>
 800ba7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba7e:	b97c      	cbnz	r4, 800baa0 <__pow5mult+0x48>
 800ba80:	2010      	movs	r0, #16
 800ba82:	f7ff fe1b 	bl	800b6bc <malloc>
 800ba86:	4602      	mov	r2, r0
 800ba88:	6270      	str	r0, [r6, #36]	; 0x24
 800ba8a:	b928      	cbnz	r0, 800ba98 <__pow5mult+0x40>
 800ba8c:	4b1d      	ldr	r3, [pc, #116]	; (800bb04 <__pow5mult+0xac>)
 800ba8e:	481e      	ldr	r0, [pc, #120]	; (800bb08 <__pow5mult+0xb0>)
 800ba90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba94:	f000 fc62 	bl	800c35c <__assert_func>
 800ba98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba9c:	6004      	str	r4, [r0, #0]
 800ba9e:	60c4      	str	r4, [r0, #12]
 800baa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800baa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baa8:	b94c      	cbnz	r4, 800babe <__pow5mult+0x66>
 800baaa:	f240 2171 	movw	r1, #625	; 0x271
 800baae:	4630      	mov	r0, r6
 800bab0:	f7ff ff12 	bl	800b8d8 <__i2b>
 800bab4:	2300      	movs	r3, #0
 800bab6:	f8c8 0008 	str.w	r0, [r8, #8]
 800baba:	4604      	mov	r4, r0
 800babc:	6003      	str	r3, [r0, #0]
 800babe:	f04f 0900 	mov.w	r9, #0
 800bac2:	07eb      	lsls	r3, r5, #31
 800bac4:	d50a      	bpl.n	800badc <__pow5mult+0x84>
 800bac6:	4639      	mov	r1, r7
 800bac8:	4622      	mov	r2, r4
 800baca:	4630      	mov	r0, r6
 800bacc:	f7ff ff1a 	bl	800b904 <__multiply>
 800bad0:	4639      	mov	r1, r7
 800bad2:	4680      	mov	r8, r0
 800bad4:	4630      	mov	r0, r6
 800bad6:	f7ff fe47 	bl	800b768 <_Bfree>
 800bada:	4647      	mov	r7, r8
 800badc:	106d      	asrs	r5, r5, #1
 800bade:	d00b      	beq.n	800baf8 <__pow5mult+0xa0>
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	b938      	cbnz	r0, 800baf4 <__pow5mult+0x9c>
 800bae4:	4622      	mov	r2, r4
 800bae6:	4621      	mov	r1, r4
 800bae8:	4630      	mov	r0, r6
 800baea:	f7ff ff0b 	bl	800b904 <__multiply>
 800baee:	6020      	str	r0, [r4, #0]
 800baf0:	f8c0 9000 	str.w	r9, [r0]
 800baf4:	4604      	mov	r4, r0
 800baf6:	e7e4      	b.n	800bac2 <__pow5mult+0x6a>
 800baf8:	4638      	mov	r0, r7
 800bafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bafe:	bf00      	nop
 800bb00:	0800d7e0 	.word	0x0800d7e0
 800bb04:	0800d5ad 	.word	0x0800d5ad
 800bb08:	0800d690 	.word	0x0800d690

0800bb0c <__lshift>:
 800bb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	6849      	ldr	r1, [r1, #4]
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	4691      	mov	r9, r2
 800bb20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb24:	f108 0601 	add.w	r6, r8, #1
 800bb28:	42b3      	cmp	r3, r6
 800bb2a:	db0b      	blt.n	800bb44 <__lshift+0x38>
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	f7ff fddb 	bl	800b6e8 <_Balloc>
 800bb32:	4605      	mov	r5, r0
 800bb34:	b948      	cbnz	r0, 800bb4a <__lshift+0x3e>
 800bb36:	4602      	mov	r2, r0
 800bb38:	4b2a      	ldr	r3, [pc, #168]	; (800bbe4 <__lshift+0xd8>)
 800bb3a:	482b      	ldr	r0, [pc, #172]	; (800bbe8 <__lshift+0xdc>)
 800bb3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb40:	f000 fc0c 	bl	800c35c <__assert_func>
 800bb44:	3101      	adds	r1, #1
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	e7ee      	b.n	800bb28 <__lshift+0x1c>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f100 0114 	add.w	r1, r0, #20
 800bb50:	f100 0210 	add.w	r2, r0, #16
 800bb54:	4618      	mov	r0, r3
 800bb56:	4553      	cmp	r3, sl
 800bb58:	db37      	blt.n	800bbca <__lshift+0xbe>
 800bb5a:	6920      	ldr	r0, [r4, #16]
 800bb5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb60:	f104 0314 	add.w	r3, r4, #20
 800bb64:	f019 091f 	ands.w	r9, r9, #31
 800bb68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb70:	d02f      	beq.n	800bbd2 <__lshift+0xc6>
 800bb72:	f1c9 0e20 	rsb	lr, r9, #32
 800bb76:	468a      	mov	sl, r1
 800bb78:	f04f 0c00 	mov.w	ip, #0
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	fa02 f209 	lsl.w	r2, r2, r9
 800bb82:	ea42 020c 	orr.w	r2, r2, ip
 800bb86:	f84a 2b04 	str.w	r2, [sl], #4
 800bb8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb8e:	4298      	cmp	r0, r3
 800bb90:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb94:	d8f2      	bhi.n	800bb7c <__lshift+0x70>
 800bb96:	1b03      	subs	r3, r0, r4
 800bb98:	3b15      	subs	r3, #21
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	3304      	adds	r3, #4
 800bba0:	f104 0215 	add.w	r2, r4, #21
 800bba4:	4290      	cmp	r0, r2
 800bba6:	bf38      	it	cc
 800bba8:	2304      	movcc	r3, #4
 800bbaa:	f841 c003 	str.w	ip, [r1, r3]
 800bbae:	f1bc 0f00 	cmp.w	ip, #0
 800bbb2:	d001      	beq.n	800bbb8 <__lshift+0xac>
 800bbb4:	f108 0602 	add.w	r6, r8, #2
 800bbb8:	3e01      	subs	r6, #1
 800bbba:	4638      	mov	r0, r7
 800bbbc:	612e      	str	r6, [r5, #16]
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	f7ff fdd2 	bl	800b768 <_Bfree>
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbca:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbce:	3301      	adds	r3, #1
 800bbd0:	e7c1      	b.n	800bb56 <__lshift+0x4a>
 800bbd2:	3904      	subs	r1, #4
 800bbd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbdc:	4298      	cmp	r0, r3
 800bbde:	d8f9      	bhi.n	800bbd4 <__lshift+0xc8>
 800bbe0:	e7ea      	b.n	800bbb8 <__lshift+0xac>
 800bbe2:	bf00      	nop
 800bbe4:	0800d61f 	.word	0x0800d61f
 800bbe8:	0800d690 	.word	0x0800d690

0800bbec <__mcmp>:
 800bbec:	b530      	push	{r4, r5, lr}
 800bbee:	6902      	ldr	r2, [r0, #16]
 800bbf0:	690c      	ldr	r4, [r1, #16]
 800bbf2:	1b12      	subs	r2, r2, r4
 800bbf4:	d10e      	bne.n	800bc14 <__mcmp+0x28>
 800bbf6:	f100 0314 	add.w	r3, r0, #20
 800bbfa:	3114      	adds	r1, #20
 800bbfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc0c:	42a5      	cmp	r5, r4
 800bc0e:	d003      	beq.n	800bc18 <__mcmp+0x2c>
 800bc10:	d305      	bcc.n	800bc1e <__mcmp+0x32>
 800bc12:	2201      	movs	r2, #1
 800bc14:	4610      	mov	r0, r2
 800bc16:	bd30      	pop	{r4, r5, pc}
 800bc18:	4283      	cmp	r3, r0
 800bc1a:	d3f3      	bcc.n	800bc04 <__mcmp+0x18>
 800bc1c:	e7fa      	b.n	800bc14 <__mcmp+0x28>
 800bc1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc22:	e7f7      	b.n	800bc14 <__mcmp+0x28>

0800bc24 <__mdiff>:
 800bc24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	460c      	mov	r4, r1
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	4620      	mov	r0, r4
 800bc30:	4690      	mov	r8, r2
 800bc32:	f7ff ffdb 	bl	800bbec <__mcmp>
 800bc36:	1e05      	subs	r5, r0, #0
 800bc38:	d110      	bne.n	800bc5c <__mdiff+0x38>
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff fd53 	bl	800b6e8 <_Balloc>
 800bc42:	b930      	cbnz	r0, 800bc52 <__mdiff+0x2e>
 800bc44:	4b3a      	ldr	r3, [pc, #232]	; (800bd30 <__mdiff+0x10c>)
 800bc46:	4602      	mov	r2, r0
 800bc48:	f240 2132 	movw	r1, #562	; 0x232
 800bc4c:	4839      	ldr	r0, [pc, #228]	; (800bd34 <__mdiff+0x110>)
 800bc4e:	f000 fb85 	bl	800c35c <__assert_func>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5c:	bfa4      	itt	ge
 800bc5e:	4643      	movge	r3, r8
 800bc60:	46a0      	movge	r8, r4
 800bc62:	4630      	mov	r0, r6
 800bc64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc68:	bfa6      	itte	ge
 800bc6a:	461c      	movge	r4, r3
 800bc6c:	2500      	movge	r5, #0
 800bc6e:	2501      	movlt	r5, #1
 800bc70:	f7ff fd3a 	bl	800b6e8 <_Balloc>
 800bc74:	b920      	cbnz	r0, 800bc80 <__mdiff+0x5c>
 800bc76:	4b2e      	ldr	r3, [pc, #184]	; (800bd30 <__mdiff+0x10c>)
 800bc78:	4602      	mov	r2, r0
 800bc7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc7e:	e7e5      	b.n	800bc4c <__mdiff+0x28>
 800bc80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc84:	6926      	ldr	r6, [r4, #16]
 800bc86:	60c5      	str	r5, [r0, #12]
 800bc88:	f104 0914 	add.w	r9, r4, #20
 800bc8c:	f108 0514 	add.w	r5, r8, #20
 800bc90:	f100 0e14 	add.w	lr, r0, #20
 800bc94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc9c:	f108 0210 	add.w	r2, r8, #16
 800bca0:	46f2      	mov	sl, lr
 800bca2:	2100      	movs	r1, #0
 800bca4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcac:	fa1f f883 	uxth.w	r8, r3
 800bcb0:	fa11 f18b 	uxtah	r1, r1, fp
 800bcb4:	0c1b      	lsrs	r3, r3, #16
 800bcb6:	eba1 0808 	sub.w	r8, r1, r8
 800bcba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcc2:	fa1f f888 	uxth.w	r8, r8
 800bcc6:	1419      	asrs	r1, r3, #16
 800bcc8:	454e      	cmp	r6, r9
 800bcca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcce:	f84a 3b04 	str.w	r3, [sl], #4
 800bcd2:	d8e7      	bhi.n	800bca4 <__mdiff+0x80>
 800bcd4:	1b33      	subs	r3, r6, r4
 800bcd6:	3b15      	subs	r3, #21
 800bcd8:	f023 0303 	bic.w	r3, r3, #3
 800bcdc:	3304      	adds	r3, #4
 800bcde:	3415      	adds	r4, #21
 800bce0:	42a6      	cmp	r6, r4
 800bce2:	bf38      	it	cc
 800bce4:	2304      	movcc	r3, #4
 800bce6:	441d      	add	r5, r3
 800bce8:	4473      	add	r3, lr
 800bcea:	469e      	mov	lr, r3
 800bcec:	462e      	mov	r6, r5
 800bcee:	4566      	cmp	r6, ip
 800bcf0:	d30e      	bcc.n	800bd10 <__mdiff+0xec>
 800bcf2:	f10c 0203 	add.w	r2, ip, #3
 800bcf6:	1b52      	subs	r2, r2, r5
 800bcf8:	f022 0203 	bic.w	r2, r2, #3
 800bcfc:	3d03      	subs	r5, #3
 800bcfe:	45ac      	cmp	ip, r5
 800bd00:	bf38      	it	cc
 800bd02:	2200      	movcc	r2, #0
 800bd04:	441a      	add	r2, r3
 800bd06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd0a:	b17b      	cbz	r3, 800bd2c <__mdiff+0x108>
 800bd0c:	6107      	str	r7, [r0, #16]
 800bd0e:	e7a3      	b.n	800bc58 <__mdiff+0x34>
 800bd10:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd14:	fa11 f288 	uxtah	r2, r1, r8
 800bd18:	1414      	asrs	r4, r2, #16
 800bd1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd1e:	b292      	uxth	r2, r2
 800bd20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd24:	f84e 2b04 	str.w	r2, [lr], #4
 800bd28:	1421      	asrs	r1, r4, #16
 800bd2a:	e7e0      	b.n	800bcee <__mdiff+0xca>
 800bd2c:	3f01      	subs	r7, #1
 800bd2e:	e7ea      	b.n	800bd06 <__mdiff+0xe2>
 800bd30:	0800d61f 	.word	0x0800d61f
 800bd34:	0800d690 	.word	0x0800d690

0800bd38 <__d2b>:
 800bd38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd3c:	4689      	mov	r9, r1
 800bd3e:	2101      	movs	r1, #1
 800bd40:	ec57 6b10 	vmov	r6, r7, d0
 800bd44:	4690      	mov	r8, r2
 800bd46:	f7ff fccf 	bl	800b6e8 <_Balloc>
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	b930      	cbnz	r0, 800bd5c <__d2b+0x24>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	4b25      	ldr	r3, [pc, #148]	; (800bde8 <__d2b+0xb0>)
 800bd52:	4826      	ldr	r0, [pc, #152]	; (800bdec <__d2b+0xb4>)
 800bd54:	f240 310a 	movw	r1, #778	; 0x30a
 800bd58:	f000 fb00 	bl	800c35c <__assert_func>
 800bd5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bd60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd64:	bb35      	cbnz	r5, 800bdb4 <__d2b+0x7c>
 800bd66:	2e00      	cmp	r6, #0
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	d028      	beq.n	800bdbe <__d2b+0x86>
 800bd6c:	4668      	mov	r0, sp
 800bd6e:	9600      	str	r6, [sp, #0]
 800bd70:	f7ff fd82 	bl	800b878 <__lo0bits>
 800bd74:	9900      	ldr	r1, [sp, #0]
 800bd76:	b300      	cbz	r0, 800bdba <__d2b+0x82>
 800bd78:	9a01      	ldr	r2, [sp, #4]
 800bd7a:	f1c0 0320 	rsb	r3, r0, #32
 800bd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd82:	430b      	orrs	r3, r1
 800bd84:	40c2      	lsrs	r2, r0
 800bd86:	6163      	str	r3, [r4, #20]
 800bd88:	9201      	str	r2, [sp, #4]
 800bd8a:	9b01      	ldr	r3, [sp, #4]
 800bd8c:	61a3      	str	r3, [r4, #24]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	bf14      	ite	ne
 800bd92:	2202      	movne	r2, #2
 800bd94:	2201      	moveq	r2, #1
 800bd96:	6122      	str	r2, [r4, #16]
 800bd98:	b1d5      	cbz	r5, 800bdd0 <__d2b+0x98>
 800bd9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd9e:	4405      	add	r5, r0
 800bda0:	f8c9 5000 	str.w	r5, [r9]
 800bda4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bda8:	f8c8 0000 	str.w	r0, [r8]
 800bdac:	4620      	mov	r0, r4
 800bdae:	b003      	add	sp, #12
 800bdb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdb8:	e7d5      	b.n	800bd66 <__d2b+0x2e>
 800bdba:	6161      	str	r1, [r4, #20]
 800bdbc:	e7e5      	b.n	800bd8a <__d2b+0x52>
 800bdbe:	a801      	add	r0, sp, #4
 800bdc0:	f7ff fd5a 	bl	800b878 <__lo0bits>
 800bdc4:	9b01      	ldr	r3, [sp, #4]
 800bdc6:	6163      	str	r3, [r4, #20]
 800bdc8:	2201      	movs	r2, #1
 800bdca:	6122      	str	r2, [r4, #16]
 800bdcc:	3020      	adds	r0, #32
 800bdce:	e7e3      	b.n	800bd98 <__d2b+0x60>
 800bdd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdd8:	f8c9 0000 	str.w	r0, [r9]
 800bddc:	6918      	ldr	r0, [r3, #16]
 800bdde:	f7ff fd2b 	bl	800b838 <__hi0bits>
 800bde2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bde6:	e7df      	b.n	800bda8 <__d2b+0x70>
 800bde8:	0800d61f 	.word	0x0800d61f
 800bdec:	0800d690 	.word	0x0800d690

0800bdf0 <_calloc_r>:
 800bdf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdf2:	fba1 2402 	umull	r2, r4, r1, r2
 800bdf6:	b94c      	cbnz	r4, 800be0c <_calloc_r+0x1c>
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	9201      	str	r2, [sp, #4]
 800bdfc:	f000 f87a 	bl	800bef4 <_malloc_r>
 800be00:	9a01      	ldr	r2, [sp, #4]
 800be02:	4605      	mov	r5, r0
 800be04:	b930      	cbnz	r0, 800be14 <_calloc_r+0x24>
 800be06:	4628      	mov	r0, r5
 800be08:	b003      	add	sp, #12
 800be0a:	bd30      	pop	{r4, r5, pc}
 800be0c:	220c      	movs	r2, #12
 800be0e:	6002      	str	r2, [r0, #0]
 800be10:	2500      	movs	r5, #0
 800be12:	e7f8      	b.n	800be06 <_calloc_r+0x16>
 800be14:	4621      	mov	r1, r4
 800be16:	f7fd fdf1 	bl	80099fc <memset>
 800be1a:	e7f4      	b.n	800be06 <_calloc_r+0x16>

0800be1c <_free_r>:
 800be1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be1e:	2900      	cmp	r1, #0
 800be20:	d044      	beq.n	800beac <_free_r+0x90>
 800be22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be26:	9001      	str	r0, [sp, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f1a1 0404 	sub.w	r4, r1, #4
 800be2e:	bfb8      	it	lt
 800be30:	18e4      	addlt	r4, r4, r3
 800be32:	f000 fb19 	bl	800c468 <__malloc_lock>
 800be36:	4a1e      	ldr	r2, [pc, #120]	; (800beb0 <_free_r+0x94>)
 800be38:	9801      	ldr	r0, [sp, #4]
 800be3a:	6813      	ldr	r3, [r2, #0]
 800be3c:	b933      	cbnz	r3, 800be4c <_free_r+0x30>
 800be3e:	6063      	str	r3, [r4, #4]
 800be40:	6014      	str	r4, [r2, #0]
 800be42:	b003      	add	sp, #12
 800be44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be48:	f000 bb14 	b.w	800c474 <__malloc_unlock>
 800be4c:	42a3      	cmp	r3, r4
 800be4e:	d908      	bls.n	800be62 <_free_r+0x46>
 800be50:	6825      	ldr	r5, [r4, #0]
 800be52:	1961      	adds	r1, r4, r5
 800be54:	428b      	cmp	r3, r1
 800be56:	bf01      	itttt	eq
 800be58:	6819      	ldreq	r1, [r3, #0]
 800be5a:	685b      	ldreq	r3, [r3, #4]
 800be5c:	1949      	addeq	r1, r1, r5
 800be5e:	6021      	streq	r1, [r4, #0]
 800be60:	e7ed      	b.n	800be3e <_free_r+0x22>
 800be62:	461a      	mov	r2, r3
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	b10b      	cbz	r3, 800be6c <_free_r+0x50>
 800be68:	42a3      	cmp	r3, r4
 800be6a:	d9fa      	bls.n	800be62 <_free_r+0x46>
 800be6c:	6811      	ldr	r1, [r2, #0]
 800be6e:	1855      	adds	r5, r2, r1
 800be70:	42a5      	cmp	r5, r4
 800be72:	d10b      	bne.n	800be8c <_free_r+0x70>
 800be74:	6824      	ldr	r4, [r4, #0]
 800be76:	4421      	add	r1, r4
 800be78:	1854      	adds	r4, r2, r1
 800be7a:	42a3      	cmp	r3, r4
 800be7c:	6011      	str	r1, [r2, #0]
 800be7e:	d1e0      	bne.n	800be42 <_free_r+0x26>
 800be80:	681c      	ldr	r4, [r3, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	6053      	str	r3, [r2, #4]
 800be86:	4421      	add	r1, r4
 800be88:	6011      	str	r1, [r2, #0]
 800be8a:	e7da      	b.n	800be42 <_free_r+0x26>
 800be8c:	d902      	bls.n	800be94 <_free_r+0x78>
 800be8e:	230c      	movs	r3, #12
 800be90:	6003      	str	r3, [r0, #0]
 800be92:	e7d6      	b.n	800be42 <_free_r+0x26>
 800be94:	6825      	ldr	r5, [r4, #0]
 800be96:	1961      	adds	r1, r4, r5
 800be98:	428b      	cmp	r3, r1
 800be9a:	bf04      	itt	eq
 800be9c:	6819      	ldreq	r1, [r3, #0]
 800be9e:	685b      	ldreq	r3, [r3, #4]
 800bea0:	6063      	str	r3, [r4, #4]
 800bea2:	bf04      	itt	eq
 800bea4:	1949      	addeq	r1, r1, r5
 800bea6:	6021      	streq	r1, [r4, #0]
 800bea8:	6054      	str	r4, [r2, #4]
 800beaa:	e7ca      	b.n	800be42 <_free_r+0x26>
 800beac:	b003      	add	sp, #12
 800beae:	bd30      	pop	{r4, r5, pc}
 800beb0:	20000618 	.word	0x20000618

0800beb4 <sbrk_aligned>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	4e0e      	ldr	r6, [pc, #56]	; (800bef0 <sbrk_aligned+0x3c>)
 800beb8:	460c      	mov	r4, r1
 800beba:	6831      	ldr	r1, [r6, #0]
 800bebc:	4605      	mov	r5, r0
 800bebe:	b911      	cbnz	r1, 800bec6 <sbrk_aligned+0x12>
 800bec0:	f000 f9e6 	bl	800c290 <_sbrk_r>
 800bec4:	6030      	str	r0, [r6, #0]
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 f9e1 	bl	800c290 <_sbrk_r>
 800bece:	1c43      	adds	r3, r0, #1
 800bed0:	d00a      	beq.n	800bee8 <sbrk_aligned+0x34>
 800bed2:	1cc4      	adds	r4, r0, #3
 800bed4:	f024 0403 	bic.w	r4, r4, #3
 800bed8:	42a0      	cmp	r0, r4
 800beda:	d007      	beq.n	800beec <sbrk_aligned+0x38>
 800bedc:	1a21      	subs	r1, r4, r0
 800bede:	4628      	mov	r0, r5
 800bee0:	f000 f9d6 	bl	800c290 <_sbrk_r>
 800bee4:	3001      	adds	r0, #1
 800bee6:	d101      	bne.n	800beec <sbrk_aligned+0x38>
 800bee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800beec:	4620      	mov	r0, r4
 800beee:	bd70      	pop	{r4, r5, r6, pc}
 800bef0:	2000061c 	.word	0x2000061c

0800bef4 <_malloc_r>:
 800bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef8:	1ccd      	adds	r5, r1, #3
 800befa:	f025 0503 	bic.w	r5, r5, #3
 800befe:	3508      	adds	r5, #8
 800bf00:	2d0c      	cmp	r5, #12
 800bf02:	bf38      	it	cc
 800bf04:	250c      	movcc	r5, #12
 800bf06:	2d00      	cmp	r5, #0
 800bf08:	4607      	mov	r7, r0
 800bf0a:	db01      	blt.n	800bf10 <_malloc_r+0x1c>
 800bf0c:	42a9      	cmp	r1, r5
 800bf0e:	d905      	bls.n	800bf1c <_malloc_r+0x28>
 800bf10:	230c      	movs	r3, #12
 800bf12:	603b      	str	r3, [r7, #0]
 800bf14:	2600      	movs	r6, #0
 800bf16:	4630      	mov	r0, r6
 800bf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf1c:	4e2e      	ldr	r6, [pc, #184]	; (800bfd8 <_malloc_r+0xe4>)
 800bf1e:	f000 faa3 	bl	800c468 <__malloc_lock>
 800bf22:	6833      	ldr	r3, [r6, #0]
 800bf24:	461c      	mov	r4, r3
 800bf26:	bb34      	cbnz	r4, 800bf76 <_malloc_r+0x82>
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	f7ff ffc2 	bl	800beb4 <sbrk_aligned>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	4604      	mov	r4, r0
 800bf34:	d14d      	bne.n	800bfd2 <_malloc_r+0xde>
 800bf36:	6834      	ldr	r4, [r6, #0]
 800bf38:	4626      	mov	r6, r4
 800bf3a:	2e00      	cmp	r6, #0
 800bf3c:	d140      	bne.n	800bfc0 <_malloc_r+0xcc>
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	4631      	mov	r1, r6
 800bf42:	4638      	mov	r0, r7
 800bf44:	eb04 0803 	add.w	r8, r4, r3
 800bf48:	f000 f9a2 	bl	800c290 <_sbrk_r>
 800bf4c:	4580      	cmp	r8, r0
 800bf4e:	d13a      	bne.n	800bfc6 <_malloc_r+0xd2>
 800bf50:	6821      	ldr	r1, [r4, #0]
 800bf52:	3503      	adds	r5, #3
 800bf54:	1a6d      	subs	r5, r5, r1
 800bf56:	f025 0503 	bic.w	r5, r5, #3
 800bf5a:	3508      	adds	r5, #8
 800bf5c:	2d0c      	cmp	r5, #12
 800bf5e:	bf38      	it	cc
 800bf60:	250c      	movcc	r5, #12
 800bf62:	4629      	mov	r1, r5
 800bf64:	4638      	mov	r0, r7
 800bf66:	f7ff ffa5 	bl	800beb4 <sbrk_aligned>
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	d02b      	beq.n	800bfc6 <_malloc_r+0xd2>
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	442b      	add	r3, r5
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	e00e      	b.n	800bf94 <_malloc_r+0xa0>
 800bf76:	6822      	ldr	r2, [r4, #0]
 800bf78:	1b52      	subs	r2, r2, r5
 800bf7a:	d41e      	bmi.n	800bfba <_malloc_r+0xc6>
 800bf7c:	2a0b      	cmp	r2, #11
 800bf7e:	d916      	bls.n	800bfae <_malloc_r+0xba>
 800bf80:	1961      	adds	r1, r4, r5
 800bf82:	42a3      	cmp	r3, r4
 800bf84:	6025      	str	r5, [r4, #0]
 800bf86:	bf18      	it	ne
 800bf88:	6059      	strne	r1, [r3, #4]
 800bf8a:	6863      	ldr	r3, [r4, #4]
 800bf8c:	bf08      	it	eq
 800bf8e:	6031      	streq	r1, [r6, #0]
 800bf90:	5162      	str	r2, [r4, r5]
 800bf92:	604b      	str	r3, [r1, #4]
 800bf94:	4638      	mov	r0, r7
 800bf96:	f104 060b 	add.w	r6, r4, #11
 800bf9a:	f000 fa6b 	bl	800c474 <__malloc_unlock>
 800bf9e:	f026 0607 	bic.w	r6, r6, #7
 800bfa2:	1d23      	adds	r3, r4, #4
 800bfa4:	1af2      	subs	r2, r6, r3
 800bfa6:	d0b6      	beq.n	800bf16 <_malloc_r+0x22>
 800bfa8:	1b9b      	subs	r3, r3, r6
 800bfaa:	50a3      	str	r3, [r4, r2]
 800bfac:	e7b3      	b.n	800bf16 <_malloc_r+0x22>
 800bfae:	6862      	ldr	r2, [r4, #4]
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	bf0c      	ite	eq
 800bfb4:	6032      	streq	r2, [r6, #0]
 800bfb6:	605a      	strne	r2, [r3, #4]
 800bfb8:	e7ec      	b.n	800bf94 <_malloc_r+0xa0>
 800bfba:	4623      	mov	r3, r4
 800bfbc:	6864      	ldr	r4, [r4, #4]
 800bfbe:	e7b2      	b.n	800bf26 <_malloc_r+0x32>
 800bfc0:	4634      	mov	r4, r6
 800bfc2:	6876      	ldr	r6, [r6, #4]
 800bfc4:	e7b9      	b.n	800bf3a <_malloc_r+0x46>
 800bfc6:	230c      	movs	r3, #12
 800bfc8:	603b      	str	r3, [r7, #0]
 800bfca:	4638      	mov	r0, r7
 800bfcc:	f000 fa52 	bl	800c474 <__malloc_unlock>
 800bfd0:	e7a1      	b.n	800bf16 <_malloc_r+0x22>
 800bfd2:	6025      	str	r5, [r4, #0]
 800bfd4:	e7de      	b.n	800bf94 <_malloc_r+0xa0>
 800bfd6:	bf00      	nop
 800bfd8:	20000618 	.word	0x20000618

0800bfdc <__sfputc_r>:
 800bfdc:	6893      	ldr	r3, [r2, #8]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	b410      	push	{r4}
 800bfe4:	6093      	str	r3, [r2, #8]
 800bfe6:	da08      	bge.n	800bffa <__sfputc_r+0x1e>
 800bfe8:	6994      	ldr	r4, [r2, #24]
 800bfea:	42a3      	cmp	r3, r4
 800bfec:	db01      	blt.n	800bff2 <__sfputc_r+0x16>
 800bfee:	290a      	cmp	r1, #10
 800bff0:	d103      	bne.n	800bffa <__sfputc_r+0x1e>
 800bff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff6:	f7fe ba01 	b.w	800a3fc <__swbuf_r>
 800bffa:	6813      	ldr	r3, [r2, #0]
 800bffc:	1c58      	adds	r0, r3, #1
 800bffe:	6010      	str	r0, [r2, #0]
 800c000:	7019      	strb	r1, [r3, #0]
 800c002:	4608      	mov	r0, r1
 800c004:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <__sfputs_r>:
 800c00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00c:	4606      	mov	r6, r0
 800c00e:	460f      	mov	r7, r1
 800c010:	4614      	mov	r4, r2
 800c012:	18d5      	adds	r5, r2, r3
 800c014:	42ac      	cmp	r4, r5
 800c016:	d101      	bne.n	800c01c <__sfputs_r+0x12>
 800c018:	2000      	movs	r0, #0
 800c01a:	e007      	b.n	800c02c <__sfputs_r+0x22>
 800c01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c020:	463a      	mov	r2, r7
 800c022:	4630      	mov	r0, r6
 800c024:	f7ff ffda 	bl	800bfdc <__sfputc_r>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d1f3      	bne.n	800c014 <__sfputs_r+0xa>
 800c02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c030 <_vfiprintf_r>:
 800c030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c034:	460d      	mov	r5, r1
 800c036:	b09d      	sub	sp, #116	; 0x74
 800c038:	4614      	mov	r4, r2
 800c03a:	4698      	mov	r8, r3
 800c03c:	4606      	mov	r6, r0
 800c03e:	b118      	cbz	r0, 800c048 <_vfiprintf_r+0x18>
 800c040:	6983      	ldr	r3, [r0, #24]
 800c042:	b90b      	cbnz	r3, 800c048 <_vfiprintf_r+0x18>
 800c044:	f7ff fa30 	bl	800b4a8 <__sinit>
 800c048:	4b89      	ldr	r3, [pc, #548]	; (800c270 <_vfiprintf_r+0x240>)
 800c04a:	429d      	cmp	r5, r3
 800c04c:	d11b      	bne.n	800c086 <_vfiprintf_r+0x56>
 800c04e:	6875      	ldr	r5, [r6, #4]
 800c050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c052:	07d9      	lsls	r1, r3, #31
 800c054:	d405      	bmi.n	800c062 <_vfiprintf_r+0x32>
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	059a      	lsls	r2, r3, #22
 800c05a:	d402      	bmi.n	800c062 <_vfiprintf_r+0x32>
 800c05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c05e:	f7ff fac6 	bl	800b5ee <__retarget_lock_acquire_recursive>
 800c062:	89ab      	ldrh	r3, [r5, #12]
 800c064:	071b      	lsls	r3, r3, #28
 800c066:	d501      	bpl.n	800c06c <_vfiprintf_r+0x3c>
 800c068:	692b      	ldr	r3, [r5, #16]
 800c06a:	b9eb      	cbnz	r3, 800c0a8 <_vfiprintf_r+0x78>
 800c06c:	4629      	mov	r1, r5
 800c06e:	4630      	mov	r0, r6
 800c070:	f7fe fa16 	bl	800a4a0 <__swsetup_r>
 800c074:	b1c0      	cbz	r0, 800c0a8 <_vfiprintf_r+0x78>
 800c076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c078:	07dc      	lsls	r4, r3, #31
 800c07a:	d50e      	bpl.n	800c09a <_vfiprintf_r+0x6a>
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c080:	b01d      	add	sp, #116	; 0x74
 800c082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c086:	4b7b      	ldr	r3, [pc, #492]	; (800c274 <_vfiprintf_r+0x244>)
 800c088:	429d      	cmp	r5, r3
 800c08a:	d101      	bne.n	800c090 <_vfiprintf_r+0x60>
 800c08c:	68b5      	ldr	r5, [r6, #8]
 800c08e:	e7df      	b.n	800c050 <_vfiprintf_r+0x20>
 800c090:	4b79      	ldr	r3, [pc, #484]	; (800c278 <_vfiprintf_r+0x248>)
 800c092:	429d      	cmp	r5, r3
 800c094:	bf08      	it	eq
 800c096:	68f5      	ldreq	r5, [r6, #12]
 800c098:	e7da      	b.n	800c050 <_vfiprintf_r+0x20>
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	0598      	lsls	r0, r3, #22
 800c09e:	d4ed      	bmi.n	800c07c <_vfiprintf_r+0x4c>
 800c0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0a2:	f7ff faa5 	bl	800b5f0 <__retarget_lock_release_recursive>
 800c0a6:	e7e9      	b.n	800c07c <_vfiprintf_r+0x4c>
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ac:	2320      	movs	r3, #32
 800c0ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0b6:	2330      	movs	r3, #48	; 0x30
 800c0b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c27c <_vfiprintf_r+0x24c>
 800c0bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0c0:	f04f 0901 	mov.w	r9, #1
 800c0c4:	4623      	mov	r3, r4
 800c0c6:	469a      	mov	sl, r3
 800c0c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0cc:	b10a      	cbz	r2, 800c0d2 <_vfiprintf_r+0xa2>
 800c0ce:	2a25      	cmp	r2, #37	; 0x25
 800c0d0:	d1f9      	bne.n	800c0c6 <_vfiprintf_r+0x96>
 800c0d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0d6:	d00b      	beq.n	800c0f0 <_vfiprintf_r+0xc0>
 800c0d8:	465b      	mov	r3, fp
 800c0da:	4622      	mov	r2, r4
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f7ff ff93 	bl	800c00a <__sfputs_r>
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	f000 80aa 	beq.w	800c23e <_vfiprintf_r+0x20e>
 800c0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0ec:	445a      	add	r2, fp
 800c0ee:	9209      	str	r2, [sp, #36]	; 0x24
 800c0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f000 80a2 	beq.w	800c23e <_vfiprintf_r+0x20e>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c104:	f10a 0a01 	add.w	sl, sl, #1
 800c108:	9304      	str	r3, [sp, #16]
 800c10a:	9307      	str	r3, [sp, #28]
 800c10c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c110:	931a      	str	r3, [sp, #104]	; 0x68
 800c112:	4654      	mov	r4, sl
 800c114:	2205      	movs	r2, #5
 800c116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c11a:	4858      	ldr	r0, [pc, #352]	; (800c27c <_vfiprintf_r+0x24c>)
 800c11c:	f7f4 f868 	bl	80001f0 <memchr>
 800c120:	9a04      	ldr	r2, [sp, #16]
 800c122:	b9d8      	cbnz	r0, 800c15c <_vfiprintf_r+0x12c>
 800c124:	06d1      	lsls	r1, r2, #27
 800c126:	bf44      	itt	mi
 800c128:	2320      	movmi	r3, #32
 800c12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c12e:	0713      	lsls	r3, r2, #28
 800c130:	bf44      	itt	mi
 800c132:	232b      	movmi	r3, #43	; 0x2b
 800c134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c138:	f89a 3000 	ldrb.w	r3, [sl]
 800c13c:	2b2a      	cmp	r3, #42	; 0x2a
 800c13e:	d015      	beq.n	800c16c <_vfiprintf_r+0x13c>
 800c140:	9a07      	ldr	r2, [sp, #28]
 800c142:	4654      	mov	r4, sl
 800c144:	2000      	movs	r0, #0
 800c146:	f04f 0c0a 	mov.w	ip, #10
 800c14a:	4621      	mov	r1, r4
 800c14c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c150:	3b30      	subs	r3, #48	; 0x30
 800c152:	2b09      	cmp	r3, #9
 800c154:	d94e      	bls.n	800c1f4 <_vfiprintf_r+0x1c4>
 800c156:	b1b0      	cbz	r0, 800c186 <_vfiprintf_r+0x156>
 800c158:	9207      	str	r2, [sp, #28]
 800c15a:	e014      	b.n	800c186 <_vfiprintf_r+0x156>
 800c15c:	eba0 0308 	sub.w	r3, r0, r8
 800c160:	fa09 f303 	lsl.w	r3, r9, r3
 800c164:	4313      	orrs	r3, r2
 800c166:	9304      	str	r3, [sp, #16]
 800c168:	46a2      	mov	sl, r4
 800c16a:	e7d2      	b.n	800c112 <_vfiprintf_r+0xe2>
 800c16c:	9b03      	ldr	r3, [sp, #12]
 800c16e:	1d19      	adds	r1, r3, #4
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	9103      	str	r1, [sp, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	bfbb      	ittet	lt
 800c178:	425b      	neglt	r3, r3
 800c17a:	f042 0202 	orrlt.w	r2, r2, #2
 800c17e:	9307      	strge	r3, [sp, #28]
 800c180:	9307      	strlt	r3, [sp, #28]
 800c182:	bfb8      	it	lt
 800c184:	9204      	strlt	r2, [sp, #16]
 800c186:	7823      	ldrb	r3, [r4, #0]
 800c188:	2b2e      	cmp	r3, #46	; 0x2e
 800c18a:	d10c      	bne.n	800c1a6 <_vfiprintf_r+0x176>
 800c18c:	7863      	ldrb	r3, [r4, #1]
 800c18e:	2b2a      	cmp	r3, #42	; 0x2a
 800c190:	d135      	bne.n	800c1fe <_vfiprintf_r+0x1ce>
 800c192:	9b03      	ldr	r3, [sp, #12]
 800c194:	1d1a      	adds	r2, r3, #4
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	9203      	str	r2, [sp, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	bfb8      	it	lt
 800c19e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c1a2:	3402      	adds	r4, #2
 800c1a4:	9305      	str	r3, [sp, #20]
 800c1a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c28c <_vfiprintf_r+0x25c>
 800c1aa:	7821      	ldrb	r1, [r4, #0]
 800c1ac:	2203      	movs	r2, #3
 800c1ae:	4650      	mov	r0, sl
 800c1b0:	f7f4 f81e 	bl	80001f0 <memchr>
 800c1b4:	b140      	cbz	r0, 800c1c8 <_vfiprintf_r+0x198>
 800c1b6:	2340      	movs	r3, #64	; 0x40
 800c1b8:	eba0 000a 	sub.w	r0, r0, sl
 800c1bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c1c0:	9b04      	ldr	r3, [sp, #16]
 800c1c2:	4303      	orrs	r3, r0
 800c1c4:	3401      	adds	r4, #1
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1cc:	482c      	ldr	r0, [pc, #176]	; (800c280 <_vfiprintf_r+0x250>)
 800c1ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1d2:	2206      	movs	r2, #6
 800c1d4:	f7f4 f80c 	bl	80001f0 <memchr>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d03f      	beq.n	800c25c <_vfiprintf_r+0x22c>
 800c1dc:	4b29      	ldr	r3, [pc, #164]	; (800c284 <_vfiprintf_r+0x254>)
 800c1de:	bb1b      	cbnz	r3, 800c228 <_vfiprintf_r+0x1f8>
 800c1e0:	9b03      	ldr	r3, [sp, #12]
 800c1e2:	3307      	adds	r3, #7
 800c1e4:	f023 0307 	bic.w	r3, r3, #7
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	9303      	str	r3, [sp, #12]
 800c1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ee:	443b      	add	r3, r7
 800c1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f2:	e767      	b.n	800c0c4 <_vfiprintf_r+0x94>
 800c1f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	e7a5      	b.n	800c14a <_vfiprintf_r+0x11a>
 800c1fe:	2300      	movs	r3, #0
 800c200:	3401      	adds	r4, #1
 800c202:	9305      	str	r3, [sp, #20]
 800c204:	4619      	mov	r1, r3
 800c206:	f04f 0c0a 	mov.w	ip, #10
 800c20a:	4620      	mov	r0, r4
 800c20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c210:	3a30      	subs	r2, #48	; 0x30
 800c212:	2a09      	cmp	r2, #9
 800c214:	d903      	bls.n	800c21e <_vfiprintf_r+0x1ee>
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0c5      	beq.n	800c1a6 <_vfiprintf_r+0x176>
 800c21a:	9105      	str	r1, [sp, #20]
 800c21c:	e7c3      	b.n	800c1a6 <_vfiprintf_r+0x176>
 800c21e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c222:	4604      	mov	r4, r0
 800c224:	2301      	movs	r3, #1
 800c226:	e7f0      	b.n	800c20a <_vfiprintf_r+0x1da>
 800c228:	ab03      	add	r3, sp, #12
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	462a      	mov	r2, r5
 800c22e:	4b16      	ldr	r3, [pc, #88]	; (800c288 <_vfiprintf_r+0x258>)
 800c230:	a904      	add	r1, sp, #16
 800c232:	4630      	mov	r0, r6
 800c234:	f7fd fc8a 	bl	8009b4c <_printf_float>
 800c238:	4607      	mov	r7, r0
 800c23a:	1c78      	adds	r0, r7, #1
 800c23c:	d1d6      	bne.n	800c1ec <_vfiprintf_r+0x1bc>
 800c23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c240:	07d9      	lsls	r1, r3, #31
 800c242:	d405      	bmi.n	800c250 <_vfiprintf_r+0x220>
 800c244:	89ab      	ldrh	r3, [r5, #12]
 800c246:	059a      	lsls	r2, r3, #22
 800c248:	d402      	bmi.n	800c250 <_vfiprintf_r+0x220>
 800c24a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c24c:	f7ff f9d0 	bl	800b5f0 <__retarget_lock_release_recursive>
 800c250:	89ab      	ldrh	r3, [r5, #12]
 800c252:	065b      	lsls	r3, r3, #25
 800c254:	f53f af12 	bmi.w	800c07c <_vfiprintf_r+0x4c>
 800c258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c25a:	e711      	b.n	800c080 <_vfiprintf_r+0x50>
 800c25c:	ab03      	add	r3, sp, #12
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	462a      	mov	r2, r5
 800c262:	4b09      	ldr	r3, [pc, #36]	; (800c288 <_vfiprintf_r+0x258>)
 800c264:	a904      	add	r1, sp, #16
 800c266:	4630      	mov	r0, r6
 800c268:	f7fd ff14 	bl	800a094 <_printf_i>
 800c26c:	e7e4      	b.n	800c238 <_vfiprintf_r+0x208>
 800c26e:	bf00      	nop
 800c270:	0800d650 	.word	0x0800d650
 800c274:	0800d670 	.word	0x0800d670
 800c278:	0800d630 	.word	0x0800d630
 800c27c:	0800d7ec 	.word	0x0800d7ec
 800c280:	0800d7f6 	.word	0x0800d7f6
 800c284:	08009b4d 	.word	0x08009b4d
 800c288:	0800c00b 	.word	0x0800c00b
 800c28c:	0800d7f2 	.word	0x0800d7f2

0800c290 <_sbrk_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4d06      	ldr	r5, [pc, #24]	; (800c2ac <_sbrk_r+0x1c>)
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	602b      	str	r3, [r5, #0]
 800c29c:	f7f7 f856 	bl	800334c <_sbrk>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_sbrk_r+0x1a>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_sbrk_r+0x1a>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	20000620 	.word	0x20000620

0800c2b0 <__sread>:
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b8:	f000 f8e2 	bl	800c480 <_read_r>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	bfab      	itete	ge
 800c2c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2c2:	89a3      	ldrhlt	r3, [r4, #12]
 800c2c4:	181b      	addge	r3, r3, r0
 800c2c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2ca:	bfac      	ite	ge
 800c2cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2ce:	81a3      	strhlt	r3, [r4, #12]
 800c2d0:	bd10      	pop	{r4, pc}

0800c2d2 <__swrite>:
 800c2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d6:	461f      	mov	r7, r3
 800c2d8:	898b      	ldrh	r3, [r1, #12]
 800c2da:	05db      	lsls	r3, r3, #23
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	4616      	mov	r6, r2
 800c2e2:	d505      	bpl.n	800c2f0 <__swrite+0x1e>
 800c2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f000 f898 	bl	800c420 <_lseek_r>
 800c2f0:	89a3      	ldrh	r3, [r4, #12]
 800c2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2fa:	81a3      	strh	r3, [r4, #12]
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	463b      	mov	r3, r7
 800c300:	4628      	mov	r0, r5
 800c302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c306:	f000 b817 	b.w	800c338 <_write_r>

0800c30a <__sseek>:
 800c30a:	b510      	push	{r4, lr}
 800c30c:	460c      	mov	r4, r1
 800c30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c312:	f000 f885 	bl	800c420 <_lseek_r>
 800c316:	1c43      	adds	r3, r0, #1
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	bf15      	itete	ne
 800c31c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c31e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c326:	81a3      	strheq	r3, [r4, #12]
 800c328:	bf18      	it	ne
 800c32a:	81a3      	strhne	r3, [r4, #12]
 800c32c:	bd10      	pop	{r4, pc}

0800c32e <__sclose>:
 800c32e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c332:	f000 b831 	b.w	800c398 <_close_r>
	...

0800c338 <_write_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d07      	ldr	r5, [pc, #28]	; (800c358 <_write_r+0x20>)
 800c33c:	4604      	mov	r4, r0
 800c33e:	4608      	mov	r0, r1
 800c340:	4611      	mov	r1, r2
 800c342:	2200      	movs	r2, #0
 800c344:	602a      	str	r2, [r5, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	f7f4 fe7e 	bl	8001048 <_write>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_write_r+0x1e>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_write_r+0x1e>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	20000620 	.word	0x20000620

0800c35c <__assert_func>:
 800c35c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c35e:	4614      	mov	r4, r2
 800c360:	461a      	mov	r2, r3
 800c362:	4b09      	ldr	r3, [pc, #36]	; (800c388 <__assert_func+0x2c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4605      	mov	r5, r0
 800c368:	68d8      	ldr	r0, [r3, #12]
 800c36a:	b14c      	cbz	r4, 800c380 <__assert_func+0x24>
 800c36c:	4b07      	ldr	r3, [pc, #28]	; (800c38c <__assert_func+0x30>)
 800c36e:	9100      	str	r1, [sp, #0]
 800c370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c374:	4906      	ldr	r1, [pc, #24]	; (800c390 <__assert_func+0x34>)
 800c376:	462b      	mov	r3, r5
 800c378:	f000 f81e 	bl	800c3b8 <fiprintf>
 800c37c:	f000 f89f 	bl	800c4be <abort>
 800c380:	4b04      	ldr	r3, [pc, #16]	; (800c394 <__assert_func+0x38>)
 800c382:	461c      	mov	r4, r3
 800c384:	e7f3      	b.n	800c36e <__assert_func+0x12>
 800c386:	bf00      	nop
 800c388:	20000014 	.word	0x20000014
 800c38c:	0800d7fd 	.word	0x0800d7fd
 800c390:	0800d80a 	.word	0x0800d80a
 800c394:	0800d838 	.word	0x0800d838

0800c398 <_close_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d06      	ldr	r5, [pc, #24]	; (800c3b4 <_close_r+0x1c>)
 800c39c:	2300      	movs	r3, #0
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	f7f6 ff9d 	bl	80032e2 <_close>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_close_r+0x1a>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_close_r+0x1a>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	20000620 	.word	0x20000620

0800c3b8 <fiprintf>:
 800c3b8:	b40e      	push	{r1, r2, r3}
 800c3ba:	b503      	push	{r0, r1, lr}
 800c3bc:	4601      	mov	r1, r0
 800c3be:	ab03      	add	r3, sp, #12
 800c3c0:	4805      	ldr	r0, [pc, #20]	; (800c3d8 <fiprintf+0x20>)
 800c3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c6:	6800      	ldr	r0, [r0, #0]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	f7ff fe31 	bl	800c030 <_vfiprintf_r>
 800c3ce:	b002      	add	sp, #8
 800c3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3d4:	b003      	add	sp, #12
 800c3d6:	4770      	bx	lr
 800c3d8:	20000014 	.word	0x20000014

0800c3dc <_fstat_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4d07      	ldr	r5, [pc, #28]	; (800c3fc <_fstat_r+0x20>)
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	4608      	mov	r0, r1
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	602b      	str	r3, [r5, #0]
 800c3ea:	f7f6 ff86 	bl	80032fa <_fstat>
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	d102      	bne.n	800c3f8 <_fstat_r+0x1c>
 800c3f2:	682b      	ldr	r3, [r5, #0]
 800c3f4:	b103      	cbz	r3, 800c3f8 <_fstat_r+0x1c>
 800c3f6:	6023      	str	r3, [r4, #0]
 800c3f8:	bd38      	pop	{r3, r4, r5, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20000620 	.word	0x20000620

0800c400 <_isatty_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	4d06      	ldr	r5, [pc, #24]	; (800c41c <_isatty_r+0x1c>)
 800c404:	2300      	movs	r3, #0
 800c406:	4604      	mov	r4, r0
 800c408:	4608      	mov	r0, r1
 800c40a:	602b      	str	r3, [r5, #0]
 800c40c:	f7f6 ff85 	bl	800331a <_isatty>
 800c410:	1c43      	adds	r3, r0, #1
 800c412:	d102      	bne.n	800c41a <_isatty_r+0x1a>
 800c414:	682b      	ldr	r3, [r5, #0]
 800c416:	b103      	cbz	r3, 800c41a <_isatty_r+0x1a>
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	20000620 	.word	0x20000620

0800c420 <_lseek_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4d07      	ldr	r5, [pc, #28]	; (800c440 <_lseek_r+0x20>)
 800c424:	4604      	mov	r4, r0
 800c426:	4608      	mov	r0, r1
 800c428:	4611      	mov	r1, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	602a      	str	r2, [r5, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	f7f6 ff7e 	bl	8003330 <_lseek>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_lseek_r+0x1e>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_lseek_r+0x1e>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	20000620 	.word	0x20000620

0800c444 <__ascii_mbtowc>:
 800c444:	b082      	sub	sp, #8
 800c446:	b901      	cbnz	r1, 800c44a <__ascii_mbtowc+0x6>
 800c448:	a901      	add	r1, sp, #4
 800c44a:	b142      	cbz	r2, 800c45e <__ascii_mbtowc+0x1a>
 800c44c:	b14b      	cbz	r3, 800c462 <__ascii_mbtowc+0x1e>
 800c44e:	7813      	ldrb	r3, [r2, #0]
 800c450:	600b      	str	r3, [r1, #0]
 800c452:	7812      	ldrb	r2, [r2, #0]
 800c454:	1e10      	subs	r0, r2, #0
 800c456:	bf18      	it	ne
 800c458:	2001      	movne	r0, #1
 800c45a:	b002      	add	sp, #8
 800c45c:	4770      	bx	lr
 800c45e:	4610      	mov	r0, r2
 800c460:	e7fb      	b.n	800c45a <__ascii_mbtowc+0x16>
 800c462:	f06f 0001 	mvn.w	r0, #1
 800c466:	e7f8      	b.n	800c45a <__ascii_mbtowc+0x16>

0800c468 <__malloc_lock>:
 800c468:	4801      	ldr	r0, [pc, #4]	; (800c470 <__malloc_lock+0x8>)
 800c46a:	f7ff b8c0 	b.w	800b5ee <__retarget_lock_acquire_recursive>
 800c46e:	bf00      	nop
 800c470:	20000614 	.word	0x20000614

0800c474 <__malloc_unlock>:
 800c474:	4801      	ldr	r0, [pc, #4]	; (800c47c <__malloc_unlock+0x8>)
 800c476:	f7ff b8bb 	b.w	800b5f0 <__retarget_lock_release_recursive>
 800c47a:	bf00      	nop
 800c47c:	20000614 	.word	0x20000614

0800c480 <_read_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d07      	ldr	r5, [pc, #28]	; (800c4a0 <_read_r+0x20>)
 800c484:	4604      	mov	r4, r0
 800c486:	4608      	mov	r0, r1
 800c488:	4611      	mov	r1, r2
 800c48a:	2200      	movs	r2, #0
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	f7f6 ff0a 	bl	80032a8 <_read>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_read_r+0x1e>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_read_r+0x1e>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	20000620 	.word	0x20000620

0800c4a4 <__ascii_wctomb>:
 800c4a4:	b149      	cbz	r1, 800c4ba <__ascii_wctomb+0x16>
 800c4a6:	2aff      	cmp	r2, #255	; 0xff
 800c4a8:	bf85      	ittet	hi
 800c4aa:	238a      	movhi	r3, #138	; 0x8a
 800c4ac:	6003      	strhi	r3, [r0, #0]
 800c4ae:	700a      	strbls	r2, [r1, #0]
 800c4b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c4b4:	bf98      	it	ls
 800c4b6:	2001      	movls	r0, #1
 800c4b8:	4770      	bx	lr
 800c4ba:	4608      	mov	r0, r1
 800c4bc:	4770      	bx	lr

0800c4be <abort>:
 800c4be:	b508      	push	{r3, lr}
 800c4c0:	2006      	movs	r0, #6
 800c4c2:	f000 f82b 	bl	800c51c <raise>
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	f7f6 fee4 	bl	8003294 <_exit>

0800c4cc <_raise_r>:
 800c4cc:	291f      	cmp	r1, #31
 800c4ce:	b538      	push	{r3, r4, r5, lr}
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	d904      	bls.n	800c4e0 <_raise_r+0x14>
 800c4d6:	2316      	movs	r3, #22
 800c4d8:	6003      	str	r3, [r0, #0]
 800c4da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4e2:	b112      	cbz	r2, 800c4ea <_raise_r+0x1e>
 800c4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4e8:	b94b      	cbnz	r3, 800c4fe <_raise_r+0x32>
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 f830 	bl	800c550 <_getpid_r>
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4fa:	f000 b817 	b.w	800c52c <_kill_r>
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d00a      	beq.n	800c518 <_raise_r+0x4c>
 800c502:	1c59      	adds	r1, r3, #1
 800c504:	d103      	bne.n	800c50e <_raise_r+0x42>
 800c506:	2316      	movs	r3, #22
 800c508:	6003      	str	r3, [r0, #0]
 800c50a:	2001      	movs	r0, #1
 800c50c:	e7e7      	b.n	800c4de <_raise_r+0x12>
 800c50e:	2400      	movs	r4, #0
 800c510:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c514:	4628      	mov	r0, r5
 800c516:	4798      	blx	r3
 800c518:	2000      	movs	r0, #0
 800c51a:	e7e0      	b.n	800c4de <_raise_r+0x12>

0800c51c <raise>:
 800c51c:	4b02      	ldr	r3, [pc, #8]	; (800c528 <raise+0xc>)
 800c51e:	4601      	mov	r1, r0
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	f7ff bfd3 	b.w	800c4cc <_raise_r>
 800c526:	bf00      	nop
 800c528:	20000014 	.word	0x20000014

0800c52c <_kill_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	; (800c54c <_kill_r+0x20>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	4611      	mov	r1, r2
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f7f6 fe9b 	bl	8003274 <_kill>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d102      	bne.n	800c548 <_kill_r+0x1c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	b103      	cbz	r3, 800c548 <_kill_r+0x1c>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	20000620 	.word	0x20000620

0800c550 <_getpid_r>:
 800c550:	f7f6 be88 	b.w	8003264 <_getpid>

0800c554 <fmod>:
 800c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c556:	ed2d 8b02 	vpush	{d8}
 800c55a:	ec57 6b10 	vmov	r6, r7, d0
 800c55e:	ec55 4b11 	vmov	r4, r5, d1
 800c562:	f000 f8ab 	bl	800c6bc <__ieee754_fmod>
 800c566:	4622      	mov	r2, r4
 800c568:	462b      	mov	r3, r5
 800c56a:	4630      	mov	r0, r6
 800c56c:	4639      	mov	r1, r7
 800c56e:	eeb0 8a40 	vmov.f32	s16, s0
 800c572:	eef0 8a60 	vmov.f32	s17, s1
 800c576:	f7f4 fae1 	bl	8000b3c <__aeabi_dcmpun>
 800c57a:	b990      	cbnz	r0, 800c5a2 <fmod+0x4e>
 800c57c:	2200      	movs	r2, #0
 800c57e:	2300      	movs	r3, #0
 800c580:	4620      	mov	r0, r4
 800c582:	4629      	mov	r1, r5
 800c584:	f7f4 faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c588:	b158      	cbz	r0, 800c5a2 <fmod+0x4e>
 800c58a:	f7fd fa0d 	bl	80099a8 <__errno>
 800c58e:	2321      	movs	r3, #33	; 0x21
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	2200      	movs	r2, #0
 800c594:	2300      	movs	r3, #0
 800c596:	4610      	mov	r0, r2
 800c598:	4619      	mov	r1, r3
 800c59a:	f7f4 f95f 	bl	800085c <__aeabi_ddiv>
 800c59e:	ec41 0b18 	vmov	d8, r0, r1
 800c5a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c5a6:	eef0 0a68 	vmov.f32	s1, s17
 800c5aa:	ecbd 8b02 	vpop	{d8}
 800c5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5b0 <sqrt>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	ed2d 8b02 	vpush	{d8}
 800c5b6:	ec55 4b10 	vmov	r4, r5, d0
 800c5ba:	f000 f991 	bl	800c8e0 <__ieee754_sqrt>
 800c5be:	4622      	mov	r2, r4
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	eeb0 8a40 	vmov.f32	s16, s0
 800c5ca:	eef0 8a60 	vmov.f32	s17, s1
 800c5ce:	f7f4 fab5 	bl	8000b3c <__aeabi_dcmpun>
 800c5d2:	b990      	cbnz	r0, 800c5fa <sqrt+0x4a>
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	f7f4 fa86 	bl	8000aec <__aeabi_dcmplt>
 800c5e0:	b158      	cbz	r0, 800c5fa <sqrt+0x4a>
 800c5e2:	f7fd f9e1 	bl	80099a8 <__errno>
 800c5e6:	2321      	movs	r3, #33	; 0x21
 800c5e8:	6003      	str	r3, [r0, #0]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	f7f4 f933 	bl	800085c <__aeabi_ddiv>
 800c5f6:	ec41 0b18 	vmov	d8, r0, r1
 800c5fa:	eeb0 0a48 	vmov.f32	s0, s16
 800c5fe:	eef0 0a68 	vmov.f32	s1, s17
 800c602:	ecbd 8b02 	vpop	{d8}
 800c606:	bd38      	pop	{r3, r4, r5, pc}

0800c608 <atan2f>:
 800c608:	f000 ba1c 	b.w	800ca44 <__ieee754_atan2f>

0800c60c <powf>:
 800c60c:	b508      	push	{r3, lr}
 800c60e:	ed2d 8b04 	vpush	{d8-d9}
 800c612:	eeb0 8a60 	vmov.f32	s16, s1
 800c616:	eeb0 9a40 	vmov.f32	s18, s0
 800c61a:	f000 fab3 	bl	800cb84 <__ieee754_powf>
 800c61e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c626:	eef0 8a40 	vmov.f32	s17, s0
 800c62a:	d63e      	bvs.n	800c6aa <powf+0x9e>
 800c62c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c634:	d112      	bne.n	800c65c <powf+0x50>
 800c636:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63e:	d039      	beq.n	800c6b4 <powf+0xa8>
 800c640:	eeb0 0a48 	vmov.f32	s0, s16
 800c644:	f000 fe6d 	bl	800d322 <finitef>
 800c648:	b378      	cbz	r0, 800c6aa <powf+0x9e>
 800c64a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c652:	d52a      	bpl.n	800c6aa <powf+0x9e>
 800c654:	f7fd f9a8 	bl	80099a8 <__errno>
 800c658:	2322      	movs	r3, #34	; 0x22
 800c65a:	e014      	b.n	800c686 <powf+0x7a>
 800c65c:	f000 fe61 	bl	800d322 <finitef>
 800c660:	b998      	cbnz	r0, 800c68a <powf+0x7e>
 800c662:	eeb0 0a49 	vmov.f32	s0, s18
 800c666:	f000 fe5c 	bl	800d322 <finitef>
 800c66a:	b170      	cbz	r0, 800c68a <powf+0x7e>
 800c66c:	eeb0 0a48 	vmov.f32	s0, s16
 800c670:	f000 fe57 	bl	800d322 <finitef>
 800c674:	b148      	cbz	r0, 800c68a <powf+0x7e>
 800c676:	eef4 8a68 	vcmp.f32	s17, s17
 800c67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c67e:	d7e9      	bvc.n	800c654 <powf+0x48>
 800c680:	f7fd f992 	bl	80099a8 <__errno>
 800c684:	2321      	movs	r3, #33	; 0x21
 800c686:	6003      	str	r3, [r0, #0]
 800c688:	e00f      	b.n	800c6aa <powf+0x9e>
 800c68a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c692:	d10a      	bne.n	800c6aa <powf+0x9e>
 800c694:	eeb0 0a49 	vmov.f32	s0, s18
 800c698:	f000 fe43 	bl	800d322 <finitef>
 800c69c:	b128      	cbz	r0, 800c6aa <powf+0x9e>
 800c69e:	eeb0 0a48 	vmov.f32	s0, s16
 800c6a2:	f000 fe3e 	bl	800d322 <finitef>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d1d4      	bne.n	800c654 <powf+0x48>
 800c6aa:	eeb0 0a68 	vmov.f32	s0, s17
 800c6ae:	ecbd 8b04 	vpop	{d8-d9}
 800c6b2:	bd08      	pop	{r3, pc}
 800c6b4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c6b8:	e7f7      	b.n	800c6aa <powf+0x9e>
	...

0800c6bc <__ieee754_fmod>:
 800c6bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c0:	ec53 2b11 	vmov	r2, r3, d1
 800c6c4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800c6c8:	ea5e 0402 	orrs.w	r4, lr, r2
 800c6cc:	ec51 0b10 	vmov	r0, r1, d0
 800c6d0:	ee11 7a10 	vmov	r7, s2
 800c6d4:	ee11 ca10 	vmov	ip, s2
 800c6d8:	461e      	mov	r6, r3
 800c6da:	d00d      	beq.n	800c6f8 <__ieee754_fmod+0x3c>
 800c6dc:	4c7a      	ldr	r4, [pc, #488]	; (800c8c8 <__ieee754_fmod+0x20c>)
 800c6de:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c6e2:	45a0      	cmp	r8, r4
 800c6e4:	4689      	mov	r9, r1
 800c6e6:	dc07      	bgt.n	800c6f8 <__ieee754_fmod+0x3c>
 800c6e8:	4254      	negs	r4, r2
 800c6ea:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800c8d4 <__ieee754_fmod+0x218>
 800c6ee:	4314      	orrs	r4, r2
 800c6f0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800c6f4:	455c      	cmp	r4, fp
 800c6f6:	d909      	bls.n	800c70c <__ieee754_fmod+0x50>
 800c6f8:	f7f3 ff86 	bl	8000608 <__aeabi_dmul>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	f7f4 f8ac 	bl	800085c <__aeabi_ddiv>
 800c704:	ec41 0b10 	vmov	d0, r0, r1
 800c708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	45f0      	cmp	r8, lr
 800c70e:	ee10 aa10 	vmov	sl, s0
 800c712:	ee10 4a10 	vmov	r4, s0
 800c716:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c71a:	dc09      	bgt.n	800c730 <__ieee754_fmod+0x74>
 800c71c:	dbf2      	blt.n	800c704 <__ieee754_fmod+0x48>
 800c71e:	4290      	cmp	r0, r2
 800c720:	d3f0      	bcc.n	800c704 <__ieee754_fmod+0x48>
 800c722:	d105      	bne.n	800c730 <__ieee754_fmod+0x74>
 800c724:	4b69      	ldr	r3, [pc, #420]	; (800c8cc <__ieee754_fmod+0x210>)
 800c726:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800c72a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c72e:	e7e9      	b.n	800c704 <__ieee754_fmod+0x48>
 800c730:	ea19 0f0b 	tst.w	r9, fp
 800c734:	d14a      	bne.n	800c7cc <__ieee754_fmod+0x110>
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	d13f      	bne.n	800c7bc <__ieee754_fmod+0x100>
 800c73c:	4964      	ldr	r1, [pc, #400]	; (800c8d0 <__ieee754_fmod+0x214>)
 800c73e:	4653      	mov	r3, sl
 800c740:	2b00      	cmp	r3, #0
 800c742:	dc38      	bgt.n	800c7b6 <__ieee754_fmod+0xfa>
 800c744:	4b63      	ldr	r3, [pc, #396]	; (800c8d4 <__ieee754_fmod+0x218>)
 800c746:	4033      	ands	r3, r6
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d14f      	bne.n	800c7ec <__ieee754_fmod+0x130>
 800c74c:	f1be 0f00 	cmp.w	lr, #0
 800c750:	d144      	bne.n	800c7dc <__ieee754_fmod+0x120>
 800c752:	4a5f      	ldr	r2, [pc, #380]	; (800c8d0 <__ieee754_fmod+0x214>)
 800c754:	463b      	mov	r3, r7
 800c756:	2b00      	cmp	r3, #0
 800c758:	dc3d      	bgt.n	800c7d6 <__ieee754_fmod+0x11a>
 800c75a:	4b5f      	ldr	r3, [pc, #380]	; (800c8d8 <__ieee754_fmod+0x21c>)
 800c75c:	4299      	cmp	r1, r3
 800c75e:	db4a      	blt.n	800c7f6 <__ieee754_fmod+0x13a>
 800c760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c768:	485b      	ldr	r0, [pc, #364]	; (800c8d8 <__ieee754_fmod+0x21c>)
 800c76a:	4282      	cmp	r2, r0
 800c76c:	db57      	blt.n	800c81e <__ieee754_fmod+0x162>
 800c76e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c772:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800c776:	1a89      	subs	r1, r1, r2
 800c778:	1b98      	subs	r0, r3, r6
 800c77a:	eba4 070c 	sub.w	r7, r4, ip
 800c77e:	2900      	cmp	r1, #0
 800c780:	d164      	bne.n	800c84c <__ieee754_fmod+0x190>
 800c782:	4564      	cmp	r4, ip
 800c784:	bf38      	it	cc
 800c786:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800c78a:	2800      	cmp	r0, #0
 800c78c:	bfa4      	itt	ge
 800c78e:	463c      	movge	r4, r7
 800c790:	4603      	movge	r3, r0
 800c792:	ea53 0104 	orrs.w	r1, r3, r4
 800c796:	d0c5      	beq.n	800c724 <__ieee754_fmod+0x68>
 800c798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c79c:	db6b      	blt.n	800c876 <__ieee754_fmod+0x1ba>
 800c79e:	494e      	ldr	r1, [pc, #312]	; (800c8d8 <__ieee754_fmod+0x21c>)
 800c7a0:	428a      	cmp	r2, r1
 800c7a2:	db6e      	blt.n	800c882 <__ieee754_fmod+0x1c6>
 800c7a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c7a8:	431d      	orrs	r5, r3
 800c7aa:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800c7ae:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	e7a6      	b.n	800c704 <__ieee754_fmod+0x48>
 800c7b6:	3901      	subs	r1, #1
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	e7c1      	b.n	800c740 <__ieee754_fmod+0x84>
 800c7bc:	4946      	ldr	r1, [pc, #280]	; (800c8d8 <__ieee754_fmod+0x21c>)
 800c7be:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	ddbe      	ble.n	800c744 <__ieee754_fmod+0x88>
 800c7c6:	3901      	subs	r1, #1
 800c7c8:	005b      	lsls	r3, r3, #1
 800c7ca:	e7fa      	b.n	800c7c2 <__ieee754_fmod+0x106>
 800c7cc:	ea4f 5128 	mov.w	r1, r8, asr #20
 800c7d0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c7d4:	e7b6      	b.n	800c744 <__ieee754_fmod+0x88>
 800c7d6:	3a01      	subs	r2, #1
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	e7bc      	b.n	800c756 <__ieee754_fmod+0x9a>
 800c7dc:	4a3e      	ldr	r2, [pc, #248]	; (800c8d8 <__ieee754_fmod+0x21c>)
 800c7de:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	ddb9      	ble.n	800c75a <__ieee754_fmod+0x9e>
 800c7e6:	3a01      	subs	r2, #1
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	e7fa      	b.n	800c7e2 <__ieee754_fmod+0x126>
 800c7ec:	ea4f 522e 	mov.w	r2, lr, asr #20
 800c7f0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c7f4:	e7b1      	b.n	800c75a <__ieee754_fmod+0x9e>
 800c7f6:	1a5c      	subs	r4, r3, r1
 800c7f8:	2c1f      	cmp	r4, #31
 800c7fa:	dc0a      	bgt.n	800c812 <__ieee754_fmod+0x156>
 800c7fc:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800c800:	fa08 f804 	lsl.w	r8, r8, r4
 800c804:	fa2a f303 	lsr.w	r3, sl, r3
 800c808:	ea43 0308 	orr.w	r3, r3, r8
 800c80c:	fa0a f404 	lsl.w	r4, sl, r4
 800c810:	e7aa      	b.n	800c768 <__ieee754_fmod+0xac>
 800c812:	4b32      	ldr	r3, [pc, #200]	; (800c8dc <__ieee754_fmod+0x220>)
 800c814:	1a5b      	subs	r3, r3, r1
 800c816:	fa0a f303 	lsl.w	r3, sl, r3
 800c81a:	2400      	movs	r4, #0
 800c81c:	e7a4      	b.n	800c768 <__ieee754_fmod+0xac>
 800c81e:	eba0 0c02 	sub.w	ip, r0, r2
 800c822:	f1bc 0f1f 	cmp.w	ip, #31
 800c826:	dc0a      	bgt.n	800c83e <__ieee754_fmod+0x182>
 800c828:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800c82c:	fa0e fe0c 	lsl.w	lr, lr, ip
 800c830:	fa27 f606 	lsr.w	r6, r7, r6
 800c834:	ea46 060e 	orr.w	r6, r6, lr
 800c838:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c83c:	e79b      	b.n	800c776 <__ieee754_fmod+0xba>
 800c83e:	4e27      	ldr	r6, [pc, #156]	; (800c8dc <__ieee754_fmod+0x220>)
 800c840:	1ab6      	subs	r6, r6, r2
 800c842:	fa07 f606 	lsl.w	r6, r7, r6
 800c846:	f04f 0c00 	mov.w	ip, #0
 800c84a:	e794      	b.n	800c776 <__ieee754_fmod+0xba>
 800c84c:	4564      	cmp	r4, ip
 800c84e:	bf38      	it	cc
 800c850:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800c854:	2800      	cmp	r0, #0
 800c856:	da05      	bge.n	800c864 <__ieee754_fmod+0x1a8>
 800c858:	0fe0      	lsrs	r0, r4, #31
 800c85a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c85e:	0064      	lsls	r4, r4, #1
 800c860:	3901      	subs	r1, #1
 800c862:	e789      	b.n	800c778 <__ieee754_fmod+0xbc>
 800c864:	ea50 0307 	orrs.w	r3, r0, r7
 800c868:	f43f af5c 	beq.w	800c724 <__ieee754_fmod+0x68>
 800c86c:	0ffb      	lsrs	r3, r7, #31
 800c86e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c872:	007c      	lsls	r4, r7, #1
 800c874:	e7f4      	b.n	800c860 <__ieee754_fmod+0x1a4>
 800c876:	0fe1      	lsrs	r1, r4, #31
 800c878:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c87c:	0064      	lsls	r4, r4, #1
 800c87e:	3a01      	subs	r2, #1
 800c880:	e78a      	b.n	800c798 <__ieee754_fmod+0xdc>
 800c882:	1a89      	subs	r1, r1, r2
 800c884:	2914      	cmp	r1, #20
 800c886:	dc0a      	bgt.n	800c89e <__ieee754_fmod+0x1e2>
 800c888:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c88c:	fa03 f202 	lsl.w	r2, r3, r2
 800c890:	40cc      	lsrs	r4, r1
 800c892:	4322      	orrs	r2, r4
 800c894:	410b      	asrs	r3, r1
 800c896:	ea43 0105 	orr.w	r1, r3, r5
 800c89a:	4610      	mov	r0, r2
 800c89c:	e732      	b.n	800c704 <__ieee754_fmod+0x48>
 800c89e:	291f      	cmp	r1, #31
 800c8a0:	dc07      	bgt.n	800c8b2 <__ieee754_fmod+0x1f6>
 800c8a2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c8a6:	40cc      	lsrs	r4, r1
 800c8a8:	fa03 f202 	lsl.w	r2, r3, r2
 800c8ac:	4322      	orrs	r2, r4
 800c8ae:	462b      	mov	r3, r5
 800c8b0:	e7f1      	b.n	800c896 <__ieee754_fmod+0x1da>
 800c8b2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800c8b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8ba:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800c8be:	32e2      	adds	r2, #226	; 0xe2
 800c8c0:	fa43 f202 	asr.w	r2, r3, r2
 800c8c4:	e7f3      	b.n	800c8ae <__ieee754_fmod+0x1f2>
 800c8c6:	bf00      	nop
 800c8c8:	7fefffff 	.word	0x7fefffff
 800c8cc:	0800d948 	.word	0x0800d948
 800c8d0:	fffffbed 	.word	0xfffffbed
 800c8d4:	7ff00000 	.word	0x7ff00000
 800c8d8:	fffffc02 	.word	0xfffffc02
 800c8dc:	fffffbe2 	.word	0xfffffbe2

0800c8e0 <__ieee754_sqrt>:
 800c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e4:	ec55 4b10 	vmov	r4, r5, d0
 800c8e8:	4e55      	ldr	r6, [pc, #340]	; (800ca40 <__ieee754_sqrt+0x160>)
 800c8ea:	43ae      	bics	r6, r5
 800c8ec:	ee10 0a10 	vmov	r0, s0
 800c8f0:	ee10 3a10 	vmov	r3, s0
 800c8f4:	462a      	mov	r2, r5
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	d110      	bne.n	800c91c <__ieee754_sqrt+0x3c>
 800c8fa:	ee10 2a10 	vmov	r2, s0
 800c8fe:	462b      	mov	r3, r5
 800c900:	f7f3 fe82 	bl	8000608 <__aeabi_dmul>
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4620      	mov	r0, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	f7f3 fcc6 	bl	800029c <__adddf3>
 800c910:	4604      	mov	r4, r0
 800c912:	460d      	mov	r5, r1
 800c914:	ec45 4b10 	vmov	d0, r4, r5
 800c918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91c:	2d00      	cmp	r5, #0
 800c91e:	dc10      	bgt.n	800c942 <__ieee754_sqrt+0x62>
 800c920:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c924:	4330      	orrs	r0, r6
 800c926:	d0f5      	beq.n	800c914 <__ieee754_sqrt+0x34>
 800c928:	b15d      	cbz	r5, 800c942 <__ieee754_sqrt+0x62>
 800c92a:	ee10 2a10 	vmov	r2, s0
 800c92e:	462b      	mov	r3, r5
 800c930:	ee10 0a10 	vmov	r0, s0
 800c934:	f7f3 fcb0 	bl	8000298 <__aeabi_dsub>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	f7f3 ff8e 	bl	800085c <__aeabi_ddiv>
 800c940:	e7e6      	b.n	800c910 <__ieee754_sqrt+0x30>
 800c942:	1512      	asrs	r2, r2, #20
 800c944:	d074      	beq.n	800ca30 <__ieee754_sqrt+0x150>
 800c946:	07d4      	lsls	r4, r2, #31
 800c948:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c94c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c954:	bf5e      	ittt	pl
 800c956:	0fda      	lsrpl	r2, r3, #31
 800c958:	005b      	lslpl	r3, r3, #1
 800c95a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c95e:	2400      	movs	r4, #0
 800c960:	0fda      	lsrs	r2, r3, #31
 800c962:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c966:	107f      	asrs	r7, r7, #1
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	2516      	movs	r5, #22
 800c96c:	4620      	mov	r0, r4
 800c96e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c972:	1886      	adds	r6, r0, r2
 800c974:	428e      	cmp	r6, r1
 800c976:	bfde      	ittt	le
 800c978:	1b89      	suble	r1, r1, r6
 800c97a:	18b0      	addle	r0, r6, r2
 800c97c:	18a4      	addle	r4, r4, r2
 800c97e:	0049      	lsls	r1, r1, #1
 800c980:	3d01      	subs	r5, #1
 800c982:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c986:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c98a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c98e:	d1f0      	bne.n	800c972 <__ieee754_sqrt+0x92>
 800c990:	462a      	mov	r2, r5
 800c992:	f04f 0e20 	mov.w	lr, #32
 800c996:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c99a:	4281      	cmp	r1, r0
 800c99c:	eb06 0c05 	add.w	ip, r6, r5
 800c9a0:	dc02      	bgt.n	800c9a8 <__ieee754_sqrt+0xc8>
 800c9a2:	d113      	bne.n	800c9cc <__ieee754_sqrt+0xec>
 800c9a4:	459c      	cmp	ip, r3
 800c9a6:	d811      	bhi.n	800c9cc <__ieee754_sqrt+0xec>
 800c9a8:	f1bc 0f00 	cmp.w	ip, #0
 800c9ac:	eb0c 0506 	add.w	r5, ip, r6
 800c9b0:	da43      	bge.n	800ca3a <__ieee754_sqrt+0x15a>
 800c9b2:	2d00      	cmp	r5, #0
 800c9b4:	db41      	blt.n	800ca3a <__ieee754_sqrt+0x15a>
 800c9b6:	f100 0801 	add.w	r8, r0, #1
 800c9ba:	1a09      	subs	r1, r1, r0
 800c9bc:	459c      	cmp	ip, r3
 800c9be:	bf88      	it	hi
 800c9c0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800c9c4:	eba3 030c 	sub.w	r3, r3, ip
 800c9c8:	4432      	add	r2, r6
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c9d0:	f1be 0e01 	subs.w	lr, lr, #1
 800c9d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c9d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c9e0:	d1db      	bne.n	800c99a <__ieee754_sqrt+0xba>
 800c9e2:	430b      	orrs	r3, r1
 800c9e4:	d006      	beq.n	800c9f4 <__ieee754_sqrt+0x114>
 800c9e6:	1c50      	adds	r0, r2, #1
 800c9e8:	bf13      	iteet	ne
 800c9ea:	3201      	addne	r2, #1
 800c9ec:	3401      	addeq	r4, #1
 800c9ee:	4672      	moveq	r2, lr
 800c9f0:	f022 0201 	bicne.w	r2, r2, #1
 800c9f4:	1063      	asrs	r3, r4, #1
 800c9f6:	0852      	lsrs	r2, r2, #1
 800c9f8:	07e1      	lsls	r1, r4, #31
 800c9fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c9fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ca02:	bf48      	it	mi
 800ca04:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ca08:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	e781      	b.n	800c914 <__ieee754_sqrt+0x34>
 800ca10:	0ad9      	lsrs	r1, r3, #11
 800ca12:	3815      	subs	r0, #21
 800ca14:	055b      	lsls	r3, r3, #21
 800ca16:	2900      	cmp	r1, #0
 800ca18:	d0fa      	beq.n	800ca10 <__ieee754_sqrt+0x130>
 800ca1a:	02cd      	lsls	r5, r1, #11
 800ca1c:	d50a      	bpl.n	800ca34 <__ieee754_sqrt+0x154>
 800ca1e:	f1c2 0420 	rsb	r4, r2, #32
 800ca22:	fa23 f404 	lsr.w	r4, r3, r4
 800ca26:	1e55      	subs	r5, r2, #1
 800ca28:	4093      	lsls	r3, r2
 800ca2a:	4321      	orrs	r1, r4
 800ca2c:	1b42      	subs	r2, r0, r5
 800ca2e:	e78a      	b.n	800c946 <__ieee754_sqrt+0x66>
 800ca30:	4610      	mov	r0, r2
 800ca32:	e7f0      	b.n	800ca16 <__ieee754_sqrt+0x136>
 800ca34:	0049      	lsls	r1, r1, #1
 800ca36:	3201      	adds	r2, #1
 800ca38:	e7ef      	b.n	800ca1a <__ieee754_sqrt+0x13a>
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	e7bd      	b.n	800c9ba <__ieee754_sqrt+0xda>
 800ca3e:	bf00      	nop
 800ca40:	7ff00000 	.word	0x7ff00000

0800ca44 <__ieee754_atan2f>:
 800ca44:	ee10 2a90 	vmov	r2, s1
 800ca48:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ca4c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ca50:	b510      	push	{r4, lr}
 800ca52:	eef0 7a40 	vmov.f32	s15, s0
 800ca56:	dc06      	bgt.n	800ca66 <__ieee754_atan2f+0x22>
 800ca58:	ee10 0a10 	vmov	r0, s0
 800ca5c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ca60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca64:	dd04      	ble.n	800ca70 <__ieee754_atan2f+0x2c>
 800ca66:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ca6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca6e:	bd10      	pop	{r4, pc}
 800ca70:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ca74:	d103      	bne.n	800ca7e <__ieee754_atan2f+0x3a>
 800ca76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca7a:	f000 bb77 	b.w	800d16c <atanf>
 800ca7e:	1794      	asrs	r4, r2, #30
 800ca80:	f004 0402 	and.w	r4, r4, #2
 800ca84:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ca88:	b943      	cbnz	r3, 800ca9c <__ieee754_atan2f+0x58>
 800ca8a:	2c02      	cmp	r4, #2
 800ca8c:	d05e      	beq.n	800cb4c <__ieee754_atan2f+0x108>
 800ca8e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cb60 <__ieee754_atan2f+0x11c>
 800ca92:	2c03      	cmp	r4, #3
 800ca94:	bf08      	it	eq
 800ca96:	eef0 7a47 	vmoveq.f32	s15, s14
 800ca9a:	e7e6      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800ca9c:	b941      	cbnz	r1, 800cab0 <__ieee754_atan2f+0x6c>
 800ca9e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800cb64 <__ieee754_atan2f+0x120>
 800caa2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800cb68 <__ieee754_atan2f+0x124>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	bfb8      	it	lt
 800caaa:	eef0 7a40 	vmovlt.f32	s15, s0
 800caae:	e7dc      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cab0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cab4:	d110      	bne.n	800cad8 <__ieee754_atan2f+0x94>
 800cab6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800caba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cabe:	d107      	bne.n	800cad0 <__ieee754_atan2f+0x8c>
 800cac0:	2c02      	cmp	r4, #2
 800cac2:	d846      	bhi.n	800cb52 <__ieee754_atan2f+0x10e>
 800cac4:	4b29      	ldr	r3, [pc, #164]	; (800cb6c <__ieee754_atan2f+0x128>)
 800cac6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800caca:	edd4 7a00 	vldr	s15, [r4]
 800cace:	e7cc      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cad0:	2c02      	cmp	r4, #2
 800cad2:	d841      	bhi.n	800cb58 <__ieee754_atan2f+0x114>
 800cad4:	4b26      	ldr	r3, [pc, #152]	; (800cb70 <__ieee754_atan2f+0x12c>)
 800cad6:	e7f6      	b.n	800cac6 <__ieee754_atan2f+0x82>
 800cad8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cadc:	d0df      	beq.n	800ca9e <__ieee754_atan2f+0x5a>
 800cade:	1a5b      	subs	r3, r3, r1
 800cae0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800cae4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cae8:	da1a      	bge.n	800cb20 <__ieee754_atan2f+0xdc>
 800caea:	2a00      	cmp	r2, #0
 800caec:	da01      	bge.n	800caf2 <__ieee754_atan2f+0xae>
 800caee:	313c      	adds	r1, #60	; 0x3c
 800caf0:	db19      	blt.n	800cb26 <__ieee754_atan2f+0xe2>
 800caf2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800caf6:	f000 fc0d 	bl	800d314 <fabsf>
 800cafa:	f000 fb37 	bl	800d16c <atanf>
 800cafe:	eef0 7a40 	vmov.f32	s15, s0
 800cb02:	2c01      	cmp	r4, #1
 800cb04:	d012      	beq.n	800cb2c <__ieee754_atan2f+0xe8>
 800cb06:	2c02      	cmp	r4, #2
 800cb08:	d017      	beq.n	800cb3a <__ieee754_atan2f+0xf6>
 800cb0a:	2c00      	cmp	r4, #0
 800cb0c:	d0ad      	beq.n	800ca6a <__ieee754_atan2f+0x26>
 800cb0e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800cb74 <__ieee754_atan2f+0x130>
 800cb12:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cb16:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800cb78 <__ieee754_atan2f+0x134>
 800cb1a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cb1e:	e7a4      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cb20:	eddf 7a10 	vldr	s15, [pc, #64]	; 800cb64 <__ieee754_atan2f+0x120>
 800cb24:	e7ed      	b.n	800cb02 <__ieee754_atan2f+0xbe>
 800cb26:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cb7c <__ieee754_atan2f+0x138>
 800cb2a:	e7ea      	b.n	800cb02 <__ieee754_atan2f+0xbe>
 800cb2c:	ee17 3a90 	vmov	r3, s15
 800cb30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb34:	ee07 3a90 	vmov	s15, r3
 800cb38:	e797      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cb3a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800cb74 <__ieee754_atan2f+0x130>
 800cb3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800cb42:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800cb78 <__ieee754_atan2f+0x134>
 800cb46:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cb4a:	e78e      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cb4c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800cb78 <__ieee754_atan2f+0x134>
 800cb50:	e78b      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cb52:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800cb80 <__ieee754_atan2f+0x13c>
 800cb56:	e788      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cb58:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cb7c <__ieee754_atan2f+0x138>
 800cb5c:	e785      	b.n	800ca6a <__ieee754_atan2f+0x26>
 800cb5e:	bf00      	nop
 800cb60:	c0490fdb 	.word	0xc0490fdb
 800cb64:	3fc90fdb 	.word	0x3fc90fdb
 800cb68:	bfc90fdb 	.word	0xbfc90fdb
 800cb6c:	0800d958 	.word	0x0800d958
 800cb70:	0800d964 	.word	0x0800d964
 800cb74:	33bbbd2e 	.word	0x33bbbd2e
 800cb78:	40490fdb 	.word	0x40490fdb
 800cb7c:	00000000 	.word	0x00000000
 800cb80:	3f490fdb 	.word	0x3f490fdb

0800cb84 <__ieee754_powf>:
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	ee10 4a90 	vmov	r4, s1
 800cb8c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800cb90:	ed2d 8b02 	vpush	{d8}
 800cb94:	ee10 6a10 	vmov	r6, s0
 800cb98:	eeb0 8a40 	vmov.f32	s16, s0
 800cb9c:	eef0 8a60 	vmov.f32	s17, s1
 800cba0:	d10c      	bne.n	800cbbc <__ieee754_powf+0x38>
 800cba2:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800cba6:	0076      	lsls	r6, r6, #1
 800cba8:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800cbac:	f240 8296 	bls.w	800d0dc <__ieee754_powf+0x558>
 800cbb0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800cbb4:	ecbd 8b02 	vpop	{d8}
 800cbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbbc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cbc0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cbc4:	dcf4      	bgt.n	800cbb0 <__ieee754_powf+0x2c>
 800cbc6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800cbca:	dd08      	ble.n	800cbde <__ieee754_powf+0x5a>
 800cbcc:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800cbd0:	d1ee      	bne.n	800cbb0 <__ieee754_powf+0x2c>
 800cbd2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800cbd6:	0064      	lsls	r4, r4, #1
 800cbd8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800cbdc:	e7e6      	b.n	800cbac <__ieee754_powf+0x28>
 800cbde:	2e00      	cmp	r6, #0
 800cbe0:	da20      	bge.n	800cc24 <__ieee754_powf+0xa0>
 800cbe2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800cbe6:	da2d      	bge.n	800cc44 <__ieee754_powf+0xc0>
 800cbe8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800cbec:	f2c0 827f 	blt.w	800d0ee <__ieee754_powf+0x56a>
 800cbf0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800cbf4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cbf8:	fa48 f703 	asr.w	r7, r8, r3
 800cbfc:	fa07 f303 	lsl.w	r3, r7, r3
 800cc00:	4543      	cmp	r3, r8
 800cc02:	f040 8274 	bne.w	800d0ee <__ieee754_powf+0x56a>
 800cc06:	f007 0701 	and.w	r7, r7, #1
 800cc0a:	f1c7 0702 	rsb	r7, r7, #2
 800cc0e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800cc12:	d11f      	bne.n	800cc54 <__ieee754_powf+0xd0>
 800cc14:	2c00      	cmp	r4, #0
 800cc16:	f280 8267 	bge.w	800d0e8 <__ieee754_powf+0x564>
 800cc1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cc1e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cc22:	e7c7      	b.n	800cbb4 <__ieee754_powf+0x30>
 800cc24:	2700      	movs	r7, #0
 800cc26:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800cc2a:	d1f0      	bne.n	800cc0e <__ieee754_powf+0x8a>
 800cc2c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800cc30:	f000 8254 	beq.w	800d0dc <__ieee754_powf+0x558>
 800cc34:	dd08      	ble.n	800cc48 <__ieee754_powf+0xc4>
 800cc36:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800cf40 <__ieee754_powf+0x3bc>
 800cc3a:	2c00      	cmp	r4, #0
 800cc3c:	bfa8      	it	ge
 800cc3e:	eeb0 0a68 	vmovge.f32	s0, s17
 800cc42:	e7b7      	b.n	800cbb4 <__ieee754_powf+0x30>
 800cc44:	2702      	movs	r7, #2
 800cc46:	e7ee      	b.n	800cc26 <__ieee754_powf+0xa2>
 800cc48:	2c00      	cmp	r4, #0
 800cc4a:	f280 824a 	bge.w	800d0e2 <__ieee754_powf+0x55e>
 800cc4e:	eeb1 0a68 	vneg.f32	s0, s17
 800cc52:	e7af      	b.n	800cbb4 <__ieee754_powf+0x30>
 800cc54:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800cc58:	d102      	bne.n	800cc60 <__ieee754_powf+0xdc>
 800cc5a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cc5e:	e7a9      	b.n	800cbb4 <__ieee754_powf+0x30>
 800cc60:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800cc64:	eeb0 0a48 	vmov.f32	s0, s16
 800cc68:	d107      	bne.n	800cc7a <__ieee754_powf+0xf6>
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	db05      	blt.n	800cc7a <__ieee754_powf+0xf6>
 800cc6e:	ecbd 8b02 	vpop	{d8}
 800cc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc76:	f000 ba53 	b.w	800d120 <__ieee754_sqrtf>
 800cc7a:	f000 fb4b 	bl	800d314 <fabsf>
 800cc7e:	b125      	cbz	r5, 800cc8a <__ieee754_powf+0x106>
 800cc80:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800cc84:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cc88:	d116      	bne.n	800ccb8 <__ieee754_powf+0x134>
 800cc8a:	2c00      	cmp	r4, #0
 800cc8c:	bfbc      	itt	lt
 800cc8e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cc92:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	da8c      	bge.n	800cbb4 <__ieee754_powf+0x30>
 800cc9a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800cc9e:	ea55 0307 	orrs.w	r3, r5, r7
 800cca2:	d104      	bne.n	800ccae <__ieee754_powf+0x12a>
 800cca4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cca8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ccac:	e782      	b.n	800cbb4 <__ieee754_powf+0x30>
 800ccae:	2f01      	cmp	r7, #1
 800ccb0:	d180      	bne.n	800cbb4 <__ieee754_powf+0x30>
 800ccb2:	eeb1 0a40 	vneg.f32	s0, s0
 800ccb6:	e77d      	b.n	800cbb4 <__ieee754_powf+0x30>
 800ccb8:	0ff0      	lsrs	r0, r6, #31
 800ccba:	3801      	subs	r0, #1
 800ccbc:	ea57 0300 	orrs.w	r3, r7, r0
 800ccc0:	d104      	bne.n	800cccc <__ieee754_powf+0x148>
 800ccc2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ccc6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ccca:	e773      	b.n	800cbb4 <__ieee754_powf+0x30>
 800cccc:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800ccd0:	dd74      	ble.n	800cdbc <__ieee754_powf+0x238>
 800ccd2:	4b9c      	ldr	r3, [pc, #624]	; (800cf44 <__ieee754_powf+0x3c0>)
 800ccd4:	429d      	cmp	r5, r3
 800ccd6:	dc08      	bgt.n	800ccea <__ieee754_powf+0x166>
 800ccd8:	2c00      	cmp	r4, #0
 800ccda:	da0b      	bge.n	800ccf4 <__ieee754_powf+0x170>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	ecbd 8b02 	vpop	{d8}
 800cce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cce6:	f000 ba3b 	b.w	800d160 <__math_oflowf>
 800ccea:	4b97      	ldr	r3, [pc, #604]	; (800cf48 <__ieee754_powf+0x3c4>)
 800ccec:	429d      	cmp	r5, r3
 800ccee:	dd08      	ble.n	800cd02 <__ieee754_powf+0x17e>
 800ccf0:	2c00      	cmp	r4, #0
 800ccf2:	dcf3      	bgt.n	800ccdc <__ieee754_powf+0x158>
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	ecbd 8b02 	vpop	{d8}
 800ccfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfe:	f000 ba29 	b.w	800d154 <__math_uflowf>
 800cd02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cd06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cd0a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800cf4c <__ieee754_powf+0x3c8>
 800cd0e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cd12:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cd16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd1a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cd1e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd26:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cf50 <__ieee754_powf+0x3cc>
 800cd2a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800cd2e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800cf54 <__ieee754_powf+0x3d0>
 800cd32:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cd36:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800cf58 <__ieee754_powf+0x3d4>
 800cd3a:	eef0 6a67 	vmov.f32	s13, s15
 800cd3e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800cd42:	ee16 3a90 	vmov	r3, s13
 800cd46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cd4a:	f023 030f 	bic.w	r3, r3, #15
 800cd4e:	ee00 3a90 	vmov	s1, r3
 800cd52:	eee0 0a47 	vfms.f32	s1, s0, s14
 800cd56:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cd5a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800cd5e:	f024 040f 	bic.w	r4, r4, #15
 800cd62:	ee07 4a10 	vmov	s14, r4
 800cd66:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cd6a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cd6e:	ee07 3a90 	vmov	s15, r3
 800cd72:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cd76:	3f01      	subs	r7, #1
 800cd78:	ea57 0200 	orrs.w	r2, r7, r0
 800cd7c:	ee07 4a10 	vmov	s14, r4
 800cd80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd84:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800cd88:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cd8c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cd90:	ee17 4a10 	vmov	r4, s14
 800cd94:	bf08      	it	eq
 800cd96:	eeb0 8a40 	vmoveq.f32	s16, s0
 800cd9a:	2c00      	cmp	r4, #0
 800cd9c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cda0:	f340 817e 	ble.w	800d0a0 <__ieee754_powf+0x51c>
 800cda4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cda8:	f340 80f8 	ble.w	800cf9c <__ieee754_powf+0x418>
 800cdac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb4:	bf4c      	ite	mi
 800cdb6:	2001      	movmi	r0, #1
 800cdb8:	2000      	movpl	r0, #0
 800cdba:	e790      	b.n	800ccde <__ieee754_powf+0x15a>
 800cdbc:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800cdc0:	bf01      	itttt	eq
 800cdc2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800cf5c <__ieee754_powf+0x3d8>
 800cdc6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800cdca:	f06f 0217 	mvneq.w	r2, #23
 800cdce:	ee17 5a90 	vmoveq	r5, s15
 800cdd2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cdd6:	bf18      	it	ne
 800cdd8:	2200      	movne	r2, #0
 800cdda:	3b7f      	subs	r3, #127	; 0x7f
 800cddc:	4413      	add	r3, r2
 800cdde:	4a60      	ldr	r2, [pc, #384]	; (800cf60 <__ieee754_powf+0x3dc>)
 800cde0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800cde4:	4295      	cmp	r5, r2
 800cde6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800cdea:	dd06      	ble.n	800cdfa <__ieee754_powf+0x276>
 800cdec:	4a5d      	ldr	r2, [pc, #372]	; (800cf64 <__ieee754_powf+0x3e0>)
 800cdee:	4295      	cmp	r5, r2
 800cdf0:	f340 80a4 	ble.w	800cf3c <__ieee754_powf+0x3b8>
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	4a5a      	ldr	r2, [pc, #360]	; (800cf68 <__ieee754_powf+0x3e4>)
 800cdfe:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800ce02:	ee07 1a90 	vmov	s15, r1
 800ce06:	ed92 7a00 	vldr	s14, [r2]
 800ce0a:	4a58      	ldr	r2, [pc, #352]	; (800cf6c <__ieee754_powf+0x3e8>)
 800ce0c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ce10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ce14:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ce18:	1049      	asrs	r1, r1, #1
 800ce1a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ce1e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ce22:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800ce26:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800ce2a:	ee06 1a10 	vmov	s12, r1
 800ce2e:	ee65 4a26 	vmul.f32	s9, s10, s13
 800ce32:	ee36 7a47 	vsub.f32	s14, s12, s14
 800ce36:	ee14 6a90 	vmov	r6, s9
 800ce3a:	4016      	ands	r6, r2
 800ce3c:	ee05 6a90 	vmov	s11, r6
 800ce40:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800ce44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce48:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800cf70 <__ieee754_powf+0x3ec>
 800ce4c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800ce50:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800ce54:	ee25 6a26 	vmul.f32	s12, s10, s13
 800ce58:	eddf 6a46 	vldr	s13, [pc, #280]	; 800cf74 <__ieee754_powf+0x3f0>
 800ce5c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ce60:	eddf 6a45 	vldr	s13, [pc, #276]	; 800cf78 <__ieee754_powf+0x3f4>
 800ce64:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ce68:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cf4c <__ieee754_powf+0x3c8>
 800ce6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce70:	eddf 6a42 	vldr	s13, [pc, #264]	; 800cf7c <__ieee754_powf+0x3f8>
 800ce74:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ce78:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800cf80 <__ieee754_powf+0x3fc>
 800ce7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ce80:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800ce84:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800ce88:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ce8c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800ce90:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800ce94:	eef0 7a45 	vmov.f32	s15, s10
 800ce98:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ce9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cea0:	ee17 1a90 	vmov	r1, s15
 800cea4:	4011      	ands	r1, r2
 800cea6:	ee07 1a90 	vmov	s15, r1
 800ceaa:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800ceae:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800ceb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ceb6:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ceba:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cebe:	eeb0 6a47 	vmov.f32	s12, s14
 800cec2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800cec6:	ee16 1a10 	vmov	r1, s12
 800ceca:	4011      	ands	r1, r2
 800cecc:	ee06 1a90 	vmov	s13, r1
 800ced0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800ced4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cf84 <__ieee754_powf+0x400>
 800ced8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800cf88 <__ieee754_powf+0x404>
 800cedc:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cee0:	ee06 1a10 	vmov	s12, r1
 800cee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cee8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800cf8c <__ieee754_powf+0x408>
 800ceec:	4928      	ldr	r1, [pc, #160]	; (800cf90 <__ieee754_powf+0x40c>)
 800ceee:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cef2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800cef6:	edd1 7a00 	vldr	s15, [r1]
 800cefa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	4b24      	ldr	r3, [pc, #144]	; (800cf94 <__ieee754_powf+0x410>)
 800cf04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cf08:	eef0 7a47 	vmov.f32	s15, s14
 800cf0c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cf10:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800cf14:	edd5 0a00 	vldr	s1, [r5]
 800cf18:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cf1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf20:	ee17 3a90 	vmov	r3, s15
 800cf24:	4013      	ands	r3, r2
 800cf26:	ee07 3a90 	vmov	s15, r3
 800cf2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800cf2e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800cf32:	eee6 6a65 	vfms.f32	s13, s12, s11
 800cf36:	ee77 7a66 	vsub.f32	s15, s14, s13
 800cf3a:	e70e      	b.n	800cd5a <__ieee754_powf+0x1d6>
 800cf3c:	2501      	movs	r5, #1
 800cf3e:	e75d      	b.n	800cdfc <__ieee754_powf+0x278>
 800cf40:	00000000 	.word	0x00000000
 800cf44:	3f7ffff3 	.word	0x3f7ffff3
 800cf48:	3f800007 	.word	0x3f800007
 800cf4c:	3eaaaaab 	.word	0x3eaaaaab
 800cf50:	3fb8aa3b 	.word	0x3fb8aa3b
 800cf54:	36eca570 	.word	0x36eca570
 800cf58:	3fb8aa00 	.word	0x3fb8aa00
 800cf5c:	4b800000 	.word	0x4b800000
 800cf60:	001cc471 	.word	0x001cc471
 800cf64:	005db3d6 	.word	0x005db3d6
 800cf68:	0800d970 	.word	0x0800d970
 800cf6c:	fffff000 	.word	0xfffff000
 800cf70:	3e6c3255 	.word	0x3e6c3255
 800cf74:	3e53f142 	.word	0x3e53f142
 800cf78:	3e8ba305 	.word	0x3e8ba305
 800cf7c:	3edb6db7 	.word	0x3edb6db7
 800cf80:	3f19999a 	.word	0x3f19999a
 800cf84:	3f76384f 	.word	0x3f76384f
 800cf88:	3f763800 	.word	0x3f763800
 800cf8c:	369dc3a0 	.word	0x369dc3a0
 800cf90:	0800d980 	.word	0x0800d980
 800cf94:	0800d978 	.word	0x0800d978
 800cf98:	3338aa3c 	.word	0x3338aa3c
 800cf9c:	f040 8095 	bne.w	800d0ca <__ieee754_powf+0x546>
 800cfa0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800cf98 <__ieee754_powf+0x414>
 800cfa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cfa8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cfac:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cfb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb4:	f73f aefa 	bgt.w	800cdac <__ieee754_powf+0x228>
 800cfb8:	15db      	asrs	r3, r3, #23
 800cfba:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800cfbe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cfc2:	4103      	asrs	r3, r0
 800cfc4:	4423      	add	r3, r4
 800cfc6:	494b      	ldr	r1, [pc, #300]	; (800d0f4 <__ieee754_powf+0x570>)
 800cfc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cfcc:	3a7f      	subs	r2, #127	; 0x7f
 800cfce:	4111      	asrs	r1, r2
 800cfd0:	ea23 0101 	bic.w	r1, r3, r1
 800cfd4:	ee07 1a10 	vmov	s14, r1
 800cfd8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800cfdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cfe0:	f1c2 0217 	rsb	r2, r2, #23
 800cfe4:	4110      	asrs	r0, r2
 800cfe6:	2c00      	cmp	r4, #0
 800cfe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfec:	bfb8      	it	lt
 800cfee:	4240      	neglt	r0, r0
 800cff0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cff4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800d0f8 <__ieee754_powf+0x574>
 800cff8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800d0fc <__ieee754_powf+0x578>
 800cffc:	ee17 3a10 	vmov	r3, s14
 800d000:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d004:	f023 030f 	bic.w	r3, r3, #15
 800d008:	ee07 3a10 	vmov	s14, r3
 800d00c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d010:	ee27 0a00 	vmul.f32	s0, s14, s0
 800d014:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d018:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d100 <__ieee754_powf+0x57c>
 800d01c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800d020:	eef0 7a40 	vmov.f32	s15, s0
 800d024:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d028:	eeb0 6a67 	vmov.f32	s12, s15
 800d02c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d030:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d034:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d038:	eddf 6a32 	vldr	s13, [pc, #200]	; 800d104 <__ieee754_powf+0x580>
 800d03c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800d108 <__ieee754_powf+0x584>
 800d040:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d044:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800d10c <__ieee754_powf+0x588>
 800d048:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d04c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d110 <__ieee754_powf+0x58c>
 800d050:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d054:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d114 <__ieee754_powf+0x590>
 800d058:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d05c:	eef0 6a67 	vmov.f32	s13, s15
 800d060:	eee6 6a47 	vfms.f32	s13, s12, s14
 800d064:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d068:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800d06c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d070:	eea7 0a80 	vfma.f32	s0, s15, s0
 800d074:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d078:	ee37 0a40 	vsub.f32	s0, s14, s0
 800d07c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d080:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d084:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d088:	ee10 3a10 	vmov	r3, s0
 800d08c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d094:	da1f      	bge.n	800d0d6 <__ieee754_powf+0x552>
 800d096:	f000 f951 	bl	800d33c <scalbnf>
 800d09a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d09e:	e589      	b.n	800cbb4 <__ieee754_powf+0x30>
 800d0a0:	4a1d      	ldr	r2, [pc, #116]	; (800d118 <__ieee754_powf+0x594>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	dd07      	ble.n	800d0b6 <__ieee754_powf+0x532>
 800d0a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ae:	bf4c      	ite	mi
 800d0b0:	2001      	movmi	r0, #1
 800d0b2:	2000      	movpl	r0, #0
 800d0b4:	e61f      	b.n	800ccf6 <__ieee754_powf+0x172>
 800d0b6:	d108      	bne.n	800d0ca <__ieee754_powf+0x546>
 800d0b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d0bc:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c4:	f6ff af78 	blt.w	800cfb8 <__ieee754_powf+0x434>
 800d0c8:	e7ed      	b.n	800d0a6 <__ieee754_powf+0x522>
 800d0ca:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d0ce:	f73f af73 	bgt.w	800cfb8 <__ieee754_powf+0x434>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	e78c      	b.n	800cff0 <__ieee754_powf+0x46c>
 800d0d6:	ee00 3a10 	vmov	s0, r3
 800d0da:	e7de      	b.n	800d09a <__ieee754_powf+0x516>
 800d0dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d0e0:	e568      	b.n	800cbb4 <__ieee754_powf+0x30>
 800d0e2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d11c <__ieee754_powf+0x598>
 800d0e6:	e565      	b.n	800cbb4 <__ieee754_powf+0x30>
 800d0e8:	eeb0 0a48 	vmov.f32	s0, s16
 800d0ec:	e562      	b.n	800cbb4 <__ieee754_powf+0x30>
 800d0ee:	2700      	movs	r7, #0
 800d0f0:	e58d      	b.n	800cc0e <__ieee754_powf+0x8a>
 800d0f2:	bf00      	nop
 800d0f4:	007fffff 	.word	0x007fffff
 800d0f8:	35bfbe8c 	.word	0x35bfbe8c
 800d0fc:	3f317200 	.word	0x3f317200
 800d100:	3f317218 	.word	0x3f317218
 800d104:	b5ddea0e 	.word	0xb5ddea0e
 800d108:	3331bb4c 	.word	0x3331bb4c
 800d10c:	388ab355 	.word	0x388ab355
 800d110:	bb360b61 	.word	0xbb360b61
 800d114:	3e2aaaab 	.word	0x3e2aaaab
 800d118:	43160000 	.word	0x43160000
 800d11c:	00000000 	.word	0x00000000

0800d120 <__ieee754_sqrtf>:
 800d120:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d124:	4770      	bx	lr

0800d126 <with_errnof>:
 800d126:	b513      	push	{r0, r1, r4, lr}
 800d128:	4604      	mov	r4, r0
 800d12a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d12e:	f7fc fc3b 	bl	80099a8 <__errno>
 800d132:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d136:	6004      	str	r4, [r0, #0]
 800d138:	b002      	add	sp, #8
 800d13a:	bd10      	pop	{r4, pc}

0800d13c <xflowf>:
 800d13c:	b130      	cbz	r0, 800d14c <xflowf+0x10>
 800d13e:	eef1 7a40 	vneg.f32	s15, s0
 800d142:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d146:	2022      	movs	r0, #34	; 0x22
 800d148:	f7ff bfed 	b.w	800d126 <with_errnof>
 800d14c:	eef0 7a40 	vmov.f32	s15, s0
 800d150:	e7f7      	b.n	800d142 <xflowf+0x6>
	...

0800d154 <__math_uflowf>:
 800d154:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d15c <__math_uflowf+0x8>
 800d158:	f7ff bff0 	b.w	800d13c <xflowf>
 800d15c:	10000000 	.word	0x10000000

0800d160 <__math_oflowf>:
 800d160:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d168 <__math_oflowf+0x8>
 800d164:	f7ff bfea 	b.w	800d13c <xflowf>
 800d168:	70000000 	.word	0x70000000

0800d16c <atanf>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	ee10 5a10 	vmov	r5, s0
 800d172:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d176:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d17a:	eef0 7a40 	vmov.f32	s15, s0
 800d17e:	db10      	blt.n	800d1a2 <atanf+0x36>
 800d180:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d184:	dd04      	ble.n	800d190 <atanf+0x24>
 800d186:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d18a:	eeb0 0a67 	vmov.f32	s0, s15
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d2c8 <atanf+0x15c>
 800d194:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800d2cc <atanf+0x160>
 800d198:	2d00      	cmp	r5, #0
 800d19a:	bfd8      	it	le
 800d19c:	eef0 7a40 	vmovle.f32	s15, s0
 800d1a0:	e7f3      	b.n	800d18a <atanf+0x1e>
 800d1a2:	4b4b      	ldr	r3, [pc, #300]	; (800d2d0 <atanf+0x164>)
 800d1a4:	429c      	cmp	r4, r3
 800d1a6:	dc10      	bgt.n	800d1ca <atanf+0x5e>
 800d1a8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d1ac:	da0a      	bge.n	800d1c4 <atanf+0x58>
 800d1ae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d2d4 <atanf+0x168>
 800d1b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c2:	dce2      	bgt.n	800d18a <atanf+0x1e>
 800d1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1c8:	e013      	b.n	800d1f2 <atanf+0x86>
 800d1ca:	f000 f8a3 	bl	800d314 <fabsf>
 800d1ce:	4b42      	ldr	r3, [pc, #264]	; (800d2d8 <atanf+0x16c>)
 800d1d0:	429c      	cmp	r4, r3
 800d1d2:	dc4f      	bgt.n	800d274 <atanf+0x108>
 800d1d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d1d8:	429c      	cmp	r4, r3
 800d1da:	dc41      	bgt.n	800d260 <atanf+0xf4>
 800d1dc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d1e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d1ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d1f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d2dc <atanf+0x170>
 800d1fc:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d2e0 <atanf+0x174>
 800d200:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d2e4 <atanf+0x178>
 800d204:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d208:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d20c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d2e8 <atanf+0x17c>
 800d210:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d214:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d2ec <atanf+0x180>
 800d218:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d21c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d2f0 <atanf+0x184>
 800d220:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d224:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d2f4 <atanf+0x188>
 800d228:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d22c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d2f8 <atanf+0x18c>
 800d230:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d234:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d2fc <atanf+0x190>
 800d238:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d23c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d300 <atanf+0x194>
 800d240:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d244:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d304 <atanf+0x198>
 800d248:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d24c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d250:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d254:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d258:	d121      	bne.n	800d29e <atanf+0x132>
 800d25a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d25e:	e794      	b.n	800d18a <atanf+0x1e>
 800d260:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d264:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d268:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d26c:	2301      	movs	r3, #1
 800d26e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d272:	e7be      	b.n	800d1f2 <atanf+0x86>
 800d274:	4b24      	ldr	r3, [pc, #144]	; (800d308 <atanf+0x19c>)
 800d276:	429c      	cmp	r4, r3
 800d278:	dc0b      	bgt.n	800d292 <atanf+0x126>
 800d27a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d27e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d282:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d286:	2302      	movs	r3, #2
 800d288:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d28c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d290:	e7af      	b.n	800d1f2 <atanf+0x86>
 800d292:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d296:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d29a:	2303      	movs	r3, #3
 800d29c:	e7a9      	b.n	800d1f2 <atanf+0x86>
 800d29e:	4a1b      	ldr	r2, [pc, #108]	; (800d30c <atanf+0x1a0>)
 800d2a0:	491b      	ldr	r1, [pc, #108]	; (800d310 <atanf+0x1a4>)
 800d2a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d2a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d2aa:	ed93 0a00 	vldr	s0, [r3]
 800d2ae:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d2b2:	ed92 0a00 	vldr	s0, [r2]
 800d2b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2ba:	2d00      	cmp	r5, #0
 800d2bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d2c0:	bfb8      	it	lt
 800d2c2:	eef1 7a67 	vneglt.f32	s15, s15
 800d2c6:	e760      	b.n	800d18a <atanf+0x1e>
 800d2c8:	3fc90fdb 	.word	0x3fc90fdb
 800d2cc:	bfc90fdb 	.word	0xbfc90fdb
 800d2d0:	3edfffff 	.word	0x3edfffff
 800d2d4:	7149f2ca 	.word	0x7149f2ca
 800d2d8:	3f97ffff 	.word	0x3f97ffff
 800d2dc:	3c8569d7 	.word	0x3c8569d7
 800d2e0:	3d4bda59 	.word	0x3d4bda59
 800d2e4:	bd6ef16b 	.word	0xbd6ef16b
 800d2e8:	3d886b35 	.word	0x3d886b35
 800d2ec:	3dba2e6e 	.word	0x3dba2e6e
 800d2f0:	3e124925 	.word	0x3e124925
 800d2f4:	3eaaaaab 	.word	0x3eaaaaab
 800d2f8:	bd15a221 	.word	0xbd15a221
 800d2fc:	bd9d8795 	.word	0xbd9d8795
 800d300:	bde38e38 	.word	0xbde38e38
 800d304:	be4ccccd 	.word	0xbe4ccccd
 800d308:	401bffff 	.word	0x401bffff
 800d30c:	0800d988 	.word	0x0800d988
 800d310:	0800d998 	.word	0x0800d998

0800d314 <fabsf>:
 800d314:	ee10 3a10 	vmov	r3, s0
 800d318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d31c:	ee00 3a10 	vmov	s0, r3
 800d320:	4770      	bx	lr

0800d322 <finitef>:
 800d322:	b082      	sub	sp, #8
 800d324:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d328:	9801      	ldr	r0, [sp, #4]
 800d32a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d32e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d332:	bfac      	ite	ge
 800d334:	2000      	movge	r0, #0
 800d336:	2001      	movlt	r0, #1
 800d338:	b002      	add	sp, #8
 800d33a:	4770      	bx	lr

0800d33c <scalbnf>:
 800d33c:	ee10 3a10 	vmov	r3, s0
 800d340:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d344:	d025      	beq.n	800d392 <scalbnf+0x56>
 800d346:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d34a:	d302      	bcc.n	800d352 <scalbnf+0x16>
 800d34c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d350:	4770      	bx	lr
 800d352:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d356:	d122      	bne.n	800d39e <scalbnf+0x62>
 800d358:	4b2a      	ldr	r3, [pc, #168]	; (800d404 <scalbnf+0xc8>)
 800d35a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d408 <scalbnf+0xcc>
 800d35e:	4298      	cmp	r0, r3
 800d360:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d364:	db16      	blt.n	800d394 <scalbnf+0x58>
 800d366:	ee10 3a10 	vmov	r3, s0
 800d36a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d36e:	3a19      	subs	r2, #25
 800d370:	4402      	add	r2, r0
 800d372:	2afe      	cmp	r2, #254	; 0xfe
 800d374:	dd15      	ble.n	800d3a2 <scalbnf+0x66>
 800d376:	ee10 3a10 	vmov	r3, s0
 800d37a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d40c <scalbnf+0xd0>
 800d37e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d410 <scalbnf+0xd4>
 800d382:	2b00      	cmp	r3, #0
 800d384:	eeb0 7a67 	vmov.f32	s14, s15
 800d388:	bfb8      	it	lt
 800d38a:	eef0 7a66 	vmovlt.f32	s15, s13
 800d38e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d392:	4770      	bx	lr
 800d394:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d414 <scalbnf+0xd8>
 800d398:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d39c:	4770      	bx	lr
 800d39e:	0dd2      	lsrs	r2, r2, #23
 800d3a0:	e7e6      	b.n	800d370 <scalbnf+0x34>
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	dd06      	ble.n	800d3b4 <scalbnf+0x78>
 800d3a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3aa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d3ae:	ee00 3a10 	vmov	s0, r3
 800d3b2:	4770      	bx	lr
 800d3b4:	f112 0f16 	cmn.w	r2, #22
 800d3b8:	da1a      	bge.n	800d3f0 <scalbnf+0xb4>
 800d3ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d3be:	4298      	cmp	r0, r3
 800d3c0:	ee10 3a10 	vmov	r3, s0
 800d3c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3c8:	dd0a      	ble.n	800d3e0 <scalbnf+0xa4>
 800d3ca:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d40c <scalbnf+0xd0>
 800d3ce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d410 <scalbnf+0xd4>
 800d3d2:	eef0 7a40 	vmov.f32	s15, s0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	bf18      	it	ne
 800d3da:	eeb0 0a47 	vmovne.f32	s0, s14
 800d3de:	e7db      	b.n	800d398 <scalbnf+0x5c>
 800d3e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d414 <scalbnf+0xd8>
 800d3e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d418 <scalbnf+0xdc>
 800d3e8:	eef0 7a40 	vmov.f32	s15, s0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	e7f3      	b.n	800d3d8 <scalbnf+0x9c>
 800d3f0:	3219      	adds	r2, #25
 800d3f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d3f6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d3fa:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d41c <scalbnf+0xe0>
 800d3fe:	ee07 3a10 	vmov	s14, r3
 800d402:	e7c4      	b.n	800d38e <scalbnf+0x52>
 800d404:	ffff3cb0 	.word	0xffff3cb0
 800d408:	4c000000 	.word	0x4c000000
 800d40c:	7149f2ca 	.word	0x7149f2ca
 800d410:	f149f2ca 	.word	0xf149f2ca
 800d414:	0da24260 	.word	0x0da24260
 800d418:	8da24260 	.word	0x8da24260
 800d41c:	33000000 	.word	0x33000000

0800d420 <_init>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	bf00      	nop
 800d424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d426:	bc08      	pop	{r3}
 800d428:	469e      	mov	lr, r3
 800d42a:	4770      	bx	lr

0800d42c <_fini>:
 800d42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42e:	bf00      	nop
 800d430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d432:	bc08      	pop	{r3}
 800d434:	469e      	mov	lr, r3
 800d436:	4770      	bx	lr
